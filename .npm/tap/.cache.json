{"_id":"tap","_rev":"116-a6b0303803c1705c5fcfc7b1c2bee56c","name":"tap","description":"A Test-Anything-Protocol library","dist-tags":{"latest":"0.4.8"},"versions":{"0.0.1":{"name":"tap","version":"0.0.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"bundledDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"scripts":{"test":"bin/tap.js test"},"devDependencies":{},"_id":"tap@0.0.1","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc9","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"3191489eb3678e12922c999a1b233dfcedbf8dd9","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.1.tgz"},"directories":{},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"0.0.2":{"name":"tap","version":"0.0.2","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"bundledDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"scripts":{"test":"bin/tap.js test"},"_npmJsonOpts":{"file":"/Users/isaacs/.npm/tap/0.0.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"tap@0.0.2","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.13","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"de4383a6c8677fc03a393b5f99e795c65137c456","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.2.tgz"},"directories":{},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"0.0.3":{"name":"tap","version":"0.0.3","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"bundledDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"scripts":{"test":"bin/tap.js test"},"_npmJsonOpts":{"file":"/Users/isaacs/.npm/tap/0.0.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"tap@0.0.3","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9-pre","_defaultsLoaded":true,"dist":{"shasum":"ee2b4695bf2da7f524c8d834ef63805ce2722618","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.3.tgz"},"directories":{},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"0.0.4":{"name":"tap","version":"0.0.4","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x >=0.0.4","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"bundledDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"scripts":{"test":"bin/tap.js test"},"_npmJsonOpts":{"file":"/Users/isaacs/.npm/tap/0.0.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"tap@0.0.4","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9-pre","_defaultsLoaded":true,"dist":{"shasum":"82c4f40d5ff6971a3d8d71d757ff265dc9167079","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.4.tgz"},"directories":{},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"0.0.5":{"name":"tap","version":"0.0.5","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x >=0.0.4","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"bundledDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"scripts":{"test":"bin/tap.js test"},"_npmJsonOpts":{"file":"/Users/isaacs/.npm/tap/0.0.5/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"tap@0.0.5","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.4.9-pre","_defaultsLoaded":true,"dist":{"shasum":"813953aa437849d13491338663d5b5878ad7915e","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.5.tgz"},"directories":{},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"0.0.6":{"name":"tap","version":"0.0.6","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x >=0.0.4","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"bundledDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"scripts":{"test":"bin/tap.js test"},"_npmJsonOpts":{"file":"/Users/isaacs/.npm/tap/0.0.6/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"tap@0.0.6","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.18","_nodeVersion":"v0.4.10-pre","_defaultsLoaded":true,"dist":{"shasum":"6b0a2a743ffed5e62be1dafc2b3daf6b03c8697b","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.6.tgz"},"directories":{},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"0.0.7":{"name":"tap","version":"0.0.7","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x >=0.0.4","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"bundledDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"scripts":{"test":"bin/tap.js test"},"_npmJsonOpts":{"file":"/Users/isaacs/.npm/tap/0.0.7/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"tap@0.0.7","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.22","_nodeVersion":"v0.4.10-pre","_defaultsLoaded":true,"dist":{"shasum":"fc7b0d14d7a5185cf8be4184d1b04a7b86aa0fdc","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.7.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{},"_npmUser":{"name":"isaacs","email":"i@izs.me"}},"0.0.8":{"name":"tap","version":"0.0.8","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x >=0.0.4","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"bundledDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"scripts":{"test":"bin/tap.js test"},"_npmJsonOpts":{"file":"/Users/isaacs/.npm/tap/0.0.8/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"tap@0.0.8","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.22","_nodeVersion":"v0.4.10-pre","_defaultsLoaded":true,"dist":{"shasum":"f3ac8c951ad185c07d16c1c963bde6ec12db0e98","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.8.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{},"_npmUser":{"name":"isaacs","email":"i@izs.me"}},"0.0.9":{"name":"tap","version":"0.0.9","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x >=0.0.4","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"bundledDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmJsonOpts":{"file":"/Users/isaacs/.npm/tap/0.0.9/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"tap@0.0.9","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"78db1b1df7ce306ffe91c6bd7a6b43bf853568ce","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.9.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmUser":{"name":"isaacs","email":"i@izs.me"},"directories":{}},"0.0.10":{"name":"tap","version":"0.0.10","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x >=0.0.4","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.0.10","bundleDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.93","_nodeVersion":"v0.5.9-pre","_defaultsLoaded":true,"dist":{"shasum":"43e0b6f921280130b3525aa50b6e47dc0b2406a4","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.10.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.0.11":{"name":"tap","version":"0.0.11","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x >=0.0.6","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.0.11","bundleDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.94","_nodeVersion":"v0.5.10-pre","_defaultsLoaded":true,"dist":{"shasum":"8a1e5a8e56a57cae969323684a3838d93d934830","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.11.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.0.12":{"name":"tap","version":"0.0.12","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x >=0.0.6","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.0.12","bundleDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.101","_nodeVersion":"v0.5.11-pre","_defaultsLoaded":true,"dist":{"shasum":"9327c627ff14ee6a120c811e89536394f175dce7","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.12.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.0.13":{"name":"tap","version":"0.0.13","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x >=0.0.6","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.0.13","bundleDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.6.1-pre","_defaultsLoaded":true,"dist":{"shasum":"5eb641fc2ef3758cd2c8687236a17c27fe19f10e","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.13.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.0.14":{"name":"tap","version":"0.0.14","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"tap-global-harness":"0.x","tap-runner":"0.x >=0.0.6","tap-assert":"0.x","tap-test":"0.x","tap-harness":"0.x","tap-results":"0.x","tap-consumer":"0.x","tap-producer":"0.x","inherits":"*","yamlish":"*"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.0.14","bundleDependencies":["inherits","tap-assert","tap-consumer","tap-global-harness","tap-harness","tap-producer","tap-results","tap-test","yamlish"],"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.105","_nodeVersion":"v0.6.1-pre","_defaultsLoaded":true,"dist":{"shasum":"a70180fde9b1dd99f66c6482fa975d18761c3e03","tarball":"http://registry.npmjs.org/tap/-/tap-0.0.14.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.0":{"name":"tap","version":"0.1.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.1.0","bundleDependencies":["inherits","tap-consumer","yamlish"],"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-alpha","_nodeVersion":"v0.6.2-pre","_defaultsLoaded":true,"dist":{"shasum":"088f93d32a8731606665f5f2ec96aed4820e97e7","tarball":"http://registry.npmjs.org/tap/-/tap-0.1.0.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.1":{"name":"tap","version":"0.1.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"0.0.1"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.1.1","bundleDependencies":["inherits","tap-consumer","yamlish"],"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.6-pre","_defaultsLoaded":true,"dist":{"shasum":"949899f3f34bda1321b798ddf21a99a3393052bc","tarball":"http://registry.npmjs.org/tap/-/tap-0.1.1.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.2":{"name":"tap","version":"0.1.2","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"0.0.1"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.1.2","bundleDependencies":["inherits","tap-consumer","yamlish"],"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.6-pre","_defaultsLoaded":true,"dist":{"shasum":"37a6a9bfd55fe8a8326e5aa5d2bdd32ca88813a2","tarball":"http://registry.npmjs.org/tap/-/tap-0.1.2.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.3":{"name":"tap","version":"0.1.3","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.1.3","bundleDependencies":["inherits","tap-consumer","yamlish"],"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-0","_nodeVersion":"v0.6.6-pre","_defaultsLoaded":true,"dist":{"shasum":"a30186470e79eb09fa1c522177ebdde5a2f701d6","tarball":"http://registry.npmjs.org/tap/-/tap-0.1.3.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.4":{"name":"tap","version":"0.1.4","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"},{"name":"James Halliday","email":"mail@substack.net"},{"name":"Jason Smith","email":"jhs@iriscouch.com","url":"air"},{"name":"Pedro P. Candel","email":"kusorbox@gmail.com"},{"name":"Stein Martin Hustad","email":"stein@hustad.com"},{"name":"Trent Mick","email":"trentm@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.1.4","bundleDependencies":["inherits","tap-consumer","yamlish"],"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7-pre","_defaultsLoaded":true,"dist":{"shasum":"4c0ea8f5b6a768621c38e0de2d7f358bc454a8b8","tarball":"http://registry.npmjs.org/tap/-/tap-0.1.4.tgz"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. `tap ./tests`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./tests [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.2.0":{"name":"tap","version":"0.2.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~1.0.10","mkdirp":"~0.2.2"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"},{"name":"James Halliday","email":"mail@substack.net"},{"name":"Jason Smith","email":"jhs@iriscouch.com","url":"air"},{"name":"Pedro P. Candel","email":"kusorbox@gmail.com"},{"name":"Stein Martin Hustad","email":"stein@hustad.com"},{"name":"Trent Mick","email":"trentm@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.2.0","bundleDependencies":["inherits","tap-consumer","yamlish"],"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.8-pre","_defaultsLoaded":true,"dist":{"shasum":"ed10e53a18dd89e1c530670eaf39ca79a4f54bdc","tarball":"http://registry.npmjs.org/tap/-/tap-0.2.0.tgz"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. `tap ./tests`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./tests [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.2.1":{"name":"tap","version":"0.2.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~1.0.10","mkdirp":"~0.2.2","difflet":"0.2.0"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"},{"name":"James Halliday","email":"mail@substack.net"},{"name":"Jason Smith","email":"jhs@iriscouch.com","url":"air"},{"name":"Pedro P. Candel","email":"kusorbox@gmail.com"},{"name":"Stein Martin Hustad","email":"stein@hustad.com"},{"name":"Trent Mick","email":"trentm@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.2.1","bundleDependencies":["inherits","tap-consumer","yamlish"],"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.7.5-pre","_defaultsLoaded":true,"dist":{"shasum":"feb2978390cda4b075a059a46b531b95c2d754dc","tarball":"http://registry.npmjs.org/tap/-/tap-0.2.1.tgz"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. `tap ./tests`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./tests [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.2.2":{"name":"tap","version":"0.2.2","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~1.0.10","mkdirp":"~0.2.2","difflet":"0.2.0","deep-equal":"~0.0.0"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"},{"name":"James Halliday","email":"mail@substack.net"},{"name":"Jason Smith","email":"jhs@iriscouch.com","url":"air"},{"name":"Pedro P. Candel","email":"kusorbox@gmail.com"},{"name":"Stein Martin Hustad","email":"stein@hustad.com"},{"name":"Trent Mick","email":"trentm@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.2.2","bundleDependencies":["inherits","tap-consumer","yamlish"],"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.9","_defaultsLoaded":true,"dist":{"shasum":"f2b44caed03b63028492e2ab3ac02852bf9cb6ef","tarball":"http://registry.npmjs.org/tap/-/tap-0.2.2.tgz"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. `tap ./tests`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./tests [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.2.3":{"name":"tap","version":"0.2.3","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~1.0.10","mkdirp":"~0.2.2","difflet":"0.2.0","deep-equal":"~0.0.0"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"},{"name":"James Halliday","email":"mail@substack.net"},{"name":"Jason Smith","email":"jhs@iriscouch.com","url":"air"},{"name":"Pedro P. Candel","email":"kusorbox@gmail.com"},{"name":"Stein Martin Hustad","email":"stein@hustad.com"},{"name":"Trent Mick","email":"trentm@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.2.3","bundleDependencies":["inherits","tap-consumer","yamlish"],"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.7.5-pre","_defaultsLoaded":true,"dist":{"shasum":"35e278d349753752185d27fcb41e5915d78b3ed8","tarball":"http://registry.npmjs.org/tap/-/tap-0.2.3.tgz"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. `tap ./tests`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./tests [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.2.4":{"name":"tap","version":"0.2.4","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~1.0.10","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"},{"name":"James Halliday","email":"mail@substack.net"},{"name":"Jason Smith","email":"jhs@iriscouch.com","url":"air"},{"name":"Pedro P. Candel","email":"kusorbox@gmail.com"},{"name":"Stein Martin Hustad","email":"stein@hustad.com"},{"name":"Trent Mick","email":"trentm@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.2.4","bundleDependencies":["inherits","tap-consumer","yamlish"],"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.9","_nodeVersion":"v0.7.7-pre","_defaultsLoaded":true,"dist":{"shasum":"f0437d755b63f11153b549df91c7750edb307340","tarball":"http://registry.npmjs.org/tap/-/tap-0.2.4.tgz"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. `tap ./tests`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./tests [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.2.5":{"name":"tap","version":"0.2.5","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~1.0.10","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"},{"name":"James Halliday","email":"mail@substack.net"},{"name":"Jason Smith","email":"jhs@iriscouch.com","url":"air"},{"name":"Pedro P. Candel","email":"kusorbox@gmail.com"},{"name":"Stein Martin Hustad","email":"stein@hustad.com"},{"name":"Trent Mick","email":"trentm@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"tap@0.2.5","bundleDependencies":["inherits","tap-consumer","yamlish"],"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.7.9-pre","_defaultsLoaded":true,"dist":{"shasum":"9b305de28796bae25c4682fe496259c1184f9fe2","tarball":"http://registry.npmjs.org/tap/-/tap-0.2.5.tgz"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. `tap ./tests`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./tests [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.2.6":{"name":"tap","version":"0.2.6","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. `tap ./tests`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./tests [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","_id":"tap@0.2.6","bundleDependencies":["inherits","tap-consumer","yamlish"],"dist":{"shasum":"efcf97ddfa58a57c9cad9c440938de9319613c2c","tarball":"http://registry.npmjs.org/tap/-/tap-0.2.6.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.3.0":{"name":"tap","version":"0.3.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test/*.js"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. `tap ./tests`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./tests [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","_id":"tap@0.3.0","bundleDependencies":["inherits","tap-consumer","yamlish"],"dist":{"shasum":"75c9eee607730e81a532b6ca8abc5b1e286b1c66","tarball":"http://registry.npmjs.org/tap/-/tap-0.3.0.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.3.1":{"name":"tap","version":"0.3.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test/*.js"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. `tap ./tests`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./tests [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","_id":"tap@0.3.1","bundleDependencies":["inherits","tap-consumer","yamlish"],"dist":{"shasum":"8383247f18265a35a0772405747655df50c99332","tarball":"http://registry.npmjs.org/tap/-/tap-0.3.1.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.3.2":{"name":"tap","version":"0.3.2","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test/*.js"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. `tap ./tests`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./tests [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","readmeFilename":"README.md","_id":"tap@0.3.2","bundleDependencies":["inherits","tap-consumer","yamlish"],"dist":{"shasum":"1f7d6ef6f90369c40bdbd956ebb5bdad3c8cc8b7","tarball":"http://registry.npmjs.org/tap/-/tap-0.3.2.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.3.3":{"name":"tap","version":"0.3.3","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test/*.js"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. `tap ./test`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./test [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","readmeFilename":"README.md","_id":"tap@0.3.3","bundleDependencies":["inherits","tap-consumer","yamlish"],"dist":{"shasum":"c862237af0a213f97fff46594bd1d44eca705d63","tarball":"http://registry.npmjs.org/tap/-/tap-0.3.3.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.4.0":{"name":"tap","version":"0.4.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0","glob":"~3.1.14"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test/*.js"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. Update package.json scripts.test to include `tap ./test` [example\n   gist](https://gist.github.com/4469613)\n5. `npm test`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./test [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","readmeFilename":"README.md","_id":"tap@0.4.0","bundleDependencies":["inherits","tap-consumer","yamlish"],"dist":{"shasum":"5cc04b5e3041fe13d1748f078a9d779e3a95f5bf","tarball":"http://registry.npmjs.org/tap/-/tap-0.4.0.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.4.1":{"name":"tap","version":"0.4.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0","glob":"~3.1.14"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test/*.js"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. Update package.json scripts.test to include `tap ./test` [example\n   gist](https://gist.github.com/4469613)\n5. `npm test`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./test [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","readmeFilename":"README.md","_id":"tap@0.4.1","bundleDependencies":["inherits","tap-consumer","yamlish"],"dist":{"shasum":"03a5979da2b349395b11b6add17b06a7c438730b","tarball":"http://registry.npmjs.org/tap/-/tap-0.4.1.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.4.2":{"name":"tap","version":"0.4.2","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0","glob":"~3.2.1"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test/*.js"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. Update package.json scripts.test to include `tap ./test` [example\n   gist](https://gist.github.com/4469613)\n5. `npm test`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./test [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/isaacs/node-tap/issues"},"bundleDependencies":["inherits","tap-consumer","yamlish"],"_id":"tap@0.4.2","dist":{"shasum":"4d9461266a0d7c6ea3d80d1d922b4f2ef6d4f997","tarball":"http://registry.npmjs.org/tap/-/tap-0.4.2.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.4.3":{"name":"tap","version":"0.4.3","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0","glob":"~3.2.1"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test/*.js"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. Update package.json scripts.test to include `tap ./test` [example\n   gist](https://gist.github.com/4469613)\n5. `npm test`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./test [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/isaacs/node-tap/issues"},"bundleDependencies":["inherits","tap-consumer","yamlish"],"_id":"tap@0.4.3","dist":{"shasum":"5ead7ede530658167fe28e3cdb9b0f96d3cf0c76","tarball":"http://registry.npmjs.org/tap/-/tap-0.4.3.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.4.4":{"name":"tap","version":"0.4.4","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0","glob":"~3.2.1"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test/*.js"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. Update package.json scripts.test to include `tap ./test` [example\n   gist](https://gist.github.com/4469613)\n5. `npm test`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./test [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/isaacs/node-tap/issues"},"bundleDependencies":["inherits","tap-consumer","yamlish"],"_id":"tap@0.4.4","dist":{"shasum":"122ee7afee3fc7f327660a4fda1e5ac9db2b7714","tarball":"http://registry.npmjs.org/tap/-/tap-0.4.4.tgz"},"_from":".","_npmVersion":"1.3.7","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.4.5":{"name":"tap","version":"0.4.5","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0","glob":"~3.2.1"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test/*.js"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. Update package.json scripts.test to include `tap ./test` [example\n   gist](https://gist.github.com/4469613)\n5. `npm test`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.deepEqual(array, [\"foo\", \"bar\"], \"array has foo and bar elements\")\n      t.deepEqual(object, {foo: 42}, \"object has foo property\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./test [--cover=./lib,foo.js] [--cover-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/isaacs/node-tap/issues"},"homepage":"https://github.com/isaacs/node-tap","bundleDependencies":["inherits","tap-consumer","yamlish"],"_id":"tap@0.4.5","dist":{"shasum":"71d4348fb6d523c66edef2cfc115bb0db2cb4b69","tarball":"http://registry.npmjs.org/tap/-/tap-0.4.5.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.4.6":{"name":"tap","version":"0.4.6","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","engines":{"node":">=0.8"},"dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0","glob":"~3.2.1"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test/*.js"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. Update package.json scripts.test to include `tap ./test` [example\n   gist](https://gist.github.com/4469613)\n5. `npm test`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.deepEqual(array, [\"foo\", \"bar\"], \"array has foo and bar elements\")\n      t.deepEqual(object, {foo: 42}, \"object has foo property\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./test [--cover=./lib,foo.js] [--coverage-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/isaacs/node-tap/issues"},"homepage":"https://github.com/isaacs/node-tap","bundleDependencies":["inherits","tap-consumer","yamlish"],"_id":"tap@0.4.6","dist":{"shasum":"64320ccef9af33907d20d58cb8cad4abdde63187","tarball":"http://registry.npmjs.org/tap/-/tap-0.4.6.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.4.7":{"name":"tap","version":"0.4.7","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","engines":{"node":">=0.8"},"dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0","glob":"~3.2.1"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test/*.js"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. Update package.json scripts.test to include `tap ./test` [example\n   gist](https://gist.github.com/4469613)\n5. `npm test`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.deepEqual(array, [\"foo\", \"bar\"], \"array has foo and bar elements\")\n      t.deepEqual(object, {foo: 42}, \"object has foo property\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./test [--cover=./lib,foo.js] [--coverage-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/isaacs/node-tap/issues"},"homepage":"https://github.com/isaacs/node-tap","bundleDependencies":["inherits","tap-consumer","yamlish"],"_id":"tap@0.4.7","dist":{"shasum":"0846b0740cc55b697a56bbf26d835f3a62913f71","tarball":"http://registry.npmjs.org/tap/-/tap-0.4.7.tgz"},"_from":".","_npmVersion":"1.3.23","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.4.8":{"name":"tap","version":"0.4.8","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"description":"A Test-Anything-Protocol library","bin":{"tap":"bin/tap.js"},"main":"lib/main.js","engines":{"node":">=0.8"},"dependencies":{"inherits":"*","yamlish":"*","slide":"*","runforcover":"~0.0.2","nopt":"~2","mkdirp":"~0.3","difflet":"~0.2.0","deep-equal":"~0.0.0","buffer-equal":"~0.0.0","glob":"~3.2.1"},"keywords":["assert","test","tap"],"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},{"name":"baudehlo","email":"helpme+github@gmail.com"}],"license":{"type":"MIT","url":"https://github.com/isaacs/node-tap/raw/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"scripts":{"test":"bin/tap.js test/*.js"},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. Update package.json scripts.test to include `tap ./test` [example\n   gist](https://gist.github.com/4469613)\n5. `npm test`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.deepEqual(array, [\"foo\", \"bar\"], \"array has foo and bar elements\")\n      t.deepEqual(object, {foo: 42}, \"object has foo property\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./test [--cover=./lib,foo.js] [--coverage-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/isaacs/node-tap/issues"},"homepage":"https://github.com/isaacs/node-tap","bundleDependencies":["inherits","tap-consumer","yamlish"],"_id":"tap@0.4.8","dist":{"shasum":"eb04f3f74ae0c4201bbf778e32a5cfb18d261ef0","tarball":"http://registry.npmjs.org/tap/-/tap-0.4.8.tgz"},"_from":".","_npmVersion":"1.3.23","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}}},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"time":{"0.0.1":"2011-12-07T00:43:11.747Z","0.0.2":"2011-12-07T00:43:11.747Z","0.0.3":"2011-12-07T00:43:11.747Z","0.0.4":"2011-12-07T00:43:11.747Z","0.0.5":"2011-12-07T00:43:11.747Z","0.0.6":"2011-12-07T00:43:11.747Z","0.0.7":"2011-12-07T00:43:11.747Z","0.0.8":"2011-12-07T00:43:11.747Z","0.0.9":"2011-12-07T00:43:11.747Z","0.0.10":"2011-10-05T16:27:33.077Z","0.0.11":"2011-10-12T17:24:00.166Z","0.0.12":"2011-10-25T01:16:31.213Z","0.0.13":"2011-11-09T18:17:44.426Z","0.0.14":"2011-11-15T21:44:41.812Z","0.1.0":"2011-11-21T23:12:20.309Z","0.1.1":"2011-12-07T00:43:11.747Z","0.1.2":"2011-12-07T01:02:22.675Z","0.1.3":"2011-12-12T16:45:15.464Z","0.1.4":"2012-01-06T07:33:09.449Z","0.2.0":"2012-01-08T09:01:42.732Z","0.2.1":"2012-02-21T22:36:39.686Z","0.2.2":"2012-02-22T18:38:05.208Z","0.2.3":"2012-02-23T04:42:21.738Z","0.2.4":"2012-03-18T22:51:57.167Z","0.2.5":"2012-05-11T14:55:41.125Z","0.2.6":"2012-07-24T08:17:49.554Z","0.3.0":"2012-07-31T16:42:54.501Z","0.3.1":"2012-08-27T17:38:19.286Z","0.3.2":"2012-11-06T17:28:05.592Z","0.3.3":"2012-11-29T17:41:43.052Z","0.4.0":"2013-01-22T19:33:23.342Z","0.4.1":"2013-03-25T18:08:33.634Z","0.4.2":"2013-04-29T15:56:38.588Z","0.4.3":"2013-05-16T14:33:13.636Z","0.4.4":"2013-08-12T15:22:55.540Z","0.4.5":"2013-11-19T04:40:57.700Z","0.4.6":"2013-11-19T05:01:17.956Z","0.4.7":"2014-01-07T17:10:38.346Z","0.4.8":"2014-01-08T03:02:50.706Z"},"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-tap.git"},"users":{"substack":true,"fgribreau":true,"clux":true,"tokuhirom":true,"dshaw":true,"michaelnisi":true,"hij1nx":true,"luk":true,"kevinohara80":true,"isao":true,"kesla":true,"mk":true,"conradz":true,"brianloveswords":true},"readme":"This is a mix-and-match set of utilities that you can use to write test\nharnesses and frameworks that communicate with one another using the\nTest Anything Protocol.\n\nIf you don't yet know what TAP is, [you better ask\nsomebody](http://testanything.org/).\n\nDefault Usage:\n\n1. Make a directory.  Maybe call it 'test'.  That'd be nice and obvious.\n2. Put a bunch of test scripts in there.  If they're node programs, then\n   they should be \".js\".  Anything else is assumed to be some kind of shell\n   script, which should have a shebang line.\n3. `npm install tap`\n4. Update package.json scripts.test to include `tap ./test` [example\n   gist](https://gist.github.com/4469613)\n5. `npm test`\n\nThe output will be TAP-compliant.\n\nFor extra special bonus points, you can do something like this:\n\n    var test = require(\"tap\").test\n    test(\"make sure the thingie is a thing\", function (t) {\n      t.equal(thingie, \"thing\", \"thingie should be thing\")\n      t.deepEqual(array, [\"foo\", \"bar\"], \"array has foo and bar elements\")\n      t.deepEqual(object, {foo: 42}, \"object has foo property\")\n      t.type(thingie, \"string\", \"type of thingie is string\")\n      t.ok(true, \"this is always true\")\n      t.notOk(false, \"this is never true\")\n      t.test(\"a child test\", function (t) {\n        t.equal(this, superEasy, \"right!?\")\n        t.similar(7, 2, \"ever notice 7 is kinda like 2?\", {todo: true})\n        t.test(\"so skippable\", {skip: true}, function (t) {\n          t.plan(1) // only one test in this block\n          t.ok(true, \"but when the flag changes, it'll pass\")\n          // no need to end, since we had a plan.\n        })\n        t.end()\n      })\n      t.ok(99, \"can also skip individual assertions\", {skip: true})\n      // end lets it know it's over.\n      t.end()\n    })\n    test(\"another one\", function (t) {\n      t.plan(1)\n      t.ok(true, \"It's ok to plan, and also end.  Watch.\")\n      t.end() // but it must match the plan!\n    })\n\nNode-tap is actually a collection of several modules, any of which may be\nmixed and matched however you please.\n\nIf you don't like this test framework, and think you can do much much\nbetter, *I strongly encourage you to do so!*  If you use this library,\nhowever, at least to output TAP-compliant results when `process.env.TAP`\nis set, then the data coming out of your framework will be much more\nconsumable by machines.\n\nYou can also use this to build programs that *consume* the TAP data, so\nthis is very useful for CI systems and such.\n\n* tap-assert: A collection of assert functions that return TAP result\n  objects.\n* tap-consumer: A stream interface for consuming TAP data.\n* tap-producer: A class that produces a TAP stream by taking in result\n  objects.\n* tap-results: A class for keeping track of TAP result objects as they\n  pass by, counting up skips, passes, fails, and so on.\n* tap-runner: A program that runs through a directory running all the\n  tests in it.  (Tests which may or may not be TAP-outputting tests.  But\n  it's better if they are.)\n* tap-test: A class for actually running tests.\n* tap-harness: A class that runs tests.  (Tests are also Harnesses,\n  which is how sub-tests run.)\n* tap-global-harness: A default harness that provides the top-level\n  support for running TAP tests.\n\n## Experimental Code Coverage with runforcover & bunker:\n\n```\nTAP_COV=1 tap ./test [--cover=./lib,foo.js] [--coverage-dir=./coverage]\n```\n\nThis feature is experimental, and will most likely change somewhat\nbefore being finalized.  Feedback welcome.\n","_attachments":{},"_etag":"\"6QQDIEQGOPLNMZQ8E2T377WVC\""}