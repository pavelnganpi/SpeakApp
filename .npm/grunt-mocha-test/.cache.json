{"_id":"grunt-mocha-test","_rev":"60-f9668752d358db3098e1a9c68802fdd5","name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","dist-tags":{"latest":"0.8.1"},"versions":{"0.0.1":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.0.1","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.6.0"},"scripts":{"test":"grunt"},"dependencies":{"mocha":"1.5.0"},"devDependencies":{"grunt":"~0.3.15","chai":"1.3.0","proxyquire":"0.3.2"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\nA grunt task for running server side mocha tests\n\n## Getting Started\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-test`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-mocha-test');\n```\n\n[grunt]: https://github.com/cowboy/grunt\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\n\n## Documentation\n\nA single task example\n\n```javascript\n/*global module:false*/\nmodule.exports = function(grunt) {\n\n  // Add our custom tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  // Project configuration.\n  grunt.initConfig({\n    mochaTest: {\n      files: ['test/**/*.test.js']\n    },\n    mochaTestConfig: {\n      options: {\n        reporter: 'nyan'        \n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nA multi task example\n\n```javascript\n/*global module:false*/\nmodule.exports = function(grunt) {\n\n  // Add our custom tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  // Project configuration.\n  grunt.initConfig({\n    mochaTest: {\n      normal: ['test/**/*.test.js'],\n      withTimeout: ['test-timeout/**/*.test.js']\n    },\n    mochaTestConfig: {\n      normal: {\n\t    options: {\n\t      reporter: 'nyan'        \n\t    }\n      },\n      withTimeout: {\n\t    options: {\n\t      reporter: 'nyan',\n\t      timeout: 1000     \n\t    }\n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt][grunt].\n\n## Release History\n_(Nothing yet)_\n\n## License\nCopyright (c) 2012 Peter Halliday  \nLicensed under the MIT license.\n","_id":"grunt-mocha-test@0.0.1","dist":{"shasum":"b22f9bb9d4837bf65fadb3875284790aadb57386","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.0.1.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.1.0":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.1.0","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.6.0"},"scripts":{"test":"grunt"},"dependencies":{"mocha":"1.5.0"},"devDependencies":{"grunt":"~0.3.15","chai":"1.3.0","proxyquire":"0.3.2"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\r\n\r\nA grunt task for running server side mocha tests\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-mocha-test`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-mocha-test');\r\n```\r\n\r\n[grunt]: https://github.com/cowboy/grunt\r\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\r\n\r\n## Documentation\r\n\r\nA single task example\r\n\r\n```javascript\r\n/*global module:false*/\r\nmodule.exports = function(grunt) {\r\n\r\n  // Add our custom tasks.\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  // Project configuration.\r\n  grunt.initConfig({\r\n    mochaTest: {\r\n      files: ['test/**/*.test.js']\r\n    },\r\n    mochaTestConfig: {\r\n      options: {\r\n        reporter: 'nyan'        \r\n      }\r\n    }\r\n  });\r\n\r\n  // Default task.\r\n  grunt.registerTask('default', 'mochaTest');\r\n};\r\n```\r\n\r\nA multi task example\r\n\r\n```javascript\r\n/*global module:false*/\r\nmodule.exports = function(grunt) {\r\n\r\n  // Add our custom tasks.\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  // Project configuration.\r\n  grunt.initConfig({\r\n    mochaTest: {\r\n      normal: ['test/**/*.test.js'],\r\n      withTimeout: ['test-timeout/**/*.test.js']\r\n    },\r\n    mochaTestConfig: {\r\n      normal: {\r\n\t    options: {\r\n\t      reporter: 'nyan'        \r\n\t    }\r\n      },\r\n      withTimeout: {\r\n\t    options: {\r\n\t      reporter: 'nyan',\r\n\t      timeout: 1000     \r\n\t    }\r\n      }\r\n    }\r\n  });\r\n\r\n  // Default task.\r\n  grunt.registerTask('default', 'mochaTest');\r\n};\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt][grunt].\r\n\r\n## Release History\r\n_(Nothing yet)_\r\n\r\n## License\r\nCopyright (c) 2012 Peter Halliday  \r\nLicensed under the MIT license.\r\n","_id":"grunt-mocha-test@0.1.0","dist":{"shasum":"08f7d9ceb671b9700d82679b29852c460067bcc6","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.1.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.1.1":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.1.1","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.6.0"},"scripts":{"test":"grunt"},"dependencies":{"mocha":"1.8.1"},"devDependencies":{"grunt":"~0.3.15","chai":"1.3.0","proxyquire":"0.3.2"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\r\n\r\nA grunt task for running server side mocha tests\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-mocha-test`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-mocha-test');\r\n```\r\n\r\n[grunt]: https://github.com/cowboy/grunt\r\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\r\n\r\n## Documentation\r\n\r\nA single task example\r\n\r\n```javascript\r\n/*global module:false*/\r\nmodule.exports = function(grunt) {\r\n\r\n  // Add our custom tasks.\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  // Project configuration.\r\n  grunt.initConfig({\r\n    mochaTest: {\r\n      files: ['test/**/*.test.js']\r\n    },\r\n    mochaTestConfig: {\r\n      options: {\r\n        reporter: 'nyan'        \r\n      }\r\n    }\r\n  });\r\n\r\n  // Default task.\r\n  grunt.registerTask('default', 'mochaTest');\r\n};\r\n```\r\n\r\nA multi task example\r\n\r\n```javascript\r\n/*global module:false*/\r\nmodule.exports = function(grunt) {\r\n\r\n  // Add our custom tasks.\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  // Project configuration.\r\n  grunt.initConfig({\r\n    mochaTest: {\r\n      normal: ['test/**/*.test.js'],\r\n      withTimeout: ['test-timeout/**/*.test.js']\r\n    },\r\n    mochaTestConfig: {\r\n      normal: {\r\n\t    options: {\r\n\t      reporter: 'nyan'        \r\n\t    }\r\n      },\r\n      withTimeout: {\r\n\t    options: {\r\n\t      reporter: 'nyan',\r\n\t      timeout: 1000     \r\n\t    }\r\n      }\r\n    }\r\n  });\r\n\r\n  // Default task.\r\n  grunt.registerTask('default', 'mochaTest');\r\n};\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt][grunt].\r\n\r\n## Release History\r\n_(Nothing yet)_\r\n\r\n## License\r\nCopyright (c) 2012 Peter Halliday  \r\nLicensed under the MIT license.\r\n","_id":"grunt-mocha-test@0.1.1","dist":{"shasum":"d441c42ff2f3a22a67e77d377d0be158f3f0a5e5","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.1.1.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.2.0":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.2.0","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.6.0"},"scripts":{"test":"grunt"},"dependencies":{"mocha":"1.8.1"},"devDependencies":{"grunt":"~0.3.17","chai":"1.3.0","proxyquire":"0.4.0"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\r\n\r\nA grunt task for running server side mocha tests\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-mocha-test`\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-mocha-test');\r\n```\r\n\r\n[grunt]: https://github.com/cowboy/grunt\r\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\r\n\r\n## Documentation\r\n\r\nA single task example\r\n\r\n```javascript\r\n/*global module:false*/\r\nmodule.exports = function(grunt) {\r\n\r\n  // Add our custom tasks.\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  // Project configuration.\r\n  grunt.initConfig({\r\n    mochaTest: {\r\n      files: ['test/**/*.test.js']\r\n    },\r\n    mochaTestConfig: {\r\n      options: {\r\n        reporter: 'nyan'        \r\n      }\r\n    }\r\n  });\r\n\r\n  // Default task.\r\n  grunt.registerTask('default', 'mochaTest');\r\n};\r\n```\r\n\r\nA multi task example\r\n\r\n```javascript\r\n/*global module:false*/\r\nmodule.exports = function(grunt) {\r\n\r\n  // Add our custom tasks.\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  // Project configuration.\r\n  grunt.initConfig({\r\n    mochaTest: {\r\n      normal: ['test/**/*.test.js'],\r\n      withTimeout: ['test-timeout/**/*.test.js']\r\n    },\r\n    mochaTestConfig: {\r\n      normal: {\r\n\t    options: {\r\n\t      reporter: 'nyan'        \r\n\t    }\r\n      },\r\n      withTimeout: {\r\n\t    options: {\r\n\t      reporter: 'nyan',\r\n\t      timeout: 1000     \r\n\t    }\r\n      }\r\n    }\r\n  });\r\n\r\n  // Default task.\r\n  grunt.registerTask('default', 'mochaTest');\r\n};\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt][grunt].\r\n\r\n## Release History\r\n_(Nothing yet)_\r\n\r\n## License\r\nCopyright (c) 2012 Peter Halliday  \r\nLicensed under the MIT license.\r\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.2.0","dist":{"shasum":"a7b627d3d2c95b063128bc0bdd9e65c6d5962542","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.2.0.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.2.1":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.2.1","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.6.0"},"scripts":{"test":"grunt"},"dependencies":{"mocha":"~1.9.0"},"devDependencies":{"grunt":"~0.3.17","chai":"1.3.0","proxyquire":"0.4.0"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\nA grunt task for running server side mocha tests\n\n## Getting Started\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-mocha-test`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-mocha-test');\n```\n\n[grunt]: https://github.com/cowboy/grunt\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\n\n## Documentation\n\nA single task example\n\n```javascript\n/*global module:false*/\nmodule.exports = function(grunt) {\n\n  // Add our custom tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  // Project configuration.\n  grunt.initConfig({\n    mochaTest: {\n      files: ['test/**/*.test.js']\n    },\n    mochaTestConfig: {\n      options: {\n        reporter: 'nyan'        \n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nA multi task example\n\n```javascript\n/*global module:false*/\nmodule.exports = function(grunt) {\n\n  // Add our custom tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  // Project configuration.\n  grunt.initConfig({\n    mochaTest: {\n      normal: ['test/**/*.test.js'],\n      withTimeout: ['test-timeout/**/*.test.js']\n    },\n    mochaTestConfig: {\n      normal: {\n\t    options: {\n\t      reporter: 'nyan'        \n\t    }\n      },\n      withTimeout: {\n\t    options: {\n\t      reporter: 'nyan',\n\t      timeout: 1000     \n\t    }\n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt][grunt].\n\n## Release History\n_(Nothing yet)_\n\n## License\nCopyright (c) 2012 Peter Halliday  \nLicensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.2.1","dist":{"shasum":"86f04569144125993ccca68d79cc6a035bc10d93","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.2.1.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.2.2":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.2.2","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.6.0"},"scripts":{"test":"grunt"},"dependencies":{"mocha":"~1.9.0"},"devDependencies":{"grunt":"~0.3.17","chai":"1.3.0","proxyquire":"0.4.0"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\nA grunt task for running server side mocha tests\n\n## Getting Started\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-mocha-test`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-mocha-test');\n```\n\n[grunt]: https://github.com/cowboy/grunt\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\n\n## Documentation\n\nA single task example\n\n```javascript\n/*global module:false*/\nmodule.exports = function(grunt) {\n\n  // Add our custom tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  // Project configuration.\n  grunt.initConfig({\n    mochaTest: {\n      files: ['test/**/*.test.js']\n    },\n    mochaTestConfig: {\n      options: {\n        reporter: 'nyan'        \n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nA multi task example\n\n```javascript\n/*global module:false*/\nmodule.exports = function(grunt) {\n\n  // Add our custom tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  // Project configuration.\n  grunt.initConfig({\n    mochaTest: {\n      normal: ['test/**/*.test.js'],\n      withTimeout: ['test-timeout/**/*.test.js']\n    },\n    mochaTestConfig: {\n      normal: {\n\t    options: {\n\t      reporter: 'nyan'        \n\t    }\n      },\n      withTimeout: {\n\t    options: {\n\t      reporter: 'nyan',\n\t      timeout: 1000     \n\t    }\n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nThe following mocha options are supported\n\n- grep\n- ui\n- reporter\n- timeout\n- invert\n- ignoreLeaks\n- growl\n- globals\n- require\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt][grunt].\n\n## Release History\n_(Nothing yet)_\n\n## License\nCopyright (c) 2012 Peter Halliday  \nLicensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.2.2","dist":{"shasum":"1f3580b6790bee239c83272ca4ad1032877b4316","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.2.2.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.3.0":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.3.0","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt"},"dependencies":{"mocha":"~1.9.0"},"devDependencies":{"grunt-cli":"~0.1.8","grunt":"~0.4.1","chai":"1.3.0","grunt-contrib-jshint":"~0.4.3"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\r\n\r\nA grunt task for running server side mocha tests\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [Gruntfile.js gruntfile][getting_started] with: `npm install grunt-mocha-test`\r\n\r\nThen add this line to your project's `Gruntfile.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-mocha-test');\r\n```\r\n\r\n[grunt]: http://gruntjs.com\r\n[getting_started]: http://gruntjs.com/getting-started\r\n\r\n## Documentation\r\n\r\n```javascript\r\n/*global module:false*/\r\nmodule.exports = function(grunt) {\r\n\r\n  // Add our custom tasks.\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  // Project configuration.\r\n  grunt.initConfig({\r\n    mochaTest: {\r\n      options: {\r\n        reporter: 'nyan'\r\n      },\r\n      normal: {\r\n        src: ['test/**/*.test.js']\r\n      },\r\n      withTimeout: {\r\n        options: {\r\n          timeout: 1000     \r\n        }\r\n        src: ['test-timeout/**/*.test.js']\r\n      }\r\n    }\r\n  });\r\n\r\n  // Default task.\r\n  grunt.registerTask('default', 'mochaTest:normal');\r\n  grunt.registerTask('testWithTimeout', 'mochaTest:withTimeout');\r\n};\r\n```\r\n\r\nThe following mocha options are supported\r\n\r\n- grep\r\n- ui\r\n- reporter\r\n- timeout\r\n- invert\r\n- ignoreLeaks\r\n- growl\r\n- globals\r\n- require\r\n\r\n## Roadmap\r\n\r\n- Catch asynchronous require exceptions so that grunt does not exit early\r\n- Test the growl option\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt][grunt].\r\n\r\n## Using Vagrant\r\nTo use the Vagrantfile you will also need to install the chef omnibus vagrant plugin\r\n\r\n`$ vagrant plugin install vagrant-omnibus`\r\n\r\nThe node cookbook has been added as a git submodule so you will also have to initialise and update the submodules after cloning the repository\r\n\r\n```\r\n$ git submodule init\r\n$ git submodule update\r\n```\r\n\r\n## License\r\nCopyright (c) 2012 Peter Halliday  \r\nLicensed under the MIT license.\r\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.3.0","dist":{"shasum":"7593e4d62d0231b3e5de31af027a8c8c9d62cc2f","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.3.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.3.1":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.3.1","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt"},"dependencies":{"mocha":"~1.9.0"},"devDependencies":{"grunt-cli":"~0.1.8","grunt":"~0.4.1","chai":"1.3.0","grunt-contrib-jshint":"~0.4.3"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\nA grunt task for running server side mocha tests\n\n## Getting Started\nInstall this grunt plugin next to your project's [Gruntfile.js gruntfile][getting_started] with: `npm install grunt-mocha-test`\n\nThen add this line to your project's `Gruntfile.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-mocha-test');\n```\n\n[grunt]: http://gruntjs.com\n[getting_started]: http://gruntjs.com/getting-started\n\n## Documentation\n\n```javascript\n/*global module:false*/\nmodule.exports = function(grunt) {\n\n  // Add our custom tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  // Project configuration.\n  grunt.initConfig({\n    mochaTest: {\n      options: {\n        reporter: 'nyan'\n      },\n      normal: {\n        src: ['test/**/*.test.js']\n      },\n      withTimeout: {\n        options: {\n          timeout: 1000     \n        }\n        src: ['test-timeout/**/*.test.js']\n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'mochaTest:normal');\n  grunt.registerTask('testWithTimeout', 'mochaTest:withTimeout');\n};\n```\n\nThe following mocha options are supported\n\n- grep\n- ui\n- reporter\n- timeout\n- invert\n- ignoreLeaks\n- growl\n- globals\n- require\n\n## Roadmap\n\n- Mock growl binaries so that the growl test actually checks if growl is called\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt][grunt].\n\n## Using Vagrant\nTo use the Vagrantfile you will also need to install the chef omnibus vagrant plugin\n\n`$ vagrant plugin install vagrant-omnibus`\n\nThe node cookbook has been added as a git submodule so you will also have to initialise and update the submodules after cloning the repository\n\n```\n$ git submodule init\n$ git submodule update\n```\n\n## License\nCopyright (c) 2012 Peter Halliday  \nLicensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.3.1","dist":{"shasum":"8f1834b112cef0e59d83d28d6de1865ff4705256","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.3.1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.3.2":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.3.2","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt"},"dependencies":{"mocha":"~1.9.0"},"devDependencies":{"grunt-cli":"~0.1.8","grunt":"~0.4.1","chai":"1.3.0","grunt-contrib-jshint":"~0.4.3","grunt-blanket":"0.0.8"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\r\n\r\nA grunt task for running server side mocha tests\r\n\r\n## Getting Started\r\nInstall this grunt plugin next to your project's [Gruntfile.js gruntfile][getting_started] with: `npm install grunt-mocha-test`\r\n\r\nThen add this line to your project's `Gruntfile.js` gruntfile:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-mocha-test');\r\n```\r\n\r\n[grunt]: http://gruntjs.com\r\n[getting_started]: http://gruntjs.com/getting-started\r\n\r\n## Documentation\r\n\r\nHere is an example gruntfile that regsisters 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\r\n\r\n```javascript\r\n/*global module:false*/\r\nmodule.exports = function(grunt) {\r\n\r\n  // Add our custom tasks.\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  // Project configuration.\r\n  grunt.initConfig({\r\n    mochaTest: {\r\n      test: {\r\n        options: {\r\n          reporter: 'spec'\r\n        },\r\n        src: ['test/**/*.js']\r\n      },\r\n      coverage: {\r\n        options: {\r\n          reporter: 'html-cov',\r\n          require: 'blanket', // require blanket to instrument other required files on the fly\r\n          quiet: true         // use the quiet flag to suppress the mocha console output\r\n        },\r\n        src: ['test/**/*.js'],\r\n        dest: 'coverage.html' // specify a destination file to capture the mocha output (the quiet option does not suppress this)\r\n      }\r\n    }\r\n  });\r\n\r\n  // Default task.\r\n  grunt.registerTask('default', 'mochaTest');\r\n};\r\n```\r\n\r\nThe following mocha options are supported\r\n\r\n- grep\r\n- ui\r\n- reporter\r\n- timeout\r\n- invert\r\n- ignoreLeaks\r\n- growl\r\n- globals\r\n- require\r\n\r\n## Roadmap\r\n\r\n- Mock growl binaries so that the growl test actually checks if growl is called\r\n- Figure out why the example doesn't really work (is there a problem with the require option?)\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using `npm test`.\r\n\r\n## Using Vagrant\r\nTo use the Vagrantfile you will also need to install the chef omnibus vagrant plugin\r\n\r\n`$ vagrant plugin install vagrant-omnibus`\r\n\r\nThe node cookbook has been added as a git submodule so you will also have to initialise and update the submodules after cloning the repository\r\n\r\n```\r\n$ git submodule init\r\n$ git submodule update\r\n```\r\n\r\n## License\r\nCopyright (c) 2012 Peter Halliday  \r\nLicensed under the MIT license.\r\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.3.2","dist":{"shasum":"24c7a4d13c7d33d57ef65f46052e9601e8a4332f","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.3.2.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.3.3":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.3.3","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt"},"dependencies":{"mocha":"~1.9.0"},"devDependencies":{"grunt-cli":"~0.1.8","grunt":"~0.4.1","chai":"1.3.0","grunt-contrib-jshint":"~0.4.3","grunt-blanket":"0.0.8","grunt-contrib-copy":"~0.4.1","grunt-contrib-clean":"~0.4.1"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\nA grunt task for running server side mocha tests\n\n## Getting Started\nInstall this grunt plugin next to your project's [Gruntfile.js gruntfile][getting_started] with: `npm install grunt-mocha-test`\n\nThen add this line to your project's `Gruntfile.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-mocha-test');\n```\n\n[grunt]: http://gruntjs.com\n[getting_started]: http://gruntjs.com/getting-started\n\n## Documentation\n\nHere is an example gruntfile that regsisters 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\n\n```javascript\n/*global module:false*/\nmodule.exports = function(grunt) {\n\n  // Add our custom tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  // Project configuration.\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec'\n        },\n        src: ['test/**/*.js']\n      },\n      coverage: {\n        options: {\n          reporter: 'html-cov',\n          require: 'blanket', // require blanket to instrument other required files on the fly\n          quiet: true         // use the quiet flag to suppress the mocha console output\n        },\n        src: ['test/**/*.js'],\n        dest: 'coverage.html' // specify a destination file to capture the mocha output (the quiet option does not suppress this)\n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nThe following mocha options are supported\n\n- grep\n- ui\n- reporter\n- timeout\n- invert\n- ignoreLeaks\n- growl\n- globals\n- require\n\n## Roadmap\n\n- Mock growl binaries so that the growl test actually checks if growl is called\n- Figure out why the example doesn't really work (is there a problem with the require option?)\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using `npm test`.\n\n## Using Vagrant\nTo use the Vagrantfile you will also need to install the chef omnibus vagrant plugin\n\n`$ vagrant plugin install vagrant-omnibus`\n\nThe node cookbook has been added as a git submodule so you will also have to initialise and update the submodules after cloning the repository\n\n```\n$ git submodule init\n$ git submodule update\n```\n\n## License\nCopyright (c) 2012 Peter Halliday  \nLicensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.3.3","dist":{"shasum":"34e8ff9f3b5bea609d55771271b7c10d28b56c3c","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.3.3.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.3.4":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.3.4","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt","travis-cov":{"threshold":100}},"dependencies":{"mocha":"~1.9.0"},"devDependencies":{"grunt-cli":"~0.1.8","grunt":"~0.4.1","chai":"1.3.0","grunt-contrib-jshint":"~0.4.3","grunt-blanket":"0.0.8","grunt-contrib-copy":"~0.4.1","grunt-contrib-clean":"~0.4.1","travis-cov":"~0.2.4"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\n[![Build Status](https://travis-ci.org/pghalliday/grunt-mocha-test.png)](https://travis-ci.org/pghalliday/grunt-mocha-test)\n\nA grunt task for running server side mocha tests\n\n## Getting Started\nInstall this grunt plugin next to your project's [Gruntfile.js gruntfile][getting_started] with: `npm install grunt-mocha-test`\n\nThen add this line to your project's `Gruntfile.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-mocha-test');\n```\n\n[grunt]: http://gruntjs.com\n[getting_started]: http://gruntjs.com/getting-started\n\n## Documentation\n\nHere is an example gruntfile that regsisters 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\n\n```javascript\nmodule.exports = function(grunt) {\n\n  // Add our custom tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  // Project configuration.\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec'\n        },\n        src: ['test/**/*.js']\n      },\n      coverage: {\n        options: {\n          reporter: 'html-cov',\n          require: 'blanket', // require blanket to instrument other required files on the fly\n          quiet: true         // use the quiet flag to suppress the mocha console output\n        },\n        src: ['test/**/*.js'],\n        dest: 'coverage.html' // specify a destination file to capture the mocha output (the quiet option does not suppress this)\n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nThe following mocha options are supported\n\n- grep\n- ui\n- reporter\n- timeout\n- invert\n- ignoreLeaks\n- growl\n- globals\n- require\n\n## Roadmap\n\n- Mock growl binaries so that the growl test actually checks if growl is called\n- Figure out why the example doesn't really work (is there a problem with the require option?)\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using `npm test`.\n\n## Using Vagrant\nTo use the Vagrantfile you will also need to install the chef omnibus vagrant plugin\n\n`$ vagrant plugin install vagrant-omnibus`\n\nThe node cookbook has been added as a git submodule so you will also have to initialise and update the submodules after cloning the repository\n\n```\n$ git submodule init\n$ git submodule update\n```\n\n## License\nCopyright (c) 2012 Peter Halliday  \nLicensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.3.4","dist":{"shasum":"2f94413fbd62288ab2abcd7fc3d2b4ac750b58dc","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.3.4.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.3.5":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.3.5","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt","travis-cov":{"threshold":100}},"dependencies":{"mocha":"~1.9.0"},"devDependencies":{"grunt-cli":"~0.1.8","grunt":"~0.4.1","chai":"1.3.0","grunt-contrib-jshint":"~0.4.3","grunt-blanket":"0.0.8","grunt-contrib-copy":"~0.4.1","grunt-contrib-clean":"~0.4.1","travis-cov":"~0.2.4"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\n[![Build Status](https://travis-ci.org/pghalliday/grunt-mocha-test.png)](https://travis-ci.org/pghalliday/grunt-mocha-test)\n\nA grunt task for running server side mocha tests\n\n## Usage\n\nInstall next to your project's Gruntfile.js with: \n\n```\n$ npm install grunt-mocha-test\n```\n\n### Running tests\n\nHere is a simple example gruntfile if you just want to run tests\n\n```javascript\nmodule.exports = function(grunt) {\n\n  // Add the grunt-mocha-test tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    // Configure a mochaTest task\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n        },\n        src: ['test/**/*.js']\n      },\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nThe following mocha options are supported\n\n- grep\n- ui\n- reporter\n- timeout\n- invert\n- ignoreLeaks\n- growl\n- globals\n- require\n\n### Generating coverage reports\n\nHere is an example gruntfile that registers 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\n\n```\n$ npm install blanket\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          // Require blanket wrapper here to instrument other required\n          // files on the fly. \n          //\n          // NB. We cannot require blanket directly as it\n          // detects that we are not running mocha cli and loads differently.\n          //\n          // NNB. As mocha is 'clever' enough to only run the tests once for\n          // each file the following coverage task does not actually run any\n          // tests which is why the coverage instrumentation has to be done here\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      coverage: {\n        options: {\n          reporter: 'html-cov',\n          // use the quiet flag to suppress the mocha console output\n          quiet: true\n        },\n        src: ['test/**/*.js'],\n        // specify a destination file to capture the mocha\n        // output (the quiet option does not suppress this)\n        dest: 'coverage.html'\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nAs noted above it is necessary to wrap the blanket require when calling mocha programatically so `coverage/blanket.js` should look something like this.\n\n```javascript\nrequire('blanket')({\n  // Only files that match the pattern will be instrumented\n  pattern: '/src/'\n});\n```\n\n### Failing tests if a coverage threshold is not reached\n\nBuilding on the previous example, if you wish to have your tests fail if it falls below a certain coverage threshold then I advise using the `travis-cov` reporter\n\n```\n$ npm install travis-cov\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      'html-cov': {\n        options: {\n          reporter: 'html-cov',\n          quiet: true\n        },\n        src: ['test/**/*.js'],\n        dest: 'coverage.html'\n      },\n      // The travis-cov reporter will fail the tests if the\n      // coverage falls below the threshold configured in package.json\n      'travis-cov': {\n        options: {\n          reporter: 'travis-cov'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nDon't forget to update `package.json` with options for `travis-cov`, for example:\n\n```javascript\n  ...\n\n  \"scripts\": {\n    \"test\": \"grunt\",\n    \"travis-cov\": {\n      // Yes, I like to set the coverage threshold to 100% ;)\n      \"threshold\": 100\n    }\n  },\n\n  ...\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using: \n\n```\n$ npm test\n```\n\n### Using Vagrant\nTo use the Vagrantfile you will also need to install the chef omnibus vagrant plugin\n\n```\n$ vagrant plugin install vagrant-omnibus\n```\n\n\n## License\nCopyright (c) 2013 Peter Halliday  \nLicensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.3.5","dist":{"shasum":"2cfd9210751cfbc9ce6d37164eef3c0aea6a545e","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.3.5.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.4.0":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.4.0","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt","travis-cov":{"threshold":100}},"dependencies":{"mocha":"~1.10.0"},"devDependencies":{"grunt-cli":"~0.1.8","grunt":"~0.4.1","chai":"1.3.0","grunt-contrib-jshint":"~0.4.3","grunt-blanket":"0.0.8","grunt-contrib-copy":"~0.4.1","grunt-contrib-clean":"~0.4.1","travis-cov":"~0.2.4"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\n[![Build Status](https://travis-ci.org/pghalliday/grunt-mocha-test.png)](https://travis-ci.org/pghalliday/grunt-mocha-test)\n\nA grunt task for running server side mocha tests\n\n## Usage\n\nInstall next to your project's Gruntfile.js with: \n\n```\n$ npm install grunt-mocha-test\n```\n\n### Running tests\n\nHere is a simple example gruntfile if you just want to run tests\n\n```javascript\nmodule.exports = function(grunt) {\n\n  // Add the grunt-mocha-test tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    // Configure a mochaTest task\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n        },\n        src: ['test/**/*.js']\n      },\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nThe following mocha options are supported\n\n- grep\n- ui\n- reporter\n- timeout\n- invert\n- ignoreLeaks\n- growl\n- globals\n- require\n\n### Generating coverage reports\n\nHere is an example gruntfile that registers 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\n\n```\n$ npm install blanket\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          // Require blanket wrapper here to instrument other required\n          // files on the fly. \n          //\n          // NB. We cannot require blanket directly as it\n          // detects that we are not running mocha cli and loads differently.\n          //\n          // NNB. As mocha is 'clever' enough to only run the tests once for\n          // each file the following coverage task does not actually run any\n          // tests which is why the coverage instrumentation has to be done here\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      coverage: {\n        options: {\n          reporter: 'html-cov',\n          // use the quiet flag to suppress the mocha console output\n          quiet: true\n        },\n        src: ['test/**/*.js'],\n        // specify a destination file to capture the mocha\n        // output (the quiet option does not suppress this)\n        dest: 'coverage.html'\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nAs noted above it is necessary to wrap the blanket require when calling mocha programatically so `coverage/blanket.js` should look something like this.\n\n```javascript\nrequire('blanket')({\n  // Only files that match the pattern will be instrumented\n  pattern: '/src/'\n});\n```\n\n### Failing tests if a coverage threshold is not reached\n\nBuilding on the previous example, if you wish to have your tests fail if it falls below a certain coverage threshold then I advise using the `travis-cov` reporter\n\n```\n$ npm install travis-cov\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      'html-cov': {\n        options: {\n          reporter: 'html-cov',\n          quiet: true\n        },\n        src: ['test/**/*.js'],\n        dest: 'coverage.html'\n      },\n      // The travis-cov reporter will fail the tests if the\n      // coverage falls below the threshold configured in package.json\n      'travis-cov': {\n        options: {\n          reporter: 'travis-cov'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nDon't forget to update `package.json` with options for `travis-cov`, for example:\n\n```javascript\n  ...\n\n  \"scripts\": {\n    \"test\": \"grunt\",\n    \"travis-cov\": {\n      // Yes, I like to set the coverage threshold to 100% ;)\n      \"threshold\": 100\n    }\n  },\n\n  ...\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using: \n\n```\n$ npm test\n```\n\n### Using Vagrant\nTo use the Vagrantfile you will also need to install the chef omnibus vagrant plugin\n\n```\n$ vagrant plugin install vagrant-omnibus\n```\n\n\n## License\nCopyright (c) 2013 Peter Halliday  \nLicensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.4.0","dist":{"shasum":"9360e40d75ec60f1d07e706304d03d17baf434d3","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.4.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.5.0":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.5.0","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt","travis-cov":{"threshold":100}},"dependencies":{"mocha":"~1.11.0"},"devDependencies":{"grunt-cli":"~0.1.8","grunt":"~0.4.1","chai":"~1.7.0","grunt-contrib-jshint":"~0.5.4","grunt-blanket":"~0.0.8","grunt-contrib-copy":"~0.4.1","grunt-contrib-clean":"~0.4.1","travis-cov":"~0.2.4"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\r\n\r\n[![Build Status](https://travis-ci.org/pghalliday/grunt-mocha-test.png)](https://travis-ci.org/pghalliday/grunt-mocha-test)\r\n[![Dependency Status](https://gemnasium.com/pghalliday/grunt-mocha-test.png)](https://gemnasium.com/pghalliday/grunt-mocha-test)\r\n\r\nA grunt task for running server side mocha tests\r\n\r\n## Usage\r\n\r\nInstall next to your project's Gruntfile.js with: \r\n\r\n```\r\n$ npm install grunt-mocha-test\r\n```\r\n\r\n### Running tests\r\n\r\nHere is a simple example gruntfile if you just want to run tests\r\n\r\n```javascript\r\nmodule.exports = function(grunt) {\r\n\r\n  // Add the grunt-mocha-test tasks.\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  grunt.initConfig({\r\n    // Configure a mochaTest task\r\n    mochaTest: {\r\n      test: {\r\n        options: {\r\n          reporter: 'spec'\r\n        },\r\n        src: ['test/**/*.js']\r\n      }\r\n    }\r\n  });\r\n\r\n  grunt.registerTask('default', 'mochaTest');\r\n\r\n};\r\n```\r\n\r\nThe following mocha options are supported\r\n\r\n- grep\r\n- ui\r\n- reporter\r\n- timeout\r\n- invert\r\n- ignoreLeaks\r\n- growl\r\n- globals\r\n- require\r\n\r\n### Generating coverage reports\r\n\r\nHere is an example gruntfile that registers 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\r\n\r\n```\r\n$ npm install blanket\r\n```\r\n\r\n```javascript\r\nmodule.exports = function(grunt) {\r\n\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  grunt.initConfig({\r\n    mochaTest: {\r\n      test: {\r\n        options: {\r\n          reporter: 'spec',\r\n          // Require blanket wrapper here to instrument other required\r\n          // files on the fly. \r\n          //\r\n          // NB. We cannot require blanket directly as it\r\n          // detects that we are not running mocha cli and loads differently.\r\n          //\r\n          // NNB. As mocha is 'clever' enough to only run the tests once for\r\n          // each file the following coverage task does not actually run any\r\n          // tests which is why the coverage instrumentation has to be done here\r\n          require: 'coverage/blanket'\r\n        },\r\n        src: ['test/**/*.js']\r\n      },\r\n      coverage: {\r\n        options: {\r\n          reporter: 'html-cov',\r\n          // use the quiet flag to suppress the mocha console output\r\n          quiet: true\r\n        },\r\n        src: ['test/**/*.js'],\r\n        // specify a destination file to capture the mocha\r\n        // output (the quiet option does not suppress this)\r\n        dest: 'coverage.html'\r\n      }\r\n    }\r\n  });\r\n\r\n  grunt.registerTask('default', 'mochaTest');\r\n};\r\n```\r\n\r\nAs noted above it is necessary to wrap the blanket require when calling mocha programatically so `coverage/blanket.js` should look something like this.\r\n\r\n```javascript\r\nrequire('blanket')({\r\n  // Only files that match the pattern will be instrumented\r\n  pattern: '/src/'\r\n});\r\n```\r\n\r\n### Failing tests if a coverage threshold is not reached\r\n\r\nBuilding on the previous example, if you wish to have your tests fail if it falls below a certain coverage threshold then I advise using the `travis-cov` reporter\r\n\r\n```\r\n$ npm install travis-cov\r\n```\r\n\r\n```javascript\r\nmodule.exports = function(grunt) {\r\n\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  grunt.initConfig({\r\n    mochaTest: {\r\n      test: {\r\n        options: {\r\n          reporter: 'spec',\r\n          require: 'coverage/blanket'\r\n        },\r\n        src: ['test/**/*.js']\r\n      },\r\n      'html-cov': {\r\n        options: {\r\n          reporter: 'html-cov',\r\n          quiet: true\r\n        },\r\n        src: ['test/**/*.js'],\r\n        dest: 'coverage.html'\r\n      },\r\n      // The travis-cov reporter will fail the tests if the\r\n      // coverage falls below the threshold configured in package.json\r\n      'travis-cov': {\r\n        options: {\r\n          reporter: 'travis-cov'\r\n        },\r\n        src: ['test/**/*.js']\r\n      }\r\n    }\r\n  });\r\n\r\n  grunt.registerTask('default', 'mochaTest');\r\n};\r\n```\r\n\r\nDon't forget to update `package.json` with options for `travis-cov`, for example:\r\n\r\n```javascript\r\n  ...\r\n\r\n  \"scripts\": {\r\n    \"test\": \"grunt\",\r\n    \"travis-cov\": {\r\n      // Yes, I like to set the coverage threshold to 100% ;)\r\n      \"threshold\": 100\r\n    }\r\n  },\r\n\r\n  ...\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using: \r\n\r\n```\r\n$ npm test\r\n```\r\n\r\n### Using Vagrant\r\nTo use the Vagrantfile you will also need to install the following vagrant plugins\r\n\r\n```\r\n$ vagrant plugin install vagrant-omnibus\r\n$ vagrant plugin install vagrant-berkshelf\r\n```\r\n\r\n\r\n## License\r\nCopyright &copy; 2013 Peter Halliday  \r\nLicensed under the MIT license.\r\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.5.0","dist":{"shasum":"73c89a63b878be6353a8b5dee902b9cb935209b1","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.5.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.6.0":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.6.0","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt","travis-cov":{"threshold":100}},"dependencies":{"mocha":"~1.12.0"},"devDependencies":{"grunt-cli":"~0.1.8","grunt":"~0.4.1","chai":"~1.7.0","grunt-contrib-jshint":"~0.6.0","grunt-blanket":"~0.0.8","grunt-contrib-copy":"~0.4.1","grunt-contrib-clean":"~0.5.0","travis-cov":"~0.2.4"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\r\n\r\n[![Build Status](https://travis-ci.org/pghalliday/grunt-mocha-test.png)](https://travis-ci.org/pghalliday/grunt-mocha-test)\r\n[![Dependency Status](https://gemnasium.com/pghalliday/grunt-mocha-test.png)](https://gemnasium.com/pghalliday/grunt-mocha-test)\r\n\r\nA grunt task for running server side mocha tests\r\n\r\n## Usage\r\n\r\nInstall next to your project's Gruntfile.js with: \r\n\r\n```\r\n$ npm install grunt-mocha-test\r\n```\r\n\r\n### Running tests\r\n\r\nHere is a simple example gruntfile if you just want to run tests\r\n\r\n```javascript\r\nmodule.exports = function(grunt) {\r\n\r\n  // Add the grunt-mocha-test tasks.\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  grunt.initConfig({\r\n    // Configure a mochaTest task\r\n    mochaTest: {\r\n      test: {\r\n        options: {\r\n          reporter: 'spec'\r\n        },\r\n        src: ['test/**/*.js']\r\n      }\r\n    }\r\n  });\r\n\r\n  grunt.registerTask('default', 'mochaTest');\r\n\r\n};\r\n```\r\n\r\nThe following mocha options are supported\r\n\r\n- grep\r\n- ui\r\n- reporter\r\n- timeout\r\n- invert\r\n- ignoreLeaks\r\n- growl\r\n- globals\r\n- require\r\n\r\n### Generating coverage reports\r\n\r\nHere is an example gruntfile that registers 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\r\n\r\n```\r\n$ npm install blanket\r\n```\r\n\r\n```javascript\r\nmodule.exports = function(grunt) {\r\n\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  grunt.initConfig({\r\n    mochaTest: {\r\n      test: {\r\n        options: {\r\n          reporter: 'spec',\r\n          // Require blanket wrapper here to instrument other required\r\n          // files on the fly. \r\n          //\r\n          // NB. We cannot require blanket directly as it\r\n          // detects that we are not running mocha cli and loads differently.\r\n          //\r\n          // NNB. As mocha is 'clever' enough to only run the tests once for\r\n          // each file the following coverage task does not actually run any\r\n          // tests which is why the coverage instrumentation has to be done here\r\n          require: 'coverage/blanket'\r\n        },\r\n        src: ['test/**/*.js']\r\n      },\r\n      coverage: {\r\n        options: {\r\n          reporter: 'html-cov',\r\n          // use the quiet flag to suppress the mocha console output\r\n          quiet: true,\r\n          // specify a destination file to capture the mocha\r\n          // output (the quiet option does not suppress this)\r\n          captureFile: 'coverage.html'\r\n        },\r\n        src: ['test/**/*.js']\r\n      }\r\n    }\r\n  });\r\n\r\n  grunt.registerTask('default', 'mochaTest');\r\n};\r\n```\r\n\r\nAs noted above it is necessary to wrap the blanket require when calling mocha programatically so `coverage/blanket.js` should look something like this.\r\n\r\n```javascript\r\nrequire('blanket')({\r\n  // Only files that match the pattern will be instrumented\r\n  pattern: '/src/'\r\n});\r\n```\r\n\r\n### Failing tests if a coverage threshold is not reached\r\n\r\nBuilding on the previous example, if you wish to have your tests fail if it falls below a certain coverage threshold then I advise using the `travis-cov` reporter\r\n\r\n```\r\n$ npm install travis-cov\r\n```\r\n\r\n```javascript\r\nmodule.exports = function(grunt) {\r\n\r\n  grunt.loadNpmTasks('grunt-mocha-test');\r\n\r\n  grunt.initConfig({\r\n    mochaTest: {\r\n      test: {\r\n        options: {\r\n          reporter: 'spec',\r\n          require: 'coverage/blanket'\r\n        },\r\n        src: ['test/**/*.js']\r\n      },\r\n      'html-cov': {\r\n        options: {\r\n          reporter: 'html-cov',\r\n          quiet: true,\r\n          captureFile: 'coverage.html'\r\n        },\r\n        src: ['test/**/*.js']\r\n      },\r\n      // The travis-cov reporter will fail the tests if the\r\n      // coverage falls below the threshold configured in package.json\r\n      'travis-cov': {\r\n        options: {\r\n          reporter: 'travis-cov'\r\n        },\r\n        src: ['test/**/*.js']\r\n      }\r\n    }\r\n  });\r\n\r\n  grunt.registerTask('default', 'mochaTest');\r\n};\r\n```\r\n\r\nDon't forget to update `package.json` with options for `travis-cov`, for example:\r\n\r\n```javascript\r\n  ...\r\n\r\n  \"scripts\": {\r\n    \"test\": \"grunt\",\r\n    \"travis-cov\": {\r\n      // Yes, I like to set the coverage threshold to 100% ;)\r\n      \"threshold\": 100\r\n    }\r\n  },\r\n\r\n  ...\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using: \r\n\r\n```\r\n$ npm test\r\n```\r\n\r\n### Using Vagrant\r\nTo use the Vagrantfile you will also need to install the following vagrant plugins\r\n\r\n```\r\n$ vagrant plugin install vagrant-omnibus\r\n$ vagrant plugin install vagrant-berkshelf\r\n```\r\n\r\n\r\n## License\r\nCopyright &copy; 2013 Peter Halliday  \r\nLicensed under the MIT license.\r\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.6.0","dist":{"shasum":"dab61596d0936faff15f8a4388550d4c0737ad5b","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.6.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.6.1":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.6.1","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt","travis-cov":{"threshold":100}},"dependencies":{"mocha":"~1.12.0"},"devDependencies":{"grunt-cli":"~0.1.8","grunt":"~0.4.1","chai":"~1.7.0","grunt-contrib-jshint":"~0.6.0","grunt-blanket":"~0.0.8","grunt-contrib-copy":"~0.4.1","grunt-contrib-clean":"~0.5.0","travis-cov":"~0.2.4"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\n[![Build Status](https://travis-ci.org/pghalliday/grunt-mocha-test.png)](https://travis-ci.org/pghalliday/grunt-mocha-test)\n[![Dependency Status](https://gemnasium.com/pghalliday/grunt-mocha-test.png)](https://gemnasium.com/pghalliday/grunt-mocha-test)\n\nA grunt task for running server side mocha tests\n\n## Usage\n\nInstall next to your project's Gruntfile.js with: \n\n```\n$ npm install grunt-mocha-test\n```\n\n### Running tests\n\nHere is a simple example gruntfile if you just want to run tests\n\n```javascript\nmodule.exports = function(grunt) {\n\n  // Add the grunt-mocha-test tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    // Configure a mochaTest task\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n\n};\n```\n\nThe following mocha options are supported\n\n- grep\n- ui\n- reporter\n- timeout\n- invert\n- ignoreLeaks\n- growl\n- globals\n- require\n\n### Generating coverage reports\n\nHere is an example gruntfile that registers 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\n\n```\n$ npm install blanket\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          // Require blanket wrapper here to instrument other required\n          // files on the fly. \n          //\n          // NB. We cannot require blanket directly as it\n          // detects that we are not running mocha cli and loads differently.\n          //\n          // NNB. As mocha is 'clever' enough to only run the tests once for\n          // each file the following coverage task does not actually run any\n          // tests which is why the coverage instrumentation has to be done here\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      coverage: {\n        options: {\n          reporter: 'html-cov',\n          // use the quiet flag to suppress the mocha console output\n          quiet: true,\n          // specify a destination file to capture the mocha\n          // output (the quiet option does not suppress this)\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nAs noted above it is necessary to wrap the blanket require when calling mocha programatically so `coverage/blanket.js` should look something like this.\n\n```javascript\nrequire('blanket')({\n  // Only files that match the pattern will be instrumented\n  pattern: '/src/'\n});\n```\n\n### Failing tests if a coverage threshold is not reached\n\nBuilding on the previous example, if you wish to have your tests fail if it falls below a certain coverage threshold then I advise using the `travis-cov` reporter\n\n```\n$ npm install travis-cov\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      'html-cov': {\n        options: {\n          reporter: 'html-cov',\n          quiet: true,\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      },\n      // The travis-cov reporter will fail the tests if the\n      // coverage falls below the threshold configured in package.json\n      'travis-cov': {\n        options: {\n          reporter: 'travis-cov'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nDon't forget to update `package.json` with options for `travis-cov`, for example:\n\n```javascript\n  ...\n\n  \"scripts\": {\n    \"test\": \"grunt\",\n    \"travis-cov\": {\n      // Yes, I like to set the coverage threshold to 100% ;)\n      \"threshold\": 100\n    }\n  },\n\n  ...\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using: \n\n```\n$ npm test\n```\n\n### Using Vagrant\nTo use the Vagrantfile you will also need to install the following vagrant plugins\n\n```\n$ vagrant plugin install vagrant-omnibus\n$ vagrant plugin install vagrant-berkshelf\n```\n\n\n## License\nCopyright &copy; 2013 Peter Halliday  \nLicensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.6.1","dist":{"shasum":"050a3fadee0d4a35d2bf7498efe766c3b3701626","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.6.1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.6.2":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.6.2","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt"},"dependencies":{"mocha":"~1.12.0"},"devDependencies":{"grunt-cli":"~0.1.8","grunt":"~0.4.1","chai":"~1.7.0","grunt-contrib-jshint":"~0.6.0","grunt-blanket":"~0.0.8","grunt-contrib-copy":"~0.4.1","grunt-contrib-clean":"~0.5.0","travis-cov":"~0.2.4"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\n[![Build Status](https://travis-ci.org/pghalliday/grunt-mocha-test.png)](https://travis-ci.org/pghalliday/grunt-mocha-test)\n[![Dependency Status](https://gemnasium.com/pghalliday/grunt-mocha-test.png)](https://gemnasium.com/pghalliday/grunt-mocha-test)\n\nA grunt task for running server side mocha tests\n\n## Usage\n\nInstall next to your project's Gruntfile.js with: \n\n```\n$ npm install grunt-mocha-test\n```\n\n### Running tests\n\nHere is a simple example gruntfile if you just want to run tests\n\n```javascript\nmodule.exports = function(grunt) {\n\n  // Add the grunt-mocha-test tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    // Configure a mochaTest task\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n\n};\n```\n\nThe following mocha options are supported\n\n- grep\n- ui\n- reporter\n- timeout\n- invert\n- ignoreLeaks\n- growl\n- globals\n- require\n\n### Generating coverage reports\n\nHere is an example gruntfile that registers 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\n\n```\n$ npm install blanket\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          // Require blanket wrapper here to instrument other required\n          // files on the fly. \n          //\n          // NB. We cannot require blanket directly as it\n          // detects that we are not running mocha cli and loads differently.\n          //\n          // NNB. As mocha is 'clever' enough to only run the tests once for\n          // each file the following coverage task does not actually run any\n          // tests which is why the coverage instrumentation has to be done here\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      coverage: {\n        options: {\n          reporter: 'html-cov',\n          // use the quiet flag to suppress the mocha console output\n          quiet: true,\n          // specify a destination file to capture the mocha\n          // output (the quiet option does not suppress this)\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nAs noted above it is necessary to wrap the blanket require when calling mocha programatically so `coverage/blanket.js` should look something like this.\n\n```javascript\nrequire('blanket')({\n  // Only files that match the pattern will be instrumented\n  pattern: '/src/'\n});\n```\n\n### Failing tests if a coverage threshold is not reached\n\nBuilding on the previous example, if you wish to have your tests fail if it falls below a certain coverage threshold then I advise using the `travis-cov` reporter\n\n```\n$ npm install travis-cov\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      'html-cov': {\n        options: {\n          reporter: 'html-cov',\n          quiet: true,\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      },\n      // The travis-cov reporter will fail the tests if the\n      // coverage falls below the threshold configured in package.json\n      'travis-cov': {\n        options: {\n          reporter: 'travis-cov'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nDon't forget to update `package.json` with options for `travis-cov`, for example:\n\n```javascript\n  ...\n\n  \"scripts\": {\n    \"test\": \"grunt\",\n    \"travis-cov\": {\n      // Yes, I like to set the coverage threshold to 100% ;)\n      \"threshold\": 100\n    }\n  },\n\n  ...\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using: \n\n```\n$ npm test\n```\n\n### Using Vagrant\nTo use the Vagrantfile you will also need to install the following vagrant plugins\n\n```\n$ vagrant plugin install vagrant-omnibus\n$ vagrant plugin install vagrant-berkshelf\n```\n\n\n## License\nCopyright &copy; 2013 Peter Halliday  \nLicensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.6.2","dist":{"shasum":"c27e3213ad2c07da2b7ea7180c08204cfce2dc1a","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.6.2.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.6.3":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.6.3","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt"},"dependencies":{"mocha":"~1.12.0"},"devDependencies":{"grunt-cli":"~0.1.8","grunt":"~0.4.1","chai":"~1.7.0","grunt-contrib-jshint":"~0.6.0","grunt-blanket":"~0.0.8","grunt-contrib-copy":"~0.4.1","grunt-contrib-clean":"~0.5.0","travis-cov":"~0.2.4","coffee-script":"~1.6.3"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\n[![Build Status](https://travis-ci.org/pghalliday/grunt-mocha-test.png)](https://travis-ci.org/pghalliday/grunt-mocha-test)\n[![Dependency Status](https://gemnasium.com/pghalliday/grunt-mocha-test.png)](https://gemnasium.com/pghalliday/grunt-mocha-test)\n\nA grunt task for running server side mocha tests\n\n## Usage\n\nInstall next to your project's Gruntfile.js with: \n\n```\n$ npm install grunt-mocha-test\n```\n\n### Running tests\n\nHere is a simple example gruntfile if you just want to run tests\n\n```javascript\nmodule.exports = function(grunt) {\n\n  // Add the grunt-mocha-test tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    // Configure a mochaTest task\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n\n};\n```\n\nThe following mocha options are supported\n\n- grep\n- ui\n- reporter\n- timeout\n- invert\n- ignoreLeaks\n- growl\n- globals\n- require\n\n### Generating coverage reports\n\nHere is an example gruntfile that registers 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\n\n```\n$ npm install blanket\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          // Require blanket wrapper here to instrument other required\n          // files on the fly. \n          //\n          // NB. We cannot require blanket directly as it\n          // detects that we are not running mocha cli and loads differently.\n          //\n          // NNB. As mocha is 'clever' enough to only run the tests once for\n          // each file the following coverage task does not actually run any\n          // tests which is why the coverage instrumentation has to be done here\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      coverage: {\n        options: {\n          reporter: 'html-cov',\n          // use the quiet flag to suppress the mocha console output\n          quiet: true,\n          // specify a destination file to capture the mocha\n          // output (the quiet option does not suppress this)\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nAs noted above it is necessary to wrap the blanket require when calling mocha programatically so `coverage/blanket.js` should look something like this.\n\n```javascript\nrequire('blanket')({\n  // Only files that match the pattern will be instrumented\n  pattern: '/src/'\n});\n```\n\n### Failing tests if a coverage threshold is not reached\n\nBuilding on the previous example, if you wish to have your tests fail if it falls below a certain coverage threshold then I advise using the `travis-cov` reporter\n\n```\n$ npm install travis-cov\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      'html-cov': {\n        options: {\n          reporter: 'html-cov',\n          quiet: true,\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      },\n      // The travis-cov reporter will fail the tests if the\n      // coverage falls below the threshold configured in package.json\n      'travis-cov': {\n        options: {\n          reporter: 'travis-cov'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nDon't forget to update `package.json` with options for `travis-cov`, for example:\n\n```javascript\n  ...\n\n  \"scripts\": {\n    \"test\": \"grunt\",\n    \"travis-cov\": {\n      // Yes, I like to set the coverage threshold to 100% ;)\n      \"threshold\": 100\n    }\n  },\n\n  ...\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using: \n\n```\n$ npm test\n```\n\n### Using Vagrant\nTo use the Vagrantfile you will also need to install the following vagrant plugins\n\n```\n$ vagrant plugin install vagrant-omnibus\n$ vagrant plugin install vagrant-berkshelf\n```\n\n\n## License\nCopyright &copy; 2013 Peter Halliday  \nLicensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.6.3","dist":{"shasum":"548789f86be24baa264ab7c98a442c05b2db6f98","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.6.3.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.7.0":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.7.0","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt"},"dependencies":{"mocha":"~1.13.0"},"devDependencies":{"grunt-cli":"~0.1.9","grunt":"~0.4.1","chai":"~1.8.0","grunt-contrib-jshint":"~0.6.4","grunt-blanket":"~0.0.8","grunt-contrib-copy":"~0.4.1","grunt-contrib-clean":"~0.5.0","travis-cov":"~0.2.4","coffee-script":"~1.6.3"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\n[![Build Status](https://travis-ci.org/pghalliday/grunt-mocha-test.png)](https://travis-ci.org/pghalliday/grunt-mocha-test)\n[![Dependency Status](https://gemnasium.com/pghalliday/grunt-mocha-test.png)](https://gemnasium.com/pghalliday/grunt-mocha-test)\n\nA grunt task for running server side mocha tests\n\n## Usage\n\nInstall next to your project's Gruntfile.js with: \n\n```\n$ npm install grunt-mocha-test\n```\n\n### Running tests\n\nHere is a simple example gruntfile if you just want to run tests\n\n```javascript\nmodule.exports = function(grunt) {\n\n  // Add the grunt-mocha-test tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    // Configure a mochaTest task\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n\n};\n```\n\nThe following mocha options are supported\n\n- grep\n- ui\n- reporter\n- timeout\n- invert\n- ignoreLeaks\n- growl\n- globals\n- bail\n- require\n- colors (specify as \"colors: true\")\n\n### Specifying compilers\n\nThe Mocha `--compilers` option is almost identical to the `--require` option but with additional functionality for use with the Mocha `--watch` mode. As the `--watch` mode is not relevant for this plugin there is no need to implement a separate `compilers` option and actually the `require` option should be used instead.\n\nThe following example shows the use of the CoffeeScript compiler.\n\n```\n$ npm install coffee-script\n```\n\n```javascript\nmochaTest: {\n  test: {\n    options: {\n      reporter: 'spec',\n      require: 'coffee-script'\n    },\n    src: ['test/**/*.coffee']\n  }\n}\n```\n\nIn order to make this more user friendly the `require` option can take either a single file or an array of files in case you have other globals you wish to require.\n\neg.\n\n```javascript\nmochaTest: {\n  test: {\n    options: {\n      reporter: 'spec',\n      require: [\n        'coffee-script',\n        './globals.js'\n      ]\n    },\n    src: ['test/**/*.coffee']\n  }\n}\n```\n\nNB. The `require` option can only be used with Javascript files, ie. it is not possible to specify a `./globals.coffee` in the above example.\n\n### Generating coverage reports\n\nHere is an example gruntfile that registers 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\n\n```\n$ npm install blanket\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          // Require blanket wrapper here to instrument other required\n          // files on the fly. \n          //\n          // NB. We cannot require blanket directly as it\n          // detects that we are not running mocha cli and loads differently.\n          //\n          // NNB. As mocha is 'clever' enough to only run the tests once for\n          // each file the following coverage task does not actually run any\n          // tests which is why the coverage instrumentation has to be done here\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      coverage: {\n        options: {\n          reporter: 'html-cov',\n          // use the quiet flag to suppress the mocha console output\n          quiet: true,\n          // specify a destination file to capture the mocha\n          // output (the quiet option does not suppress this)\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nAs noted above it is necessary to wrap the blanket require when calling mocha programatically so `coverage/blanket.js` should look something like this.\n\n```javascript\nrequire('blanket')({\n  // Only files that match the pattern will be instrumented\n  pattern: '/src/'\n});\n```\n\n### Failing tests if a coverage threshold is not reached\n\nBuilding on the previous example, if you wish to have your tests fail if it falls below a certain coverage threshold then I advise using the `travis-cov` reporter\n\n```\n$ npm install travis-cov\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      'html-cov': {\n        options: {\n          reporter: 'html-cov',\n          quiet: true,\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      },\n      // The travis-cov reporter will fail the tests if the\n      // coverage falls below the threshold configured in package.json\n      'travis-cov': {\n        options: {\n          reporter: 'travis-cov'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nDon't forget to update `package.json` with options for `travis-cov`, for example:\n\n```javascript\n  ...\n\n  \"scripts\": {\n    \"test\": \"grunt\",\n    \"travis-cov\": {\n      // Yes, I like to set the coverage threshold to 100% ;)\n      \"threshold\": 100\n    }\n  },\n\n  ...\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using: \n\n```\n$ npm test\n```\n\n### Using Vagrant\nTo use the Vagrantfile you will also need to install the following bindler plugin to manage the other plugin dependencies.\n\n```\nvagrant plugin install bindler\nvagrant bindler setup\n```\n\nThen install the required plugins with\n\n```\nvagrant plugin bundle\n```\n\n## License\nCopyright &copy; 2013 Peter Halliday  \nLicensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.7.0","dist":{"shasum":"9a3c7f4283b24c178f068b2dd66890623e95eebb","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.7.0.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.8.0":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.8.0","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt"},"config":{"travis-cov":{"threshold":100}},"dependencies":{"mocha":"~1.14.0"},"devDependencies":{"grunt-cli":"~0.1.11","grunt":"~0.4.2","chai":"~1.8.1","grunt-contrib-jshint":"~0.7.1","grunt-blanket":"~0.0.8","grunt-contrib-copy":"~0.4.1","grunt-contrib-clean":"~0.5.0","travis-cov":"git+https://github.com/kitcambridge/travis-cov.git#config","coffee-script":"~1.6.3"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\n[![Build Status](https://travis-ci.org/pghalliday/grunt-mocha-test.png)](https://travis-ci.org/pghalliday/grunt-mocha-test)\n[![Dependency Status](https://gemnasium.com/pghalliday/grunt-mocha-test.png)](https://gemnasium.com/pghalliday/grunt-mocha-test)\n\nA grunt task for running server side mocha tests\n\n## Usage\n\nInstall next to your project's Gruntfile.js with: \n\n```\n$ npm install grunt-mocha-test\n```\n\n### Running tests\n\nHere is a simple example gruntfile if you just want to run tests\n\n```javascript\nmodule.exports = function(grunt) {\n\n  // Add the grunt-mocha-test tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    // Configure a mochaTest task\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n\n};\n```\n\nThe following mocha options are supported\n\n- grep\n- ui\n- reporter\n- timeout\n- invert\n- ignoreLeaks\n- growl\n- globals\n- bail\n- require\n- colors (specify as \"colors: true\")\n\n### Specifying compilers\n\nThe Mocha `--compilers` option is almost identical to the `--require` option but with additional functionality for use with the Mocha `--watch` mode. As the `--watch` mode is not relevant for this plugin there is no need to implement a separate `compilers` option and actually the `require` option should be used instead.\n\nThe following example shows the use of the CoffeeScript compiler.\n\n```\n$ npm install coffee-script\n```\n\n```javascript\nmochaTest: {\n  test: {\n    options: {\n      reporter: 'spec',\n      require: 'coffee-script'\n    },\n    src: ['test/**/*.coffee']\n  }\n}\n```\n\nIn order to make this more user friendly the `require` option can take either a single file or an array of files in case you have other globals you wish to require.\n\neg.\n\n```javascript\nmochaTest: {\n  test: {\n    options: {\n      reporter: 'spec',\n      require: [\n        'coffee-script',\n        './globals.js'\n      ]\n    },\n    src: ['test/**/*.coffee']\n  }\n}\n```\n\nNB. The `require` option can only be used with Javascript files, ie. it is not possible to specify a `./globals.coffee` in the above example.\n\n### Specifying a Mocha module\n\nIf you would like to use a different version of Mocha than the one packaged with this plugin, you can specify the module with the `mocha` option:\n\n```\nmochaTest: {\n  test: {\n    options: {\n      mocha: require('mocha')\n    },\n    src: ['test/**/*.coffee']\n  }\n}\n```\n\n### Generating coverage reports\n\nHere is an example gruntfile that registers 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\n\n```\n$ npm install blanket\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          // Require blanket wrapper here to instrument other required\n          // files on the fly. \n          //\n          // NB. We cannot require blanket directly as it\n          // detects that we are not running mocha cli and loads differently.\n          //\n          // NNB. As mocha is 'clever' enough to only run the tests once for\n          // each file the following coverage task does not actually run any\n          // tests which is why the coverage instrumentation has to be done here\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      coverage: {\n        options: {\n          reporter: 'html-cov',\n          // use the quiet flag to suppress the mocha console output\n          quiet: true,\n          // specify a destination file to capture the mocha\n          // output (the quiet option does not suppress this)\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nAs noted above it is necessary to wrap the blanket require when calling mocha programatically so `coverage/blanket.js` should look something like this.\n\n```javascript\nrequire('blanket')({\n  // Only files that match the pattern will be instrumented\n  pattern: '/src/'\n});\n```\n\n### Failing tests if a coverage threshold is not reached\n\nBuilding on the previous example, if you wish to have your tests fail if it falls below a certain coverage threshold then I advise using the `travis-cov` reporter\n\n```\n$ npm install travis-cov\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      'html-cov': {\n        options: {\n          reporter: 'html-cov',\n          quiet: true,\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      },\n      // The travis-cov reporter will fail the tests if the\n      // coverage falls below the threshold configured in package.json\n      'travis-cov': {\n        options: {\n          reporter: 'travis-cov'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nDon't forget to update `package.json` with options for `travis-cov`, for example:\n\n```javascript\n  ...\n\n  \"scripts\": {\n    \"test\": \"grunt\",\n    \"travis-cov\": {\n      // Yes, I like to set the coverage threshold to 100% ;)\n      \"threshold\": 100\n    }\n  },\n\n  ...\n```\n\nNB. This is no longer supported in the latest version of NPM where `scripts` can only be strings. There is currently a pull request open on `travis-cov` to move the configuration to the `config` entry.\n\nhttps://github.com/alex-seville/travis-cov/issues/2\n\n### Running in permanent environments (like watch)\n\nIn some instances, for example when you are running grunt-mocha-test in a grunt watch environment using the `spawn: false` option, you might get in a spot where each test is run only once. After that it will be ignored until\nyou always get: `0 passing` as a result of your tests.\n\nThis happens because mocha loads your test using require. Thus once it has been loaded once in a specific process, it won't run again. To prevent this from happening, use the `clearRequireCache` option (default value is `false`).\n\nHere is an example allowing you to run only the modified tests when possible:\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          clearRequireCache: true\n        },\n        src: ['test/**/*.js']\n      },\n    },\n\n    watch: {\n      js: {\n        options: {\n          spawn: false,\n        },\n        files: '**/*.js',\n        tasks: ['check']\n      }\n    }\n  });\n\n  // On watch events configure mochaTest to run only on the test if it is one\n  // otherwise, run the whole testsuite\n  var defaultSimpleSrc = grunt.config('mochaTest.simple.src');\n  grunt.event.on('watch', function(action, filepath) {\n    grunt.config('mochaTest.simple.src', defaultSimpleSrc);\n    if (filepath.match('test/')) {\n      grunt.config('mochaTest.simple.src', filepath);\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using: \n\n```\n$ npm test\n```\n\n### Using Vagrant\nTo use the Vagrantfile you will also need to install the following bindler plugin to manage the other plugin dependencies.\n\n```\nvagrant plugin install bindler\nvagrant bindler setup\n```\n\nThen install the required plugins with\n\n```\nvagrant plugin bundle\n```\n\n## License\nCopyright &copy; 2013 Peter Halliday  \nLicensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.8.0","dist":{"shasum":"a56e5faf6c2e34788f08c649a9d8f70355190a96","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.8.0.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}},"0.8.1":{"name":"grunt-mocha-test","description":"A grunt task for running server side mocha tests","version":"0.8.1","homepage":"https://github.com/pghalliday/grunt-mocha-test","author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"bugs":{"url":"https://github.com/pghalliday/grunt-mocha-test/issues"},"licenses":[{"type":"MIT","url":"https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"}],"main":"grunt.js","bin":{"grunt-mocha-test":"bin/grunt-mocha-test"},"engines":{"node":">= 0.10.4"},"scripts":{"test":"grunt"},"config":{"travis-cov":{"threshold":100}},"dependencies":{"mocha":"~1.14.0"},"devDependencies":{"grunt-cli":"~0.1.11","grunt":"~0.4.2","chai":"~1.8.1","grunt-contrib-jshint":"~0.7.1","grunt-blanket":"~0.0.8","grunt-contrib-copy":"~0.4.1","grunt-contrib-clean":"~0.5.0","travis-cov":"git+https://github.com/kitcambridge/travis-cov.git#config","coffee-script":"~1.6.3"},"keywords":["gruntplugin","mocha","test"],"readme":"# grunt-mocha-test\n\n[![Build Status](https://travis-ci.org/pghalliday/grunt-mocha-test.png)](https://travis-ci.org/pghalliday/grunt-mocha-test)\n[![Dependency Status](https://gemnasium.com/pghalliday/grunt-mocha-test.png)](https://gemnasium.com/pghalliday/grunt-mocha-test)\n\nA grunt task for running server side mocha tests\n\n## Usage\n\nInstall next to your project's Gruntfile.js with: \n\n```\n$ npm install grunt-mocha-test\n```\n\n### Running tests\n\nHere is a simple example gruntfile if you just want to run tests\n\n```javascript\nmodule.exports = function(grunt) {\n\n  // Add the grunt-mocha-test tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    // Configure a mochaTest task\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n\n};\n```\n\nThe following mocha options are supported\n\n- grep\n- ui\n- reporter\n- timeout\n- invert\n- ignoreLeaks\n- growl\n- globals\n- bail\n- require\n- colors (specify as \"colors: true\")\n\n### Specifying compilers\n\nThe Mocha `--compilers` option is almost identical to the `--require` option but with additional functionality for use with the Mocha `--watch` mode. As the `--watch` mode is not relevant for this plugin there is no need to implement a separate `compilers` option and actually the `require` option should be used instead.\n\nThe following example shows the use of the CoffeeScript compiler.\n\n```\n$ npm install coffee-script\n```\n\n```javascript\nmochaTest: {\n  test: {\n    options: {\n      reporter: 'spec',\n      require: 'coffee-script'\n    },\n    src: ['test/**/*.coffee']\n  }\n}\n```\n\nIn order to make this more user friendly the `require` option can take either a single file or an array of files in case you have other globals you wish to require.\n\neg.\n\n```javascript\nmochaTest: {\n  test: {\n    options: {\n      reporter: 'spec',\n      require: [\n        'coffee-script',\n        './globals.js'\n      ]\n    },\n    src: ['test/**/*.coffee']\n  }\n}\n```\n\nNB. The `require` option can only be used with Javascript files, ie. it is not possible to specify a `./globals.coffee` in the above example.\n\n### Specifying a Mocha module\n\nIf you would like to use a different version of Mocha than the one packaged with this plugin, you can specify the module with the `mocha` option:\n\n```\nmochaTest: {\n  test: {\n    options: {\n      mocha: require('mocha')\n    },\n    src: ['test/**/*.coffee']\n  }\n}\n```\n\n### Generating coverage reports\n\nHere is an example gruntfile that registers 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\n\n```\n$ npm install blanket\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          // Require blanket wrapper here to instrument other required\n          // files on the fly. \n          //\n          // NB. We cannot require blanket directly as it\n          // detects that we are not running mocha cli and loads differently.\n          //\n          // NNB. As mocha is 'clever' enough to only run the tests once for\n          // each file the following coverage task does not actually run any\n          // tests which is why the coverage instrumentation has to be done here\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      coverage: {\n        options: {\n          reporter: 'html-cov',\n          // use the quiet flag to suppress the mocha console output\n          quiet: true,\n          // specify a destination file to capture the mocha\n          // output (the quiet option does not suppress this)\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nAs noted above it is necessary to wrap the blanket require when calling mocha programatically so `coverage/blanket.js` should look something like this.\n\n```javascript\nrequire('blanket')({\n  // Only files that match the pattern will be instrumented\n  pattern: '/src/'\n});\n```\n\n### Failing tests if a coverage threshold is not reached\n\nBuilding on the previous example, if you wish to have your tests fail if it falls below a certain coverage threshold then I advise using the `travis-cov` reporter\n\n```\n$ npm install travis-cov\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      'html-cov': {\n        options: {\n          reporter: 'html-cov',\n          quiet: true,\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      },\n      // The travis-cov reporter will fail the tests if the\n      // coverage falls below the threshold configured in package.json\n      'travis-cov': {\n        options: {\n          reporter: 'travis-cov'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nDon't forget to update `package.json` with options for `travis-cov`, for example:\n\n```javascript\n  ...\n\n  \"scripts\": {\n    \"test\": \"grunt\",\n    \"travis-cov\": {\n      // Yes, I like to set the coverage threshold to 100% ;)\n      \"threshold\": 100\n    }\n  },\n\n  ...\n```\n\nNB. This is no longer supported in the latest version of NPM where `scripts` can only be strings. There is currently a pull request open on `travis-cov` to move the configuration to the `config` entry.\n\nhttps://github.com/alex-seville/travis-cov/issues/2\n\n### Running in permanent environments (like watch)\n\nIn some instances, for example when you are running grunt-mocha-test in a grunt watch environment using the `spawn: false` option, you might get in a spot where each test is run only once. After that it will be ignored until\nyou always get: `0 passing` as a result of your tests.\n\nThis happens because mocha loads your test using require. Thus once it has been loaded once in a specific process, it won't run again. To prevent this from happening, use the `clearRequireCache` option (default value is `false`).\n\nHere is an example allowing you to run only the modified tests when possible:\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          clearRequireCache: true\n        },\n        src: ['test/**/*.js']\n      },\n    },\n\n    watch: {\n      js: {\n        options: {\n          spawn: false,\n        },\n        files: '**/*.js',\n        tasks: ['check']\n      }\n    }\n  });\n\n  // On watch events configure mochaTest to run only on the test if it is one\n  // otherwise, run the whole testsuite\n  var defaultSimpleSrc = grunt.config('mochaTest.simple.src');\n  grunt.event.on('watch', function(action, filepath) {\n    grunt.config('mochaTest.simple.src', defaultSimpleSrc);\n    if (filepath.match('test/')) {\n      grunt.config('mochaTest.simple.src', filepath);\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using: \n\n```\n$ npm test\n```\n\n### Using Vagrant\nTo use the Vagrantfile you will also need to install the following bindler plugin to manage the other plugin dependencies.\n\n```\nvagrant plugin install bindler\nvagrant bindler setup\n```\n\nThen install the required plugins with\n\n```\nvagrant plugin bundle\n```\n\n## License\nCopyright &copy; 2013 Peter Halliday  \nLicensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-mocha-test@0.8.1","dist":{"shasum":"83145fdc0aae164278a07e8dacac7af798147acb","tarball":"http://registry.npmjs.org/grunt-mocha-test/-/grunt-mocha-test-0.8.1.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"pghalliday","email":"pghalliday@gmail.com"},"maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"directories":{}}},"readme":"# grunt-mocha-test\n\nA grunt task for running server side mocha tests\n\n## Getting Started\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-test`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-mocha-test');\n```\n\n[grunt]: https://github.com/cowboy/grunt\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\n\n## Documentation\n\nA single task example\n\n```javascript\n/*global module:false*/\nmodule.exports = function(grunt) {\n\n  // Add our custom tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  // Project configuration.\n  grunt.initConfig({\n    mochaTest: {\n      files: ['test/**/*.test.js']\n    },\n    mochaTestConfig: {\n      options: {\n        reporter: 'nyan'        \n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nA multi task example\n\n```javascript\n/*global module:false*/\nmodule.exports = function(grunt) {\n\n  // Add our custom tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  // Project configuration.\n  grunt.initConfig({\n    mochaTest: {\n      normal: ['test/**/*.test.js'],\n      withTimeout: ['test-timeout/**/*.test.js']\n    },\n    mochaTestConfig: {\n      normal: {\n\t    options: {\n\t      reporter: 'nyan'        \n\t    }\n      },\n      withTimeout: {\n\t    options: {\n\t      reporter: 'nyan',\n\t      timeout: 1000     \n\t    }\n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt][grunt].\n\n## Release History\n_(Nothing yet)_\n\n## License\nCopyright (c) 2012 Peter Halliday  \nLicensed under the MIT license.\n","maintainers":[{"name":"pghalliday","email":"pghalliday@gmail.com"}],"time":{"0.0.1":"2012-10-02T12:17:48.183Z","0.1.0":"2013-02-01T14:28:43.214Z","0.1.1":"2013-02-01T14:35:23.308Z","0.2.0":"2013-02-09T11:43:02.878Z","0.2.1":"2013-04-07T17:18:04.907Z","0.2.2":"2013-04-07T18:41:35.119Z","0.3.0":"2013-05-21T16:44:58.187Z","0.3.1":"2013-05-21T21:16:15.330Z","0.3.2":"2013-05-22T17:11:57.648Z","0.3.3":"2013-05-23T06:52:11.947Z","0.3.4":"2013-05-23T14:31:05.283Z","0.3.5":"2013-05-23T18:38:33.946Z","0.4.0":"2013-05-23T19:03:10.195Z","0.5.0":"2013-06-21T09:33:31.051Z","0.6.0":"2013-07-19T11:32:35.461Z","0.6.1":"2013-07-19T18:28:32.131Z","0.6.2":"2013-07-22T21:45:51.273Z","0.6.3":"2013-08-14T22:36:53.987Z","0.7.0":"2013-09-20T21:05:37.152Z","0.8.0":"2013-11-29T12:04:43.759Z","0.8.1":"2013-12-02T19:45:23.524Z"},"author":{"name":"Peter Halliday","email":"pghalliday@gmail.com","url":"http://stuffpetedoes.blogspot.nl/"},"repository":{"type":"git","url":"git://github.com/pghalliday/grunt-mocha-test.git"},"users":{"blalor":true},"_attachments":{"grunt-mocha-test-0.8.1.tgz":{"content_type":"application/octet-stream","revpos":59,"digest":"md5-KjCgXvm6wsjsJwnx4n/luA==","length":5692,"stub":true},"grunt-mocha-test-0.8.0.tgz":{"content_type":"application/octet-stream","revpos":50,"digest":"md5-C8LzVgmevDr/mp+23HGNww==","length":14923,"stub":true},"grunt-mocha-test-0.7.0.tgz":{"content_type":"application/octet-stream","revpos":46,"digest":"md5-Y4bjySeu4Z078u8R8xJOjg==","length":11823,"stub":true},"grunt-mocha-test-0.6.3.tgz":{"content_type":"application/octet-stream","revpos":44,"digest":"md5-FT8fAbSL24Fwt8WgCEPxCQ==","length":11053,"stub":true},"grunt-mocha-test-0.6.2.tgz":{"content_type":"application/octet-stream","revpos":42,"digest":"md5-bEtRtZdtWQCGkJDDGdPJ4w==","length":10558,"stub":true},"grunt-mocha-test-0.6.1.tgz":{"content_type":"application/octet-stream","revpos":40,"digest":"md5-bbB5rOP22KllphEWdVrexw==","length":10424,"stub":true},"grunt-mocha-test-0.6.0.tgz":{"content_type":"application/octet-stream","revpos":38,"digest":"md5-+NYz01/mxETUz6nljSYWKg==","length":10501,"stub":true},"grunt-mocha-test-0.5.0.tgz":{"content_type":"application/octet-stream","revpos":36,"digest":"md5-PX8ZPREp64ysMgIAm6MXuA==","length":10438,"stub":true},"grunt-mocha-test-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":34,"digest":"md5-WDsC3krLAc8/Iyj72yJa1A==","length":126653,"stub":true},"grunt-mocha-test-0.3.5.tgz":{"content_type":"application/octet-stream","revpos":32,"digest":"md5-WQlXRSpXi3lR/NHfFlhrKA==","length":126792,"stub":true},"grunt-mocha-test-0.3.4.tgz":{"content_type":"application/octet-stream","revpos":22,"digest":"md5-/wzdI56OrqZ/XIlrZI6fWw==","length":126311,"stub":true},"grunt-mocha-test-0.3.3.tgz":{"content_type":"application/octet-stream","revpos":20,"digest":"md5-qiDZzA/O4YqQEitRFNmHAQ==","length":125708,"stub":true},"grunt-mocha-test-0.3.2.tgz":{"content_type":"application/octet-stream","revpos":18,"digest":"md5-4WurvAzlLIw4SvrUzf+rdQ==","length":146048,"stub":true},"grunt-mocha-test-0.3.1.tgz":{"content_type":"application/octet-stream","revpos":16,"digest":"md5-cpt7IKdopzFCvHN6Ol1tqg==","length":123670,"stub":true},"grunt-mocha-test-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":14,"digest":"md5-rjOO+cYOAFzz56613/4+5g==","length":123232,"stub":true},"grunt-mocha-test-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-I6MSSP3ropsI4RNddSVuKA==","length":6648,"stub":true},"grunt-mocha-test-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-/htFRz4VcUNpof9W9ZCklw==","length":5974,"stub":true},"grunt-mocha-test-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-HM2LRebCG2vjLWG2xvR6UQ==","length":5915,"stub":true},"grunt-mocha-test-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-HCE0p+H59w/H7oA9J4pGdQ==","length":5663,"stub":true},"grunt-mocha-test-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-5BKh1kUNeHPnU6QF5Y8v5Q==","length":10268,"stub":true},"grunt-mocha-test-0.0.1.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-jRIoMiYm3h1Uu1V+JALmOw==","length":5310,"stub":true}},"_etag":"\"6XLYEMRPABU36K08MQ0N9OFDB\""}