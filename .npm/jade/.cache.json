{"_id":"jade","_rev":"305-5a097f1c47ba6b59cb536a199c9954f9","name":"jade","description":"Jade template engine","dist-tags":{"latest":"0.35.0"},"versions":{"0.0.1":{"name":"jade","description":"Jade template engine","version":"0.0.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./lib/jade","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.0.1","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.0.1.tgz","shasum":"68e1f6b08759e90726455f3affed049510afb54a"},"directories":{}},"0.0.2":{"name":"jade","description":"Jade template engine","version":"0.0.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./lib/jade","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.0.2","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.0.2.tgz","shasum":"7e6bb9d556be5a079d1262f04efaa4d7f7682eae"},"directories":{}},"0.1.0":{"name":"jade","description":"Jade template engine","version":"0.1.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./lib/jade","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.1.0","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.1.0.tgz","shasum":"2c9c1291f7a55ed7c2c170fca4cba67f763bf081"},"directories":{}},"0.2.0":{"name":"jade","description":"Jade template engine","version":"0.2.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./lib/jade","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.2.0","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.2.0.tgz","shasum":"f91357f9ad010a29c4de1ef8412e6ec1c6328545"},"directories":{}},"0.2.1":{"name":"jade","description":"Jade template engine","version":"0.2.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./lib/jade","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.2.1","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.2.1.tgz","shasum":"a0f8d2de062045557d84369c38b2453e66ca5591"},"directories":{}},"0.2.2":{"name":"jade","description":"Jade template engine","version":"0.2.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./lib/jade","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.2.2","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.2.2.tgz","shasum":"6fc7d4cc27fcea5bff1e2fb00c4c56660ba93392"},"directories":{}},"0.2.3":{"name":"jade","description":"Jade template engine","version":"0.2.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./lib/jade","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.2.3","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.2.3.tgz","shasum":"1991f1e5799507c9e43d3b1b839fdd75c9f87595"},"directories":{}},"0.2.4":{"name":"jade","description":"Jade template engine","version":"0.2.4","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./lib/jade","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.2.4","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.2.4.tgz","shasum":"21c02b87c9ba7afbb7e230cd922e648ea8828f28"},"directories":{}},"0.3.0":{"name":"jade","description":"Jade template engine","version":"0.3.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./lib/jade","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.3.0","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.3.0.tgz","shasum":"c9b716b90d24e4db67a6b7ee82a5c6a4746548e9"},"directories":{}},"0.4.0":{"name":"jade","description":"Jade template engine","version":"0.4.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./lib/jade","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.4.0","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.4.0.tgz","shasum":"7e1586b794a0e87752f41333a59874c80665d76f"},"directories":{}},"0.4.1":{"name":"jade","description":"Jade template engine","version":"0.4.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./lib/jade","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.4.1","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.4.1.tgz","shasum":"d684698891295b1f9c08d413493f609f100b6960"},"directories":{}},"0.5.0":{"name":"jade","description":"Jade template engine","version":"0.5.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./lib/jade/index","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.5.0","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.5.0.tgz","shasum":"da08a14486079299261c832c1c1418a309fcd320"},"directories":{}},"0.5.1":{"name":"jade","description":"Jade template engine","version":"0.5.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.5.1","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.5.1.tgz","shasum":"d1e5f3d7630d15b913968955ddf5c8296970b9bb"},"directories":{}},"0.5.2":{"name":"jade","description":"Jade template engine","version":"0.5.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.5.2","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.5.2.tgz","shasum":"fe6832f95cc6d3f54d796dfaab501989b828338f"},"directories":{}},"0.5.3":{"name":"jade","description":"Jade template engine","version":"0.5.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.5.3","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.5.3.tgz","shasum":"bd919253762b82e9dfc41087fc5506644ec77f86"},"directories":{}},"0.5.4":{"name":"jade","description":"Jade template engine","version":"0.5.4","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.5.4","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.5.4.tgz","shasum":"1d74525df30d3a13dfd3628dc6355c9742b78651"},"directories":{}},"0.5.5":{"name":"jade","description":"Jade template engine","version":"0.5.5","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.5.5","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.5.5.tgz","shasum":"11153dfea545d736f83245ab58415170d44969e4"},"directories":{}},"0.5.6":{"name":"jade","description":"Jade template engine","version":"0.5.6","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.5.6","_nodeSupported":true,"_npmVersion":"0.2.8-1","_nodeVersion":"v0.2.5","dist":{"tarball":"http://registry.npmjs.org/jade/-/jade-0.5.6.tgz","shasum":"5d2b1be0d2caf479b2825b9b39adb696f958cda5"},"directories":{}},"0.5.7":{"name":"jade","description":"Jade template engine","version":"0.5.7","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.5.7","_nodeSupported":true,"_npmVersion":"0.2.11-1","_nodeVersion":"v0.2.5","dist":{"shasum":"268ec75f0722906ee8b0a828fae7c2ef2943e841","tarball":"http://registry.npmjs.org/jade/-/jade-0.5.7.tgz"},"directories":{}},"0.6.0":{"name":"jade","description":"Jade template engine","version":"0.6.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.6.0","_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.2.5","dist":{"shasum":"d2fc539c278d83ea9578b92dfb860808a980dde8","tarball":"http://registry.npmjs.org/jade/-/jade-0.6.0.tgz"},"directories":{}},"0.6.1":{"name":"jade","description":"Jade template engine","version":"0.6.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.6.1","_engineSupported":true,"_npmVersion":"0.2.16","_nodeVersion":"v0.2.6","directories":{"lib":"./lib","bin":"./bin"},"modules":{"compiler.js":"lib/compiler.js","doctypes.js":"lib/doctypes.js","filters.js":"lib/filters.js","index.js":"lib/index.js","jade.js":"lib/jade.js","lexer.js":"lib/lexer.js","parser.js":"lib/parser.js","self-closing.js":"lib/self-closing.js","utils.js":"lib/utils.js","nodes/block.js":"lib/nodes/block.js","nodes/code.js":"lib/nodes/code.js","nodes/comment.js":"lib/nodes/comment.js","nodes/doctype.js":"lib/nodes/doctype.js","nodes/each.js":"lib/nodes/each.js","nodes/filter.js":"lib/nodes/filter.js","nodes/index.js":"lib/nodes/index.js","nodes/node.js":"lib/nodes/node.js","nodes/tag.js":"lib/nodes/tag.js","nodes/text.js":"lib/nodes/text.js"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"5dabcfabbdc7bbd47b25ce556a7fb6dba97a5fd2","tarball":"http://registry.npmjs.org/jade/-/jade-0.6.1.tgz"}},"0.6.3":{"name":"jade","description":"Jade template engine","version":"0.6.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.6.3","_engineSupported":true,"_npmVersion":"0.2.16","_nodeVersion":"v0.2.6","directories":{"lib":"./lib","bin":"./bin"},"modules":{"compiler.js":"lib/compiler.js","doctypes.js":"lib/doctypes.js","filters.js":"lib/filters.js","index.js":"lib/index.js","jade.js":"lib/jade.js","lexer.js":"lib/lexer.js","parser.js":"lib/parser.js","self-closing.js":"lib/self-closing.js","utils.js":"lib/utils.js","nodes/block.js":"lib/nodes/block.js","nodes/code.js":"lib/nodes/code.js","nodes/comment.js":"lib/nodes/comment.js","nodes/doctype.js":"lib/nodes/doctype.js","nodes/each.js":"lib/nodes/each.js","nodes/filter.js":"lib/nodes/filter.js","nodes/index.js":"lib/nodes/index.js","nodes/node.js":"lib/nodes/node.js","nodes/tag.js":"lib/nodes/tag.js","nodes/text.js":"lib/nodes/text.js"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"4fb43aedba8df180b6352cfd3d1a2e478ae98dd3","tarball":"http://registry.npmjs.org/jade/-/jade-0.6.3.tgz"}},"0.7.0":{"name":"jade","description":"Jade template engine","version":"0.7.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.7.0","_engineSupported":true,"_npmVersion":"0.3.13","_nodeVersion":"v0.4.1","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"b01c739991dbc18baa0b9d3c26572b30651f29ed","tarball":"http://registry.npmjs.org/jade/-/jade-0.7.0.tgz"}},"0.7.1":{"name":"jade","description":"Jade template engine","version":"0.7.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.7.1","_engineSupported":true,"_npmVersion":"0.3.13","_nodeVersion":"v0.4.1","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"61728d5ca44b5f7260f9525d4253642aa250ea57","tarball":"http://registry.npmjs.org/jade/-/jade-0.7.1.tgz"}},"0.8.0":{"name":"jade","description":"Jade template engine","version":"0.8.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.8.0","_engineSupported":true,"_npmVersion":"0.3.13","_nodeVersion":"v0.4.1","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"f09aeb7e840b1b4e4189c8cf269a4207d36c7d12","tarball":"http://registry.npmjs.org/jade/-/jade-0.8.0.tgz"}},"0.8.1":{"name":"jade","description":"Jade template engine","version":"0.8.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.8.1","_engineSupported":true,"_npmVersion":"0.3.13","_nodeVersion":"v0.4.1","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"bb46454f12811e4f97273e9ddf8e0bfab885f58b","tarball":"http://registry.npmjs.org/jade/-/jade-0.8.1.tgz"}},"0.8.2":{"name":"jade","description":"Jade template engine","version":"0.8.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.8.2","_engineSupported":true,"_npmVersion":"0.3.13","_nodeVersion":"v0.4.1","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"377c82c11da23739c0ee0a7b19cc137193198b06","tarball":"http://registry.npmjs.org/jade/-/jade-0.8.2.tgz"}},"0.8.3":{"name":"jade","description":"Jade template engine","version":"0.8.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.8.3","_engineSupported":true,"_npmVersion":"0.3.13","_nodeVersion":"v0.4.1","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"967b0d590ef3db8f7bd800721cef0827692171f1","tarball":"http://registry.npmjs.org/jade/-/jade-0.8.3.tgz"}},"0.8.4":{"name":"jade","description":"Jade template engine","version":"0.8.4","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.8.4","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.2","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"67d6df1915a98ff67b4b2f0dc4510531faa15ae2","tarball":"http://registry.npmjs.org/jade/-/jade-0.8.4.tgz"}},"0.8.5":{"name":"jade","description":"Jade template engine","version":"0.8.5","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.8.5","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.2","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"d3573352a8dcc83526d0148c4c8ee88111817471","tarball":"http://registry.npmjs.org/jade/-/jade-0.8.5.tgz"}},"0.8.6":{"name":"jade","description":"Jade template engine","version":"0.8.6","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.8.6","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.2","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"6f3215230de87689be1942e4d248911d087be161","tarball":"http://registry.npmjs.org/jade/-/jade-0.8.6.tgz"}},"0.8.7":{"name":"jade","description":"Jade template engine","version":"0.8.7","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.8.7","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.2","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"290f153232785be7a3d2173045b06a3857ec9903","tarball":"http://registry.npmjs.org/jade/-/jade-0.8.7.tgz"}},"0.8.8":{"name":"jade","description":"Jade template engine","version":"0.8.8","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.8.8","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.2","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"a721b05c560c86ddd7f658c6252471bb07cad4cb","tarball":"http://registry.npmjs.org/jade/-/jade-0.8.8.tgz"}},"0.8.9":{"name":"jade","description":"Jade template engine","version":"0.8.9","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.8.9","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.2","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"17052e1668b7cb814d34f23c9e1d276d21d2ebc4","tarball":"http://registry.npmjs.org/jade/-/jade-0.8.9.tgz"}},"0.9.0":{"name":"jade","description":"Jade template engine","version":"0.9.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.9.0","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.2","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"5a413c62ee4f415088d971f1cb70ddcb32e21ec6","tarball":"http://registry.npmjs.org/jade/-/jade-0.9.0.tgz"}},"0.9.1":{"name":"jade","description":"Jade template engine","version":"0.9.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.9.1","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.2","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"297e613c6d0560ae506fd66fbe7b65fcacd48141","tarball":"http://registry.npmjs.org/jade/-/jade-0.9.1.tgz"}},"0.9.2":{"name":"jade","description":"Jade template engine","version":"0.9.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.9.2","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"f1fb6266421ba2a8e8c56d34543a052e376546ad","tarball":"http://registry.npmjs.org/jade/-/jade-0.9.2.tgz"}},"0.9.3":{"name":"jade","description":"Jade template engine","version":"0.9.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.9.3","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"8c7647d21c811ffc1bd937e7383f45d88ea07a51","tarball":"http://registry.npmjs.org/jade/-/jade-0.9.3.tgz"}},"0.10.0":{"name":"jade","description":"Jade template engine","version":"0.10.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.10.0","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"6a2f4a576bffe2342dd402018157cc705133dc52","tarball":"http://registry.npmjs.org/jade/-/jade-0.10.0.tgz"}},"0.10.1":{"name":"jade","description":"Jade template engine","version":"0.10.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.10.1","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"1e06e4846297d96a2f4ed9d40dc9c36d119ada14","tarball":"http://registry.npmjs.org/jade/-/jade-0.10.1.tgz"}},"0.10.2":{"name":"jade","description":"Jade template engine","version":"0.10.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.10.2","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"f4cdb8437ca52b2109b3cba068c8025088ceac2b","tarball":"http://registry.npmjs.org/jade/-/jade-0.10.2.tgz"}},"0.10.3":{"name":"jade","description":"Jade template engine","version":"0.10.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.10.3","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"063749f8c9f0931ca0fa259747ee7c485e113773","tarball":"http://registry.npmjs.org/jade/-/jade-0.10.3.tgz"}},"0.10.4":{"name":"jade","description":"Jade template engine","version":"0.10.4","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.10.4","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.4","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"6fdd6018d1deb8ac935f023f7f54192fb35b8b66","tarball":"http://registry.npmjs.org/jade/-/jade-0.10.4.tgz"}},"0.10.5":{"name":"jade","description":"Jade template engine","version":"0.10.5","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.10.5","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.6","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"1f5555233b24e63a0417375f8419e6f631bb1bf9","tarball":"http://registry.npmjs.org/jade/-/jade-0.10.5.tgz"}},"0.10.6":{"name":"jade","description":"Jade template engine","version":"0.10.6","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"_id":"jade@0.10.6","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.6","directories":{"lib":"./lib","bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"a8f2c5ae1f659c383b8eed13a2ec864d496c2c19","tarball":"http://registry.npmjs.org/jade/-/jade-0.10.6.tgz"}},"0.10.7":{"name":"jade","description":"Jade template engine","version":"0.10.7","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"dependencies":{},"devDependencies":{},"_id":"jade@0.10.7","_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"b1d78799bb85c5e1d52dce6840e9bc69d9945224","tarball":"http://registry.npmjs.org/jade/-/jade-0.10.7.tgz"},"scripts":{},"directories":{}},"0.11.0":{"name":"jade","description":"Jade template engine","version":"0.11.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"engines":{"node":">= 0.1.98"},"dependencies":{},"devDependencies":{},"_id":"jade@0.11.0","_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"ed8494ab1f2552d469c68bb6e408c371dac053f8","tarball":"http://registry.npmjs.org/jade/-/jade-0.11.0.tgz"},"scripts":{},"directories":{}},"0.11.1":{"name":"jade","description":"Jade template engine","version":"0.11.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1"},"engines":{"node":">= 0.1.98"},"dependencies":{},"_id":"jade@0.11.1","_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"6604a44210b2cfc0b29cfa88c00930a371f293d1","tarball":"http://registry.npmjs.org/jade/-/jade-0.11.1.tgz"},"scripts":{},"directories":{}},"0.12.0":{"name":"jade","description":"Jade template engine","version":"0.12.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"dependencies":{},"_id":"jade@0.12.0","_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"3a1d30d3c74a406b4e072b639fb82903a3db8b1f","tarball":"http://registry.npmjs.org/jade/-/jade-0.12.0.tgz"},"directories":{}},"0.12.1":{"name":"jade","description":"Jade template engine","version":"0.12.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"dependencies":{},"_id":"jade@0.12.1","_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"a8b3c25c0af866ad3cc5d1351819eced05e9b544","tarball":"http://registry.npmjs.org/jade/-/jade-0.12.1.tgz"},"directories":{}},"0.12.2":{"name":"jade","description":"Jade template engine","version":"0.12.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"dependencies":{},"_id":"jade@0.12.2","_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"024332bd841921cfef707d339c6a3eede905b827","tarball":"http://registry.npmjs.org/jade/-/jade-0.12.2.tgz"},"directories":{}},"0.12.3":{"name":"jade","description":"Jade template engine","version":"0.12.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"dependencies":{},"_id":"jade@0.12.3","_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"b6c080d5d634704b948832bb1f4d2c6bd1bf477f","tarball":"http://registry.npmjs.org/jade/-/jade-0.12.3.tgz"},"directories":{}},"0.12.4":{"name":"jade","description":"Jade template engine","version":"0.12.4","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.12.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.12.4","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.14","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"c3f446d1a65496287abd8a3118b90a6965239ad0","tarball":"http://registry.npmjs.org/jade/-/jade-0.12.4.tgz"},"directories":{}},"0.13.0":{"name":"jade","description":"Jade template engine","version":"0.13.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.13.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.13.0","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.14","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"b0b80b8c67759eb32fcc4e5d6cdd6f032f9b6c41","tarball":"http://registry.npmjs.org/jade/-/jade-0.13.0.tgz"},"directories":{}},"0.14.0":{"name":"jade","description":"Jade template engine","version":"0.14.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.14.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.14.0","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.14","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"dist":{"shasum":"6e22d76c2b84959846626e14a9ac448fcf7b5b3f","tarball":"http://registry.npmjs.org/jade/-/jade-0.14.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.14.1":{"name":"jade","description":"Jade template engine","version":"0.14.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.14.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.14.1","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.14","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"dist":{"shasum":"cd44fff2e2362406853ebdaddff6089b1ca18c54","tarball":"http://registry.npmjs.org/jade/-/jade-0.14.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.14.2":{"name":"jade","description":"Jade template engine","version":"0.14.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.14.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.14.2","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"dist":{"shasum":"18189ef89d51ca80e257cda9fd275deb6978f436","tarball":"http://registry.npmjs.org/jade/-/jade-0.14.2.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.15.0":{"name":"jade","description":"Jade template engine","version":"0.15.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.15.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.15.0","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"6b5b626ee8d127d30c708f2e922c280bb56fdd33","tarball":"http://registry.npmjs.org/jade/-/jade-0.15.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.15.1":{"name":"jade","description":"Jade template engine","version":"0.15.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.1.0","mkdirp":"0.0.6"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.15.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.15.1","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"62ebd0037d16590b7cd94ef0ca1ac21171a1302d","tarball":"http://registry.npmjs.org/jade/-/jade-0.15.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.15.2":{"name":"jade","description":"Jade template engine","version":"0.15.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.1.0","mkdirp":"0.0.6"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.15.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.15.2","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"3bb540762e1c5dd4912647009ebab121bdff9992","tarball":"http://registry.npmjs.org/jade/-/jade-0.15.2.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.15.3":{"name":"jade","description":"Jade template engine","version":"0.15.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.1.0","mkdirp":"0.0.6"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.15.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.15.3","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"91dd5cf8213f9ec8ea9ed21bd93c615bdba218a4","tarball":"http://registry.npmjs.org/jade/-/jade-0.15.3.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.15.4":{"name":"jade","description":"Jade template engine","version":"0.15.4","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.1.0","mkdirp":"0.0.6"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.15.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.15.4","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"fd3835a955e0365052ba06dc465fcd2c619997b0","tarball":"http://registry.npmjs.org/jade/-/jade-0.15.4.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.16.0":{"name":"jade","description":"Jade template engine","version":"0.16.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.1.0","mkdirp":">= 0.0.7"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1","uglify-js":">= 1.0.7"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.16.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.16.0","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"00a88b887958b93106cdd5a78ee07842e08d70f7","tarball":"http://registry.npmjs.org/jade/-/jade-0.16.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.16.1":{"name":"jade","description":"Jade template engine","version":"0.16.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.1.0","mkdirp":">= 0.0.7"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1","uglify-js":">= 1.0.7"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.16.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.16.1","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"68438a44fbfabd29c6227e1a6f3eb08ddb928425","tarball":"http://registry.npmjs.org/jade/-/jade-0.16.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.16.2":{"name":"jade","description":"Jade template engine","version":"0.16.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.1.0","mkdirp":">= 0.0.7"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1","uglify-js":">= 1.0.7"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.16.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.16.2","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"514de77b161b9101a9a65eb4f1553fcf395c618a","tarball":"http://registry.npmjs.org/jade/-/jade-0.16.2.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.16.3":{"name":"jade","description":"Jade template engine","version":"0.16.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.1.0","mkdirp":">= 0.0.7"},"devDependencies":{"expresso":"0.6.4","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1","uglify-js":">= 1.0.7"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.16.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.16.3","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"b76d473bea61ac551d1f0785b4d423dc442d0779","tarball":"http://registry.npmjs.org/jade/-/jade-0.16.3.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.16.4":{"name":"jade","description":"Jade template engine","version":"0.16.4","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.2.x","mkdirp":">= 0.0.7"},"devDependencies":{"expresso":"0.9.2","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1","uglify-js":">= 1.0.7"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmJsonOpts":{"file":"/Users/tj/.npm/jade/0.16.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"jade@0.16.4","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.5.9","_defaultsLoaded":true,"dist":{"shasum":"0bc3378930b173c44a535964557c2ed6c3cb6cd7","tarball":"http://registry.npmjs.org/jade/-/jade-0.16.4.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.17.0":{"name":"jade","description":"Jade template engine","version":"0.17.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.2.x","mkdirp":">= 0.0.7"},"devDependencies":{"expresso":"0.9.2","coffee-script":">= 0.0.1","sass":">= 0.0.1","less":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1","uglify-js":">= 1.0.7"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.17.0","_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.6.0","_defaultsLoaded":true,"dist":{"shasum":"44ef71a52a631d4c58c99e2fe5d996dc9bb028b8","tarball":"http://registry.npmjs.org/jade/-/jade-0.17.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.18.0":{"name":"jade","description":"Jade template engine","version":"0.18.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.2.x","mkdirp":">= 0.0.7"},"devDependencies":{"expresso":"0.9.2","coffee-script":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1","uglify-js":">= 1.0.7"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.18.0","_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"2868cc3f4686b37be59becc506b7c79b254888e6","tarball":"http://registry.npmjs.org/jade/-/jade-0.18.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.19.0":{"name":"jade","description":"Jade template engine","version":"0.19.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.2.x","mkdirp":">= 0.0.7"},"devDependencies":{"mocha":"*","coffee-script":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1","uglify-js":">= 1.0.7"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.19.0","_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.6.4","_defaultsLoaded":true,"dist":{"shasum":"f4225c5e34230d9d09d4d8f515df579dda47de94","tarball":"http://registry.npmjs.org/jade/-/jade-0.19.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.20.0":{"name":"jade","description":"Jade template engine","version":"0.20.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.2.x","mkdirp":">= 0.0.7"},"devDependencies":{"mocha":"*","coffee-script":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1","uglify-js":">= 1.0.7"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.20.0","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"2c8f3742bcf87dc49c88e505c01f72563d1fcf2e","tarball":"http://registry.npmjs.org/jade/-/jade-0.20.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.20.1":{"name":"jade","description":"Jade template engine","version":"0.20.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.5.x","mkdirp":">= 0.0.7"},"devDependencies":{"mocha":"*","coffee-script":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1","uglify-js":">= 1.0.7"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.20.1","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"6310fb2599ca4a96d04028cdbebf5d21e11bc846","tarball":"http://registry.npmjs.org/jade/-/jade-0.20.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.20.2":{"name":"jade","description":"Jade template engine","version":"0.20.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.5.x","mkdirp":">= 0.0.7"},"devDependencies":{"mocha":"*","coffee-script":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1","uglify-js":">= 1.0.7"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.20.2","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"360202bc25521acff8bbf996c4b736da64951a2f","tarball":"http://registry.npmjs.org/jade/-/jade-0.20.2.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.20.3":{"name":"jade","description":"Jade template engine","version":"0.20.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.5.x","mkdirp":">= 0.0.7"},"devDependencies":{"mocha":"*","coffee-script":">= 0.0.1","markdown":">= 0.0.1","stylus":">= 0.0.1","uubench":"0.0.1","uglify-js":">= 1.0.7"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.20.3","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"7f43cbc7103762abb72a67fd6484eb72ac1d28a0","tarball":"http://registry.npmjs.org/jade/-/jade-0.20.3.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.21.0":{"name":"jade","description":"Jade template engine","version":"0.21.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"dependencies":{"commander":"0.5.x","mkdirp":">= 0.0.7"},"devDependencies":{"mocha":"*","coffee-script":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.21.0","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"0501b3cf2e820e0f8d1d460670cb05295bc7f446","tarball":"http://registry.npmjs.org/jade/-/jade-0.21.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.22.0":{"name":"jade","description":"Jade template engine","version":"0.22.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.5.2","mkdirp":"0.3.0"},"devDependencies":{"mocha":"*","coffee-script":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.22.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.9","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"2b10e0c63f0dd5e4c909c39b3edd88015330567d","tarball":"http://registry.npmjs.org/jade/-/jade-0.22.0.tgz"},"readme":"","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.22.1":{"name":"jade","description":"Jade template engine","version":"0.22.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.5.2","mkdirp":"0.3.0"},"devDependencies":{"mocha":"*","coffee-script":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.22.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.9","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"22f793922fc245e79c536fedc56a1e75b1a12991","tarball":"http://registry.npmjs.org/jade/-/jade-0.22.1.tgz"},"readme":"","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.23.0":{"name":"jade","description":"Jade template engine","version":"0.23.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.5.2","mkdirp":"0.3.0"},"devDependencies":{"mocha":"*","coffee-script":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.23.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"1294382eb01cc931f8f5f49ba7eefbacf7e9a416","tarball":"http://registry.npmjs.org/jade/-/jade-0.23.0.tgz"},"readme":"","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.24.0":{"name":"jade","description":"Jade template engine","version":"0.24.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.5.2","mkdirp":"0.3.0"},"devDependencies":{"mocha":"*","coffee-script":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.24.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"b33cd6fc6b85e75080f18707a3f4ab23c5261cdb","tarball":"http://registry.npmjs.org/jade/-/jade-0.24.0.tgz"},"readme":"","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.25.0":{"name":"jade","description":"Jade template engine","version":"0.25.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.5.2","mkdirp":"0.3.0"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.25.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.9","_defaultsLoaded":true,"dist":{"shasum":"a59f2f4e07aa3ff8a6ce2e759ef039866864a1ae","tarball":"http://registry.npmjs.org/jade/-/jade-0.25.0.tgz"},"readme":"","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.26.0":{"name":"jade","description":"Jade template engine","version":"0.26.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.5.2","mkdirp":"0.3.0"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.26.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"57a1d368a5523296569ac102e923ed35c162352a","tarball":"http://registry.npmjs.org/jade/-/jade-0.26.0.tgz"},"readme":"","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.26.1":{"name":"jade","description":"Jade template engine","version":"0.26.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.5.2","mkdirp":"0.3.0"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.26.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"0e9ad15b3ae07e3fb404a1fda4668aec10e96a17","tarball":"http://registry.npmjs.org/jade/-/jade-0.26.1.tgz"},"readme":"","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.26.2":{"name":"jade","description":"Jade template engine","version":"0.26.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade.git"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.5.2","mkdirp":"0.3.0"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"engines":{"node":">= 0.1.98"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"jade@0.26.2","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.19","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"9de3d1e629069861f2b802c9e20944eacac33611","tarball":"http://registry.npmjs.org/jade/-/jade-0.26.2.tgz"},"readme":"","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.26.3":{"name":"jade","description":"Jade template engine","version":"0.26.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.6.1","mkdirp":"0.3.0"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"_id":"jade@0.26.3","dist":{"shasum":"8f10d7977d8d79f2f6ff862a81b0513ccb25686c","tarball":"http://registry.npmjs.org/jade/-/jade-0.26.3.tgz"},"readme":"","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.27.0":{"name":"jade","description":"Jade template engine","version":"0.27.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.6.1","mkdirp":"0.3.0"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"_id":"jade@0.27.0","dist":{"shasum":"dc5ebed10d04a5e0eaf49ef0009bec473d1a6b31","tarball":"http://registry.npmjs.org/jade/-/jade-0.27.0.tgz"},"readme":"","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.27.1":{"name":"jade","description":"Jade template engine","version":"0.27.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.6.1","mkdirp":"0.3.0"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"_id":"jade@0.27.1","dist":{"shasum":"949dc5b8930f4b2b1e847aa1a2ff9f6592a02442","tarball":"http://registry.npmjs.org/jade/-/jade-0.27.1.tgz"},"readme":"","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.27.2":{"name":"jade","description":"Jade template engine","version":"0.27.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.6.1","mkdirp":"0.3.0"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"_id":"jade@0.27.2","dist":{"shasum":"a18b7645246165d4e2c284b7773ec8936ccee557","tarball":"http://registry.npmjs.org/jade/-/jade-0.27.2.tgz"},"readme":"","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.27.3":{"name":"jade","description":"Jade template engine","version":"0.27.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.6.1","mkdirp":"0.3.x"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"readme":" [![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\n\n# Jade - template engine\n\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\n\n## Test drive\n\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\n\n## README Contents\n\n- [Features](#a1)\n- [Implementations](#a2)\n- [Installation](#a3)\n- [Browser Support](#a4)\n- [Public API](#a5)\n- [Syntax](#a6)\n    - [Line Endings](#a6-1)\n    - [Tags](#a6-2)\n    - [Tag Text](#a6-3)\n    - [Comments](#a6-4)\n    - [Block Comments](#a6-5)\n    - [Nesting](#a6-6)\n    - [Block Expansion](#a6-7)\n    - [Case](#a6-8)\n    - [Attributes](#a6-9)\n    - [HTML](#a6-10)\n    - [Doctypes](#a6-11)\n- [Filters](#a7)\n- [Code](#a8)\n- [Iteration](#a9)\n- [Conditionals](#a10)\n- [Template inheritance](#a11)\n- [Block append / prepend](#a12)\n- [Includes](#a13)\n- [Mixins](#a14)\n- [Generated Output](#a15)\n- [Example Makefile](#a16)\n- [jade(1)](#a17)\n- [Tutorials](#a18)\n- [License](#a19)\n\n<a name=\"a1\"/>\n## Features\n\n  - client-side support\n  - great readability\n  - flexible indentation\n  - block-expansion\n  - mixins\n  - static includes\n  - attribute interpolation\n  - code is escaped by default for security\n  - contextual error reporting at compile &amp; run time\n  - executable for compiling jade templates via the command line\n  - html 5 mode (the default doctype)\n  - optional memory caching\n  - combine dynamic and static tag classes\n  - parse tree manipulation via _filters_\n  - template inheritance\n  - block append / prepend\n  - supports [Express JS](http://expressjs.com) out of the box\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\n  - block comments\n  - no tag prefix\n  - AST filters\n  - filters\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\n    - :cdata\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\n  - [html2jade](https://github.com/donpark/html2jade) converter\n\n<a name=\"a2\"/>\n## Implementations\n\n  - [php](http://github.com/everzet/jade.php)\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\n  - [ruby](http://github.com/stonean/slim)\n  - [python](https://github.com/SyrusAkbary/pyjade)\n  - [java](https://github.com/neuland/jade4j)\n\n<a name=\"a3\"/>\n## Installation\n\nvia npm:\n\n```bash\n$ npm install jade\n```\n\n<a name=\"a4\"/>\n## Browser Support\n\n To compile jade to a single file compatible for client-side use simply execute:\n\n```bash\n$ make jade.js\n```\n\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\n\n```bash\n$ make jade.min.js\n```\n\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\n\n```jade\np Hello #{name}\n```\n\n Can then be as small as the following generated function:\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\n  via `jade.attrs`, `jade.escape` etc.\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a5\"/>\n## Public API\n\n```js\nvar jade = require('jade');\n\n// Compile a function\nvar fn = jade.compile('string of jade', options);\nfn(locals);\n```\n\n### Options\n\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\n - `locals`    Local variable object\n - `filename`  Used in exceptions, and required when using includes\n - `debug`     Outputs tokens and function body generated\n - `compiler`  Compiler to replace jade's default\n - `compileDebug`  When `false` no debug instrumentation is compiled\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\n\n<a name=\"a6\"/>\n## Syntax\n\n<a name=\"a6-1\"/>\n### Line Endings\n\n**CRLF** and **CR** are converted to **LF** before parsing.\n\n<a name=\"a6-2\"/>\n### Tags\n\nA tag is simply a leading word:\n\n```jade\nhtml\n```\n\nfor example is converted to `<html></html>`\n\ntags can also have ids:\n\n```jade\ndiv#container\n```\n\nwhich would render `<div id=\"container\"></div>`\n\nhow about some classes?\n\n```jade\ndiv.user-details\n```\n\nrenders `<div class=\"user-details\"></div>`\n\nmultiple classes? _and_ an id? sure:\n\n```jade\ndiv#foo.bar.baz\n```\n\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\n\ndiv div div sure is annoying, how about:\n\n```jade\n#foo\n.bar\n```\n\nwhich is syntactic sugar for what we have already been doing, and outputs:\n\n```html\n<div id=\"foo\"></div><div class=\"bar\"></div>\n```\n\n<a name=\"a6-3\"/>\n### Tag Text\n\nSimply place some content after the tag:\n\n```jade\np wahoo!\n```\n\nrenders `<p>wahoo!</p>`.\n\nwell cool, but how about large bodies of text:\n\n```jade\np\n  | foo bar baz\n  | rawr rawr\n  | super cool\n  | go jade go\n```\n\nrenders `<p>foo bar baz rawr.....</p>`\n\ninterpolation? yup! both types of text can utilize interpolation,\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\n\n```jade\n#user #{name} &lt;#{email}&gt;\n```\n\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\n\nActually want `#{}` for some reason? escape it!\n\n```jade\np \\#{something}\n```\n\nnow we have `<p>#{something}</p>`\n\nWe can also utilize the unescaped variant `!{html}`, so the following\nwill result in a literal script tag:\n\n```jade\n- var html = \"<script></script>\"\n| !{html}\n```\n\nNested tags that also contain text can optionally use a text block:\n\n```jade\nlabel\n  | Username:\n  input(name='user[name]')\n```\n\nor immediate tag text:\n\n```jade\nlabel Username:\n  input(name='user[name]')\n```\n\nTags that accept _only_ text such as `script` and `style` do not\nneed the leading `|` character, for example:\n\n```jade\nhtml\n  head\n    title Example\n    script\n      if (foo) {\n        bar();\n      } else {\n        baz();\n      }\n```\n\nOnce again as an alternative, we may use a trailing `.` to indicate a text block, for example:\n\n```jade\np.\n  foo asdf\n  asdf\n   asdfasdfaf\n   asdf\n  asd.\n```\n\noutputs:\n\n```html\n<p>foo asdf\nasdf\n  asdfasdfaf\n  asdf\nasd.\n</p>\n```\n\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\n\n```jade\np .\n```\n\noutputs:\n\n```html\n<p>.</p>\n```\n\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\n\n```html\n<p>foo\\bar</p>\n```\n\nuse:\n\n```jade\np.\n  foo\\\\bar\n```\n\n<a name=\"a6-4\"/>\n### Comments\n\nSingle line comments currently look the same as JavaScript comments,\naka `//` and must be placed on their own line:\n\n```jade\n// just some paragraphs\np foo\np bar\n```\n\nwould output\n\n```html\n<!-- just some paragraphs -->\n<p>foo</p>\n<p>bar</p>\n```\n\nJade also supports unbuffered comments, by simply adding a hyphen:\n\n```jade\n//- will not output within markup\np foo\np bar\n```\n\noutputting\n\n```html\n<p>foo</p>\n<p>bar</p>\n```\n\n<a name=\"a6-5\"/>\n### Block Comments\n\n A block comment is legal as well:\n\n```jade\nbody\n  //\n    #content\n      h1 Example\n```\n\noutputting\n\n```html\n<body>\n  <!--\n  <div id=\"content\">\n    <h1>Example</h1>\n  </div>\n  -->\n</body>\n```\n\nJade supports conditional-comments as well, for example:\n\n```jade\nhead\n  //if lt IE 8\n    script(src='/ie-sucks.js')\n```\n\noutputs:\n\n```html\n<body>\n  <!--[if lt IE 8]>\n    <script src=\"/ie-sucks.js\"></script>\n  <![endif]-->\n</body>\n```\n\n<a name=\"a6-6\"/>\n### Nesting\n\n Jade supports nesting to define the tags in a natural way:\n\n```jade\nul\n  li.first\n    a(href='#') foo\n  li\n    a(href='#') bar\n  li.last\n    a(href='#') baz\n```\n\n<a name=\"a6-7\"/>\n### Block Expansion\n\n Block expansion allows you to create terse single-line nested tags,\n the following example is equivalent to the nesting example above.\n\n```jade\nul\n  li.first: a(href='#') foo\n  li: a(href='#') bar\n  li.last: a(href='#') baz\n```\n\n<a name=\"a6-8\"/>\n### Case\n\n The case statement takes the following form:\n\n```jade\nhtml\n  body\n    friends = 10\n    case friends\n      when 0\n        p you have no friends\n      when 1\n        p you have a friend\n      default\n        p you have #{friends} friends\n```\n\n Block expansion may also be used:\n\n```jade\nfriends = 5\n\nhtml\n  body\n    case friends\n      when 0: p you have no friends\n      when 1: p you have a friend\n      default: p you have #{friends} friends\n```\n\n<a name=\"a6-9\"/>\n### Attributes\n\nJade currently supports `(` and `)` as attribute delimiters.\n\n```jade\na(href='/login', title='View login page') Login\n```\n\nWhen a value is `undefined` or `null` the attribute is _not_ added,\nso this is fine, it will not compile `something=\"null\"`.\n\n```jade\ndiv(something=null)\n```\n\nBoolean attributes are also supported:\n\n```jade\ninput(type=\"checkbox\", checked)\n```\n\nBoolean attributes with code will only output the attribute when `true`:\n\n```jade\ninput(type=\"checkbox\", checked=someValue)\n```\n\nMultiple lines work too:\n\n```jade\ninput(type='checkbox',\n  name='agreement',\n  checked)\n```\n\nMultiple lines without the comma work fine:\n\n```jade\ninput(type='checkbox'\n  name='agreement'\n  checked)\n```\n\nFunky whitespace? fine:\n\n```jade\ninput(\n  type='checkbox'\n  name='agreement'\n  checked)\n```\n\nColons work:\n\n```jade\nrss(xmlns:atom=\"atom\")\n```\n\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\nwe could use regular javascript concatenation:\n\n```jade\na(href='/user/' + user.id)= user.name\n```\n\nor we could use jade's interpolation, which I added because everyone\nusing Ruby or CoffeeScript seems to think this is legal js..:\n\n```jade\na(href='/user/#{user.id}')= user.name\n```\n\nThe `class` attribute is special-cased when an array is given,\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\n\n```jade\nbody(class=bodyClasses)\n```\n\n<a name=\"a6-10\"/>\n### HTML\n\n Inline html is fine, we can use the pipe syntax to\n write arbitrary text, in this case some html:\n\n```jade\nhtml\n  body\n    | <h1>Title</h1>\n    | <p>foo bar baz</p>\n```\n\n Or we can use the trailing `.` to indicate to Jade that we\n only want text in this block, allowing us to omit the pipes:\n\n```jade\nhtml\n  body.\n    <h1>Title</h1>\n    <p>foo bar baz</p>\n```\n\n Both of these examples yield the same result:\n\n```html\n<html><body><h1>Title</h1>\n<p>foo bar baz</p>\n</body></html>\n```\n\n The same rule applies for anywhere you can have text\n in jade, raw html is fine:\n\n```jade\nhtml\n  body\n    h1 User <em>#{name}</em>\n```\n\n<a name=\"a6-11\"/>\n### Doctypes\n\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\n\n```jade\n!!!\n```\n\nor\n\n```jade\ndoctype\n```\n\nWill output the _html 5_  doctype, however:\n\n```jade\n!!! transitional\n```\n\nWill output the _transitional_ doctype.\n\nDoctypes are case-insensitive, so the following are equivalent:\n\n```jade\ndoctype Basic\ndoctype basic\n```\n\nit's also possible to simply pass a doctype literal:\n\n```jade\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\n```\n\nyielding:\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN>\n```\n\nBelow are the doctypes defined by default, which can easily be extended:\n\n```js\nvar doctypes = exports.doctypes = {\n  '5': '<!DOCTYPE html>',\n  'default': '<!DOCTYPE html>',\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n};\n```\n\nTo alter the default simply change:\n\n```js\njade.doctypes.default = 'whatever you want';\n```\n\n<a name=\"a7\"/>\n## Filters\n\nFilters are prefixed with `:`, for example `:markdown` and\npass the following block of text to an arbitrary function for processing. View the _features_\nat the top of this document for available filters.\n\n```jade\nbody\n  :markdown\n    Woah! jade _and_ markdown, very **cool**\n    we can even link to [stuff](http://google.com)\n```\n\nRenders:\n\n```html\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\n```\n\n<a name=\"a8\"/>\n## Code\n\nJade currently supports three classifications of executable code. The first\nis prefixed by `-`, and is not buffered:\n\n```jade\n- var foo = 'bar';\n```\n\nThis can be used for conditionals, or iteration:\n\n```jade\n- for (var key in obj)\n  p= obj[key]\n```\n\nDue to Jade's buffering techniques the following is valid as well:\n\n```jade\n- if (foo)\n  ul\n    li yay\n    li foo\n    li worked\n- else\n  p oh no! didnt work\n```\n\nHell, even verbose iteration:\n\n```jade\n- if (items.length)\n  ul\n    - items.forEach(function(item){\n      li= item\n    - })\n```\n\nAnything you want!\n\nNext up we have _escaped_ buffered code, which is used to\nbuffer a return value, which is prefixed by `=`:\n\n```jade\n- var foo = 'bar'\n= foo\nh1= foo\n```\n\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\nby default for security, however to output unescaped return values\nyou may use `!=`:\n\n```jade\np!= aVarContainingMoreHTML\n```\n\n Jade also has designer-friendly variants, making the literal JavaScript\n more expressive and declarative. For example the following assignments\n are equivalent, and the expression is still regular javascript:\n\n```jade\n- var foo = 'foo ' + 'bar'\nfoo = 'foo ' + 'bar'\n```\n\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\n\n```jade\nif foo == 'bar'\n  ul\n    li yay\n    li foo\n    li worked\nelse\n  p oh no! didnt work\n```\n\n<a name=\"a9\"/>\n## Iteration\n\n Along with vanilla JavaScript Jade also supports a subset of\n constructs that allow you to create more designer-friendly templates,\n one of these constructs is `each`, taking the form:\n\n```jade\neach VAL[, KEY] in OBJ\n```\n\nAn example iterating over an array:\n\n```jade\n- var items = [\"one\", \"two\", \"three\"]\neach item in items\n  li= item\n```\n\noutputs:\n\n```html\n<li>one</li>\n<li>two</li>\n<li>three</li>\n```\n\niterating an array with index:\n\n```jade\nitems = [\"one\", \"two\", \"three\"]\neach item, i in items\n  li #{item}: #{i}\n```\n\noutputs:\n\n```html\n<li>one: 0</li>\n<li>two: 1</li>\n<li>three: 2</li>\n```\n\niterating an object's keys and values:\n\n```jade\nobj = { foo: 'bar' }\neach val, key in obj\n  li #{key}: #{val}\n```\n\nwould output `<li>foo: bar</li>`\n\nInternally Jade converts these statements to regular\nJavaScript loops such as `users.forEach(function(user){`,\nso lexical scope and nesting applies as it would with regular\nJavaScript:\n\n```jade\neach user in users\n  each role in user.roles\n    li= role\n```\n\n You may also use `for` if you prefer:\n\n```jade\nfor user in users\n  for role in user.roles\n    li= role\n```\n\n<a name=\"a10\"/>\n## Conditionals\n\n Jade conditionals are equivalent to those using the code (`-`) prefix,\n however allow you to ditch parenthesis to become more designer friendly,\n however keep in mind the expression given is _regular_ JavaScript:\n\n```jade\nfor user in users\n  if user.role == 'admin'\n    p #{user.name} is an admin\n  else\n    p= user.name\n```\n\n is equivalent to the following using vanilla JavaScript literals:\n\n```jade\nfor user in users\n  - if (user.role == 'admin')\n    p #{user.name} is an admin\n  - else\n    p= user.name\n```\n\n  Jade also provides have `unless` which is equivalent to `if (!(expr))`:\n\n```jade\nfor user in users\n  unless user.isAnonymous\n    p\n      | Click to view\n      a(href='/users/' + user.id)= user.name\n```\n\n<a name=\"a11\"/>\n## Template inheritance\n\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\n\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\n\n```jade\nhtml\n  head\n    h1 My Site - #{title}\n    block scripts\n      script(src='/jquery.js')\n  body\n    block content\n    block foot\n      #footer\n        p some footer content\n```\n\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\n\n```jade\nextends layout\n\nblock scripts\n  script(src='/jquery.js')\n  script(src='/pets.js')\n\nblock content\n  h1= title\n  each pet in pets\n    include pet\n```\n\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\n\n```jade\nextends regular-layout\n\nblock content\n  .sidebar\n    block sidebar\n      p nothing\n  .primary\n    block primary\n      p nothing\n```\n\n<a name=\"a12\"/>\n## Block append / prepend\n\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\n\n```jade\nhtml\n  head\n    block head\n      script(src='/vendor/jquery.js')\n      script(src='/vendor/caustic.js')\n    body\n      block content\n```\n\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\n\n```jade\nextends layout\n\nblock append head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n  When using `block append` or `block prepend` the `block` is optional:\n\n```jade\nextends layout\n\nappend head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n<a name=\"a13\"/>\n## Includes\n\n Includes allow you to statically include chunks of Jade,\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\n\n    ./layout.jade\n    ./includes/\n      ./head.jade\n      ./foot.jade\n\nand the following _layout.jade_:\n\n```jade\nhtml\n  include includes/head\n  body\n    h1 My Site\n    p Welcome to my super amazing site.\n    include includes/foot\n```\n\nboth includes _includes/head_ and _includes/foot_ are\nread relative to the `filename` option given to _layout.jade_,\nwhich should be an absolute path to this file, however Express does this for you. Include then parses these files, and injects the AST produced to render what you would expect:\n\n```html\n<html>\n  <head>\n    <title>My Site</title>\n    <script src=\"/javascripts/jquery.js\">\n    </script><script src=\"/javascripts/app.js\"></script>\n  </head>\n  <body>\n    <h1>My Site</h1>\n    <p>Welcome to my super lame site.</p>\n    <div id=\"footer\">\n      <p>Copyright>(c) foobar</p>\n    </div>\n  </body>\n</html>\n```\n\n As mentioned `include` can be used to include other content\n such as html or css. By providing an extension Jade will not\n assume that the file is Jade source and will include it as\n a literal:\n\n```jade\nhtml\n  body\n    include content.html\n```\n\n  Include directives may also accept a block, in which case the\n  the given block will be appended to the _last_ block defined\n  in the file. For example if `head.jade` contains:\n\n```jade\nhead\n  script(src='/jquery.js')\n```\n\n We may append values by providing a block to `include head`\n as shown below, adding the two scripts.\n\n```jade\nhtml\n  include head\n    script(src='/foo.js')\n    script(src='/bar.js')\n  body\n    h1 test\n```\n\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\n\n```jade\nhead\n  yield\n  script(src='/jquery.js')\n  script(src='/jquery.ui.js')\n```\n\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example support we have `user.jade` which utilizes a `user` variable.\n\n```jade\nh1= user.name\np= user.occupation\n```\n\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\n\n```jade\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\n\neach user in users\n  .user\n    include user\n```\n\nyielding:\n\n```html\n<div class=\"user\">\n  <h1>Tobi</h1>\n  <p>Ferret</p>\n</div>\n```\n\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\n\n```jade\neach person in users\n  .user\n    user = person\n    include user\n```\n\n<a name=\"a14\"/>\n## Mixins\n\n Mixins are converted to regular JavaScript functions in\n the compiled template that Jade constructs. Mixins may\n take arguments, though not required:\n\n```jade\nmixin list\n  ul\n    li foo\n    li bar\n    li baz\n```\n\n  Utilizing a mixin without args looks similar, just without a block:\n\n```jade\nh2 Groceries\nmixin list\n```\n\n  Mixins may take one or more arguments as well, the arguments\n  are regular javascripts expressions, so for example the following:\n\n```jade\nmixin pets(pets)\n  ul.pets\n    - each pet in pets\n      li= pet\n\nmixin profile(user)\n  .user\n    h2= user.name\n    mixin pets(user.pets)\n```\n\n   Would yield something similar to the following html:\n\n```html\n<div class=\"user\">\n  <h2>tj</h2>\n  <ul class=\"pets\">\n    <li>tobi</li>\n    <li>loki</li>\n    <li>jane</li>\n    <li>manny</li>\n  </ul>\n</div>\n```\n\n<a name=\"a15\"/>\n## Generated Output\n\n Suppose we have the following Jade:\n\n```jade\n- var title = 'yay'\nh1.title #{title}\np Just an example\n```\n\n When the `compileDebug` option is not explicitly `false`, Jade\n will compile the function instrumented with `__.lineno = n;`, which\n in the event of an exception is passed to `rethrow()` which constructs\n a useful message relative to the initial Jade input.\n\n```js\nfunction anonymous(locals) {\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\n  var rethrow = jade.rethrow;\n  try {\n    var attrs = jade.attrs, escape = jade.escape;\n    var buf = [];\n    with (locals || {}) {\n      var interp;\n      __.lineno = 1;\n       var title = 'yay'\n      __.lineno = 2;\n      buf.push('<h1');\n      buf.push(attrs({ \"class\": ('title') }));\n      buf.push('>');\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n      buf.push('</h1>');\n      __.lineno = 3;\n      buf.push('<p>');\n      buf.push('Just an example');\n      buf.push('</p>');\n    }\n    return buf.join(\"\");\n  } catch (err) {\n    rethrow(err, __.input, __.filename, __.lineno);\n  }\n}\n```\n\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\nto toString() compiled templates and avoid running the entire Jade library on\nthe client, increasing performance, and decreasing the amount of JavaScript\nrequired.\n\n```js\nfunction anonymous(locals) {\n  var attrs = jade.attrs, escape = jade.escape;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    var title = 'yay'\n    buf.push('<h1');\n    buf.push(attrs({ \"class\": ('title') }));\n    buf.push('>');\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n    buf.push('</h1>');\n    buf.push('<p>');\n    buf.push('Just an example');\n    buf.push('</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a16\"/>\n## Example Makefile\n\n  Below is an example Makefile used to compile _pages/*.jade_\n  into _pages/*.html_ files by simply executing `make`.\n\n```make\nJADE = $(shell find pages/*.jade)\nHTML = $(JADE:.jade=.html)\n\nall: $(HTML)\n\n%.html: %.jade\n    jade < $< --path $< > $@\n\nclean:\n    rm -f $(HTML)\n\n.PHONY: clean\n```\n\nthis can be combined with the `watch(1)` command to produce\na watcher-like behaviour:\n\n```bash\n$ watch make\n```\n\n<a name=\"a17\"/>\n## jade(1)\n\n```\n\nUsage: jade [options] [dir|file ...]\n\nOptions:\n\n  -h, --help         output usage information\n  -V, --version      output the version number\n  -o, --obj <str>    javascript options object\n  -O, --out <dir>    output the compiled html to <dir>\n  -p, --path <path>  filename used to resolve includes\n  -P, --pretty       compile pretty html output\n  -c, --client       compile for client-side runtime.js\n  -D, --no-debug     compile without debugging (smaller functions)\n\nExamples:\n\n  # translate jade the templates dir\n  $ jade templates\n\n  # create {foo,bar}.html\n  $ jade {foo,bar}.jade\n\n  # jade over stdio\n  $ jade < my.jade > my.html\n\n  # jade over stdio\n  $ echo \"h1 Jade!\" | jade\n\n  # foo, bar dirs rendering to /tmp\n  $ jade foo bar --out /tmp\n\n```\n\n<a name=\"a18\"/>\n## Tutorials\n\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\n\n<a name=\"a19\"/>\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"jade@0.27.3","dist":{"shasum":"71583edbfb9f1db964584f1f602d6e89c2d7d0be","tarball":"http://registry.npmjs.org/jade/-/jade-0.27.3.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.27.4":{"name":"jade","description":"Jade template engine","version":"0.27.4","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.6.1","mkdirp":"0.3.x"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"readme":" [![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\n\n# Jade - template engine\n\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\n\n## Test drive\n\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\n\n## README Contents\n\n- [Features](#a1)\n- [Implementations](#a2)\n- [Installation](#a3)\n- [Browser Support](#a4)\n- [Public API](#a5)\n- [Syntax](#a6)\n    - [Line Endings](#a6-1)\n    - [Tags](#a6-2)\n    - [Tag Text](#a6-3)\n    - [Comments](#a6-4)\n    - [Block Comments](#a6-5)\n    - [Nesting](#a6-6)\n    - [Block Expansion](#a6-7)\n    - [Case](#a6-8)\n    - [Attributes](#a6-9)\n    - [HTML](#a6-10)\n    - [Doctypes](#a6-11)\n- [Filters](#a7)\n- [Code](#a8)\n- [Iteration](#a9)\n- [Conditionals](#a10)\n- [Template inheritance](#a11)\n- [Block append / prepend](#a12)\n- [Includes](#a13)\n- [Mixins](#a14)\n- [Generated Output](#a15)\n- [Example Makefile](#a16)\n- [jade(1)](#a17)\n- [Tutorials](#a18)\n- [License](#a19)\n\n<a name=\"a1\"/>\n## Features\n\n  - client-side support\n  - great readability\n  - flexible indentation\n  - block-expansion\n  - mixins\n  - static includes\n  - attribute interpolation\n  - code is escaped by default for security\n  - contextual error reporting at compile &amp; run time\n  - executable for compiling jade templates via the command line\n  - html 5 mode (the default doctype)\n  - optional memory caching\n  - combine dynamic and static tag classes\n  - parse tree manipulation via _filters_\n  - template inheritance\n  - block append / prepend\n  - supports [Express JS](http://expressjs.com) out of the box\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\n  - block comments\n  - no tag prefix\n  - AST filters\n  - filters\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\n    - :cdata\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\n  - [html2jade](https://github.com/donpark/html2jade) converter\n\n<a name=\"a2\"/>\n## Implementations\n\n  - [php](http://github.com/everzet/jade.php)\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\n  - [ruby](http://github.com/stonean/slim)\n  - [python](https://github.com/SyrusAkbary/pyjade)\n  - [java](https://github.com/neuland/jade4j)\n\n<a name=\"a3\"/>\n## Installation\n\nvia npm:\n\n```bash\n$ npm install jade\n```\n\n<a name=\"a4\"/>\n## Browser Support\n\n To compile jade to a single file compatible for client-side use simply execute:\n\n```bash\n$ make jade.js\n```\n\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\n\n```bash\n$ make jade.min.js\n```\n\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\n\n```jade\np Hello #{name}\n```\n\n Can then be as small as the following generated function:\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\n  via `jade.attrs`, `jade.escape` etc.\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a5\"/>\n## Public API\n\n```js\nvar jade = require('jade');\n\n// Compile a function\nvar fn = jade.compile('string of jade', options);\nfn(locals);\n```\n\n### Options\n\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\n - `locals`    Local variable object\n - `filename`  Used in exceptions, and required when using includes\n - `debug`     Outputs tokens and function body generated\n - `compiler`  Compiler to replace jade's default\n - `compileDebug`  When `false` no debug instrumentation is compiled\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\n\n<a name=\"a6\"/>\n## Syntax\n\n<a name=\"a6-1\"/>\n### Line Endings\n\n**CRLF** and **CR** are converted to **LF** before parsing.\n\n<a name=\"a6-2\"/>\n### Tags\n\nA tag is simply a leading word:\n\n```jade\nhtml\n```\n\nfor example is converted to `<html></html>`\n\ntags can also have ids:\n\n```jade\ndiv#container\n```\n\nwhich would render `<div id=\"container\"></div>`\n\nhow about some classes?\n\n```jade\ndiv.user-details\n```\n\nrenders `<div class=\"user-details\"></div>`\n\nmultiple classes? _and_ an id? sure:\n\n```jade\ndiv#foo.bar.baz\n```\n\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\n\ndiv div div sure is annoying, how about:\n\n```jade\n#foo\n.bar\n```\n\nwhich is syntactic sugar for what we have already been doing, and outputs:\n\n```html\n<div id=\"foo\"></div><div class=\"bar\"></div>\n```\n\n<a name=\"a6-3\"/>\n### Tag Text\n\nSimply place some content after the tag:\n\n```jade\np wahoo!\n```\n\nrenders `<p>wahoo!</p>`.\n\nwell cool, but how about large bodies of text:\n\n```jade\np\n  | foo bar baz\n  | rawr rawr\n  | super cool\n  | go jade go\n```\n\nrenders `<p>foo bar baz rawr.....</p>`\n\ninterpolation? yup! both types of text can utilize interpolation,\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\n\n```jade\n#user #{name} &lt;#{email}&gt;\n```\n\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\n\nActually want `#{}` for some reason? escape it!\n\n```jade\np \\#{something}\n```\n\nnow we have `<p>#{something}</p>`\n\nWe can also utilize the unescaped variant `!{html}`, so the following\nwill result in a literal script tag:\n\n```jade\n- var html = \"<script></script>\"\n| !{html}\n```\n\nNested tags that also contain text can optionally use a text block:\n\n```jade\nlabel\n  | Username:\n  input(name='user[name]')\n```\n\nor immediate tag text:\n\n```jade\nlabel Username:\n  input(name='user[name]')\n```\n\nTags that accept _only_ text such as `script` and `style` do not\nneed the leading `|` character, for example:\n\n```jade\nhtml\n  head\n    title Example\n    script\n      if (foo) {\n        bar();\n      } else {\n        baz();\n      }\n```\n\nOnce again as an alternative, we may use a trailing `.` to indicate a text block, for example:\n\n```jade\np.\n  foo asdf\n  asdf\n   asdfasdfaf\n   asdf\n  asd.\n```\n\noutputs:\n\n```html\n<p>foo asdf\nasdf\n  asdfasdfaf\n  asdf\nasd.\n</p>\n```\n\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\n\n```jade\np .\n```\n\noutputs:\n\n```html\n<p>.</p>\n```\n\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\n\n```html\n<p>foo\\bar</p>\n```\n\nuse:\n\n```jade\np.\n  foo\\\\bar\n```\n\n<a name=\"a6-4\"/>\n### Comments\n\nSingle line comments currently look the same as JavaScript comments,\naka `//` and must be placed on their own line:\n\n```jade\n// just some paragraphs\np foo\np bar\n```\n\nwould output\n\n```html\n<!-- just some paragraphs -->\n<p>foo</p>\n<p>bar</p>\n```\n\nJade also supports unbuffered comments, by simply adding a hyphen:\n\n```jade\n//- will not output within markup\np foo\np bar\n```\n\noutputting\n\n```html\n<p>foo</p>\n<p>bar</p>\n```\n\n<a name=\"a6-5\"/>\n### Block Comments\n\n A block comment is legal as well:\n\n```jade\nbody\n  //\n    #content\n      h1 Example\n```\n\noutputting\n\n```html\n<body>\n  <!--\n  <div id=\"content\">\n    <h1>Example</h1>\n  </div>\n  -->\n</body>\n```\n\nJade supports conditional-comments as well, for example:\n\n```jade\nhead\n  //if lt IE 8\n    script(src='/ie-sucks.js')\n```\n\noutputs:\n\n```html\n<body>\n  <!--[if lt IE 8]>\n    <script src=\"/ie-sucks.js\"></script>\n  <![endif]-->\n</body>\n```\n\n<a name=\"a6-6\"/>\n### Nesting\n\n Jade supports nesting to define the tags in a natural way:\n\n```jade\nul\n  li.first\n    a(href='#') foo\n  li\n    a(href='#') bar\n  li.last\n    a(href='#') baz\n```\n\n<a name=\"a6-7\"/>\n### Block Expansion\n\n Block expansion allows you to create terse single-line nested tags,\n the following example is equivalent to the nesting example above.\n\n```jade\nul\n  li.first: a(href='#') foo\n  li: a(href='#') bar\n  li.last: a(href='#') baz\n```\n\n<a name=\"a6-8\"/>\n### Case\n\n The case statement takes the following form:\n\n```jade\nhtml\n  body\n    friends = 10\n    case friends\n      when 0\n        p you have no friends\n      when 1\n        p you have a friend\n      default\n        p you have #{friends} friends\n```\n\n Block expansion may also be used:\n\n```jade\nfriends = 5\n\nhtml\n  body\n    case friends\n      when 0: p you have no friends\n      when 1: p you have a friend\n      default: p you have #{friends} friends\n```\n\n<a name=\"a6-9\"/>\n### Attributes\n\nJade currently supports `(` and `)` as attribute delimiters.\n\n```jade\na(href='/login', title='View login page') Login\n```\n\nWhen a value is `undefined` or `null` the attribute is _not_ added,\nso this is fine, it will not compile `something=\"null\"`.\n\n```jade\ndiv(something=null)\n```\n\nBoolean attributes are also supported:\n\n```jade\ninput(type=\"checkbox\", checked)\n```\n\nBoolean attributes with code will only output the attribute when `true`:\n\n```jade\ninput(type=\"checkbox\", checked=someValue)\n```\n\nMultiple lines work too:\n\n```jade\ninput(type='checkbox',\n  name='agreement',\n  checked)\n```\n\nMultiple lines without the comma work fine:\n\n```jade\ninput(type='checkbox'\n  name='agreement'\n  checked)\n```\n\nFunky whitespace? fine:\n\n```jade\ninput(\n  type='checkbox'\n  name='agreement'\n  checked)\n```\n\nColons work:\n\n```jade\nrss(xmlns:atom=\"atom\")\n```\n\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\nwe could use regular javascript concatenation:\n\n```jade\na(href='/user/' + user.id)= user.name\n```\n\nor we could use jade's interpolation, which I added because everyone\nusing Ruby or CoffeeScript seems to think this is legal js..:\n\n```jade\na(href='/user/#{user.id}')= user.name\n```\n\nThe `class` attribute is special-cased when an array is given,\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\n\n```jade\nbody(class=bodyClasses)\n```\n\n<a name=\"a6-10\"/>\n### HTML\n\n Inline html is fine, we can use the pipe syntax to\n write arbitrary text, in this case some html:\n\n```jade\nhtml\n  body\n    | <h1>Title</h1>\n    | <p>foo bar baz</p>\n```\n\n Or we can use the trailing `.` to indicate to Jade that we\n only want text in this block, allowing us to omit the pipes:\n\n```jade\nhtml\n  body.\n    <h1>Title</h1>\n    <p>foo bar baz</p>\n```\n\n Both of these examples yield the same result:\n\n```html\n<html><body><h1>Title</h1>\n<p>foo bar baz</p>\n</body></html>\n```\n\n The same rule applies for anywhere you can have text\n in jade, raw html is fine:\n\n```jade\nhtml\n  body\n    h1 User <em>#{name}</em>\n```\n\n<a name=\"a6-11\"/>\n### Doctypes\n\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\n\n```jade\n!!!\n```\n\nor\n\n```jade\ndoctype\n```\n\nWill output the _html 5_  doctype, however:\n\n```jade\n!!! transitional\n```\n\nWill output the _transitional_ doctype.\n\nDoctypes are case-insensitive, so the following are equivalent:\n\n```jade\ndoctype Basic\ndoctype basic\n```\n\nit's also possible to simply pass a doctype literal:\n\n```jade\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\n```\n\nyielding:\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN>\n```\n\nBelow are the doctypes defined by default, which can easily be extended:\n\n```js\nvar doctypes = exports.doctypes = {\n  '5': '<!DOCTYPE html>',\n  'default': '<!DOCTYPE html>',\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n};\n```\n\nTo alter the default simply change:\n\n```js\njade.doctypes.default = 'whatever you want';\n```\n\n<a name=\"a7\"/>\n## Filters\n\nFilters are prefixed with `:`, for example `:markdown` and\npass the following block of text to an arbitrary function for processing. View the _features_\nat the top of this document for available filters.\n\n```jade\nbody\n  :markdown\n    Woah! jade _and_ markdown, very **cool**\n    we can even link to [stuff](http://google.com)\n```\n\nRenders:\n\n```html\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\n```\n\n<a name=\"a8\"/>\n## Code\n\nJade currently supports three classifications of executable code. The first\nis prefixed by `-`, and is not buffered:\n\n```jade\n- var foo = 'bar';\n```\n\nThis can be used for conditionals, or iteration:\n\n```jade\n- for (var key in obj)\n  p= obj[key]\n```\n\nDue to Jade's buffering techniques the following is valid as well:\n\n```jade\n- if (foo)\n  ul\n    li yay\n    li foo\n    li worked\n- else\n  p oh no! didnt work\n```\n\nHell, even verbose iteration:\n\n```jade\n- if (items.length)\n  ul\n    - items.forEach(function(item){\n      li= item\n    - })\n```\n\nAnything you want!\n\nNext up we have _escaped_ buffered code, which is used to\nbuffer a return value, which is prefixed by `=`:\n\n```jade\n- var foo = 'bar'\n= foo\nh1= foo\n```\n\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\nby default for security, however to output unescaped return values\nyou may use `!=`:\n\n```jade\np!= aVarContainingMoreHTML\n```\n\n Jade also has designer-friendly variants, making the literal JavaScript\n more expressive and declarative. For example the following assignments\n are equivalent, and the expression is still regular javascript:\n\n```jade\n- var foo = 'foo ' + 'bar'\nfoo = 'foo ' + 'bar'\n```\n\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\n\n```jade\nif foo == 'bar'\n  ul\n    li yay\n    li foo\n    li worked\nelse\n  p oh no! didnt work\n```\n\n<a name=\"a9\"/>\n## Iteration\n\n Along with vanilla JavaScript Jade also supports a subset of\n constructs that allow you to create more designer-friendly templates,\n one of these constructs is `each`, taking the form:\n\n```jade\neach VAL[, KEY] in OBJ\n```\n\nAn example iterating over an array:\n\n```jade\n- var items = [\"one\", \"two\", \"three\"]\neach item in items\n  li= item\n```\n\noutputs:\n\n```html\n<li>one</li>\n<li>two</li>\n<li>three</li>\n```\n\niterating an array with index:\n\n```jade\nitems = [\"one\", \"two\", \"three\"]\neach item, i in items\n  li #{item}: #{i}\n```\n\noutputs:\n\n```html\n<li>one: 0</li>\n<li>two: 1</li>\n<li>three: 2</li>\n```\n\niterating an object's keys and values:\n\n```jade\nobj = { foo: 'bar' }\neach val, key in obj\n  li #{key}: #{val}\n```\n\nwould output `<li>foo: bar</li>`\n\nInternally Jade converts these statements to regular\nJavaScript loops such as `users.forEach(function(user){`,\nso lexical scope and nesting applies as it would with regular\nJavaScript:\n\n```jade\neach user in users\n  each role in user.roles\n    li= role\n```\n\n You may also use `for` if you prefer:\n\n```jade\nfor user in users\n  for role in user.roles\n    li= role\n```\n\n<a name=\"a10\"/>\n## Conditionals\n\n Jade conditionals are equivalent to those using the code (`-`) prefix,\n however allow you to ditch parenthesis to become more designer friendly,\n however keep in mind the expression given is _regular_ JavaScript:\n\n```jade\nfor user in users\n  if user.role == 'admin'\n    p #{user.name} is an admin\n  else\n    p= user.name\n```\n\n is equivalent to the following using vanilla JavaScript literals:\n\n```jade\nfor user in users\n  - if (user.role == 'admin')\n    p #{user.name} is an admin\n  - else\n    p= user.name\n```\n\n  Jade also provides have `unless` which is equivalent to `if (!(expr))`:\n\n```jade\nfor user in users\n  unless user.isAnonymous\n    p\n      | Click to view\n      a(href='/users/' + user.id)= user.name\n```\n\n<a name=\"a11\"/>\n## Template inheritance\n\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\n\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\n\n```jade\nhtml\n  head\n    h1 My Site - #{title}\n    block scripts\n      script(src='/jquery.js')\n  body\n    block content\n    block foot\n      #footer\n        p some footer content\n```\n\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\n\n```jade\nextends layout\n\nblock scripts\n  script(src='/jquery.js')\n  script(src='/pets.js')\n\nblock content\n  h1= title\n  each pet in pets\n    include pet\n```\n\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\n\n```jade\nextends regular-layout\n\nblock content\n  .sidebar\n    block sidebar\n      p nothing\n  .primary\n    block primary\n      p nothing\n```\n\n<a name=\"a12\"/>\n## Block append / prepend\n\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\n\n```jade\nhtml\n  head\n    block head\n      script(src='/vendor/jquery.js')\n      script(src='/vendor/caustic.js')\n    body\n      block content\n```\n\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\n\n```jade\nextends layout\n\nblock append head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n  When using `block append` or `block prepend` the `block` is optional:\n\n```jade\nextends layout\n\nappend head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n<a name=\"a13\"/>\n## Includes\n\n Includes allow you to statically include chunks of Jade,\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\n\n    ./layout.jade\n    ./includes/\n      ./head.jade\n      ./foot.jade\n\nand the following _layout.jade_:\n\n```jade\nhtml\n  include includes/head\n  body\n    h1 My Site\n    p Welcome to my super amazing site.\n    include includes/foot\n```\n\nboth includes _includes/head_ and _includes/foot_ are\nread relative to the `filename` option given to _layout.jade_,\nwhich should be an absolute path to this file, however Express does this for you. Include then parses these files, and injects the AST produced to render what you would expect:\n\n```html\n<html>\n  <head>\n    <title>My Site</title>\n    <script src=\"/javascripts/jquery.js\">\n    </script><script src=\"/javascripts/app.js\"></script>\n  </head>\n  <body>\n    <h1>My Site</h1>\n    <p>Welcome to my super lame site.</p>\n    <div id=\"footer\">\n      <p>Copyright>(c) foobar</p>\n    </div>\n  </body>\n</html>\n```\n\n As mentioned `include` can be used to include other content\n such as html or css. By providing an extension Jade will not\n assume that the file is Jade source and will include it as\n a literal:\n\n```jade\nhtml\n  body\n    include content.html\n```\n\n  Include directives may also accept a block, in which case the\n  the given block will be appended to the _last_ block defined\n  in the file. For example if `head.jade` contains:\n\n```jade\nhead\n  script(src='/jquery.js')\n```\n\n We may append values by providing a block to `include head`\n as shown below, adding the two scripts.\n\n```jade\nhtml\n  include head\n    script(src='/foo.js')\n    script(src='/bar.js')\n  body\n    h1 test\n```\n\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\n\n```jade\nhead\n  yield\n  script(src='/jquery.js')\n  script(src='/jquery.ui.js')\n```\n\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example support we have `user.jade` which utilizes a `user` variable.\n\n```jade\nh1= user.name\np= user.occupation\n```\n\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\n\n```jade\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\n\neach user in users\n  .user\n    include user\n```\n\nyielding:\n\n```html\n<div class=\"user\">\n  <h1>Tobi</h1>\n  <p>Ferret</p>\n</div>\n```\n\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\n\n```jade\neach person in users\n  .user\n    user = person\n    include user\n```\n\n<a name=\"a14\"/>\n## Mixins\n\n Mixins are converted to regular JavaScript functions in\n the compiled template that Jade constructs. Mixins may\n take arguments, though not required:\n\n```jade\nmixin list\n  ul\n    li foo\n    li bar\n    li baz\n```\n\n  Utilizing a mixin without args looks similar, just without a block:\n\n```jade\nh2 Groceries\nmixin list\n```\n\n  Mixins may take one or more arguments as well, the arguments\n  are regular javascripts expressions, so for example the following:\n\n```jade\nmixin pets(pets)\n  ul.pets\n    - each pet in pets\n      li= pet\n\nmixin profile(user)\n  .user\n    h2= user.name\n    mixin pets(user.pets)\n```\n\n   Would yield something similar to the following html:\n\n```html\n<div class=\"user\">\n  <h2>tj</h2>\n  <ul class=\"pets\">\n    <li>tobi</li>\n    <li>loki</li>\n    <li>jane</li>\n    <li>manny</li>\n  </ul>\n</div>\n```\n\n<a name=\"a15\"/>\n## Generated Output\n\n Suppose we have the following Jade:\n\n```jade\n- var title = 'yay'\nh1.title #{title}\np Just an example\n```\n\n When the `compileDebug` option is not explicitly `false`, Jade\n will compile the function instrumented with `__.lineno = n;`, which\n in the event of an exception is passed to `rethrow()` which constructs\n a useful message relative to the initial Jade input.\n\n```js\nfunction anonymous(locals) {\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\n  var rethrow = jade.rethrow;\n  try {\n    var attrs = jade.attrs, escape = jade.escape;\n    var buf = [];\n    with (locals || {}) {\n      var interp;\n      __.lineno = 1;\n       var title = 'yay'\n      __.lineno = 2;\n      buf.push('<h1');\n      buf.push(attrs({ \"class\": ('title') }));\n      buf.push('>');\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n      buf.push('</h1>');\n      __.lineno = 3;\n      buf.push('<p>');\n      buf.push('Just an example');\n      buf.push('</p>');\n    }\n    return buf.join(\"\");\n  } catch (err) {\n    rethrow(err, __.input, __.filename, __.lineno);\n  }\n}\n```\n\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\nto toString() compiled templates and avoid running the entire Jade library on\nthe client, increasing performance, and decreasing the amount of JavaScript\nrequired.\n\n```js\nfunction anonymous(locals) {\n  var attrs = jade.attrs, escape = jade.escape;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    var title = 'yay'\n    buf.push('<h1');\n    buf.push(attrs({ \"class\": ('title') }));\n    buf.push('>');\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n    buf.push('</h1>');\n    buf.push('<p>');\n    buf.push('Just an example');\n    buf.push('</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a16\"/>\n## Example Makefile\n\n  Below is an example Makefile used to compile _pages/*.jade_\n  into _pages/*.html_ files by simply executing `make`.\n\n```make\nJADE = $(shell find pages/*.jade)\nHTML = $(JADE:.jade=.html)\n\nall: $(HTML)\n\n%.html: %.jade\n    jade < $< --path $< > $@\n\nclean:\n    rm -f $(HTML)\n\n.PHONY: clean\n```\n\nthis can be combined with the `watch(1)` command to produce\na watcher-like behaviour:\n\n```bash\n$ watch make\n```\n\n<a name=\"a17\"/>\n## jade(1)\n\n```\n\nUsage: jade [options] [dir|file ...]\n\nOptions:\n\n  -h, --help         output usage information\n  -V, --version      output the version number\n  -o, --obj <str>    javascript options object\n  -O, --out <dir>    output the compiled html to <dir>\n  -p, --path <path>  filename used to resolve includes\n  -P, --pretty       compile pretty html output\n  -c, --client       compile for client-side runtime.js\n  -D, --no-debug     compile without debugging (smaller functions)\n\nExamples:\n\n  # translate jade the templates dir\n  $ jade templates\n\n  # create {foo,bar}.html\n  $ jade {foo,bar}.jade\n\n  # jade over stdio\n  $ jade < my.jade > my.html\n\n  # jade over stdio\n  $ echo \"h1 Jade!\" | jade\n\n  # foo, bar dirs rendering to /tmp\n  $ jade foo bar --out /tmp\n\n```\n\n<a name=\"a18\"/>\n## Tutorials\n\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\n\n<a name=\"a19\"/>\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"jade@0.27.4","dist":{"shasum":"564f6a16ca6ba08f561d3300b597a18f373361f5","tarball":"http://registry.npmjs.org/jade/-/jade-0.27.4.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.27.5":{"name":"jade","description":"Jade template engine","version":"0.27.5","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.6.1","mkdirp":"0.3.x"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"readme":" [![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\n\n# Jade - template engine\n\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\n\n## Test drive\n\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\n\n## README Contents\n\n- [Features](#a1)\n- [Implementations](#a2)\n- [Installation](#a3)\n- [Browser Support](#a4)\n- [Public API](#a5)\n- [Syntax](#a6)\n    - [Line Endings](#a6-1)\n    - [Tags](#a6-2)\n    - [Tag Text](#a6-3)\n    - [Comments](#a6-4)\n    - [Block Comments](#a6-5)\n    - [Nesting](#a6-6)\n    - [Block Expansion](#a6-7)\n    - [Case](#a6-8)\n    - [Attributes](#a6-9)\n    - [HTML](#a6-10)\n    - [Doctypes](#a6-11)\n- [Filters](#a7)\n- [Code](#a8)\n- [Iteration](#a9)\n- [Conditionals](#a10)\n- [Template inheritance](#a11)\n- [Block append / prepend](#a12)\n- [Includes](#a13)\n- [Mixins](#a14)\n- [Generated Output](#a15)\n- [Example Makefile](#a16)\n- [jade(1)](#a17)\n- [Tutorials](#a18)\n- [License](#a19)\n\n<a name=\"a1\"/>\n## Features\n\n  - client-side support\n  - great readability\n  - flexible indentation\n  - block-expansion\n  - mixins\n  - static includes\n  - attribute interpolation\n  - code is escaped by default for security\n  - contextual error reporting at compile &amp; run time\n  - executable for compiling jade templates via the command line\n  - html 5 mode (the default doctype)\n  - optional memory caching\n  - combine dynamic and static tag classes\n  - parse tree manipulation via _filters_\n  - template inheritance\n  - block append / prepend\n  - supports [Express JS](http://expressjs.com) out of the box\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\n  - block comments\n  - no tag prefix\n  - AST filters\n  - filters\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\n    - :cdata\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\n  - [html2jade](https://github.com/donpark/html2jade) converter\n\n<a name=\"a2\"/>\n## Implementations\n\n  - [php](http://github.com/everzet/jade.php)\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\n  - [ruby](http://github.com/stonean/slim)\n  - [python](https://github.com/SyrusAkbary/pyjade)\n  - [java](https://github.com/neuland/jade4j)\n\n<a name=\"a3\"/>\n## Installation\n\nvia npm:\n\n```bash\n$ npm install jade\n```\n\n<a name=\"a4\"/>\n## Browser Support\n\n To compile jade to a single file compatible for client-side use simply execute:\n\n```bash\n$ make jade.js\n```\n\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\n\n```bash\n$ make jade.min.js\n```\n\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\n\n```jade\np Hello #{name}\n```\n\n Can then be as small as the following generated function:\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\n  via `jade.attrs`, `jade.escape` etc.\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a5\"/>\n## Public API\n\n```js\nvar jade = require('jade');\n\n// Compile a function\nvar fn = jade.compile('string of jade', options);\nfn(locals);\n```\n\n### Options\n\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\n - `locals`    Local variable object\n - `filename`  Used in exceptions, and required when using includes\n - `debug`     Outputs tokens and function body generated\n - `compiler`  Compiler to replace jade's default\n - `compileDebug`  When `false` no debug instrumentation is compiled\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\n\n<a name=\"a6\"/>\n## Syntax\n\n<a name=\"a6-1\"/>\n### Line Endings\n\n**CRLF** and **CR** are converted to **LF** before parsing.\n\n<a name=\"a6-2\"/>\n### Tags\n\nA tag is simply a leading word:\n\n```jade\nhtml\n```\n\nfor example is converted to `<html></html>`\n\ntags can also have ids:\n\n```jade\ndiv#container\n```\n\nwhich would render `<div id=\"container\"></div>`\n\nhow about some classes?\n\n```jade\ndiv.user-details\n```\n\nrenders `<div class=\"user-details\"></div>`\n\nmultiple classes? _and_ an id? sure:\n\n```jade\ndiv#foo.bar.baz\n```\n\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\n\ndiv div div sure is annoying, how about:\n\n```jade\n#foo\n.bar\n```\n\nwhich is syntactic sugar for what we have already been doing, and outputs:\n\n```html\n<div id=\"foo\"></div><div class=\"bar\"></div>\n```\n\n<a name=\"a6-3\"/>\n### Tag Text\n\nSimply place some content after the tag:\n\n```jade\np wahoo!\n```\n\nrenders `<p>wahoo!</p>`.\n\nwell cool, but how about large bodies of text:\n\n```jade\np\n  | foo bar baz\n  | rawr rawr\n  | super cool\n  | go jade go\n```\n\nrenders `<p>foo bar baz rawr.....</p>`\n\ninterpolation? yup! both types of text can utilize interpolation,\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\n\n```jade\n#user #{name} &lt;#{email}&gt;\n```\n\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\n\nActually want `#{}` for some reason? escape it!\n\n```jade\np \\#{something}\n```\n\nnow we have `<p>#{something}</p>`\n\nWe can also utilize the unescaped variant `!{html}`, so the following\nwill result in a literal script tag:\n\n```jade\n- var html = \"<script></script>\"\n| !{html}\n```\n\nNested tags that also contain text can optionally use a text block:\n\n```jade\nlabel\n  | Username:\n  input(name='user[name]')\n```\n\nor immediate tag text:\n\n```jade\nlabel Username:\n  input(name='user[name]')\n```\n\nTags that accept _only_ text such as `script` and `style` do not\nneed the leading `|` character, for example:\n\n```jade\nhtml\n  head\n    title Example\n    script\n      if (foo) {\n        bar();\n      } else {\n        baz();\n      }\n```\n\nOnce again as an alternative, we may use a trailing `.` to indicate a text block, for example:\n\n```jade\np.\n  foo asdf\n  asdf\n   asdfasdfaf\n   asdf\n  asd.\n```\n\noutputs:\n\n```html\n<p>foo asdf\nasdf\n  asdfasdfaf\n  asdf\nasd.\n</p>\n```\n\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\n\n```jade\np .\n```\n\noutputs:\n\n```html\n<p>.</p>\n```\n\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\n\n```html\n<p>foo\\bar</p>\n```\n\nuse:\n\n```jade\np.\n  foo\\\\bar\n```\n\n<a name=\"a6-4\"/>\n### Comments\n\nSingle line comments currently look the same as JavaScript comments,\naka `//` and must be placed on their own line:\n\n```jade\n// just some paragraphs\np foo\np bar\n```\n\nwould output\n\n```html\n<!-- just some paragraphs -->\n<p>foo</p>\n<p>bar</p>\n```\n\nJade also supports unbuffered comments, by simply adding a hyphen:\n\n```jade\n//- will not output within markup\np foo\np bar\n```\n\noutputting\n\n```html\n<p>foo</p>\n<p>bar</p>\n```\n\n<a name=\"a6-5\"/>\n### Block Comments\n\n A block comment is legal as well:\n\n```jade\nbody\n  //\n    #content\n      h1 Example\n```\n\noutputting\n\n```html\n<body>\n  <!--\n  <div id=\"content\">\n    <h1>Example</h1>\n  </div>\n  -->\n</body>\n```\n\nJade supports conditional-comments as well, for example:\n\n```jade\nhead\n  //if lt IE 8\n    script(src='/ie-sucks.js')\n```\n\noutputs:\n\n```html\n<body>\n  <!--[if lt IE 8]>\n    <script src=\"/ie-sucks.js\"></script>\n  <![endif]-->\n</body>\n```\n\n<a name=\"a6-6\"/>\n### Nesting\n\n Jade supports nesting to define the tags in a natural way:\n\n```jade\nul\n  li.first\n    a(href='#') foo\n  li\n    a(href='#') bar\n  li.last\n    a(href='#') baz\n```\n\n<a name=\"a6-7\"/>\n### Block Expansion\n\n Block expansion allows you to create terse single-line nested tags,\n the following example is equivalent to the nesting example above.\n\n```jade\nul\n  li.first: a(href='#') foo\n  li: a(href='#') bar\n  li.last: a(href='#') baz\n```\n\n<a name=\"a6-8\"/>\n### Case\n\n The case statement takes the following form:\n\n```jade\nhtml\n  body\n    friends = 10\n    case friends\n      when 0\n        p you have no friends\n      when 1\n        p you have a friend\n      default\n        p you have #{friends} friends\n```\n\n Block expansion may also be used:\n\n```jade\nfriends = 5\n\nhtml\n  body\n    case friends\n      when 0: p you have no friends\n      when 1: p you have a friend\n      default: p you have #{friends} friends\n```\n\n<a name=\"a6-9\"/>\n### Attributes\n\nJade currently supports `(` and `)` as attribute delimiters.\n\n```jade\na(href='/login', title='View login page') Login\n```\n\nWhen a value is `undefined` or `null` the attribute is _not_ added,\nso this is fine, it will not compile `something=\"null\"`.\n\n```jade\ndiv(something=null)\n```\n\nBoolean attributes are also supported:\n\n```jade\ninput(type=\"checkbox\", checked)\n```\n\nBoolean attributes with code will only output the attribute when `true`:\n\n```jade\ninput(type=\"checkbox\", checked=someValue)\n```\n\nMultiple lines work too:\n\n```jade\ninput(type='checkbox',\n  name='agreement',\n  checked)\n```\n\nMultiple lines without the comma work fine:\n\n```jade\ninput(type='checkbox'\n  name='agreement'\n  checked)\n```\n\nFunky whitespace? fine:\n\n```jade\ninput(\n  type='checkbox'\n  name='agreement'\n  checked)\n```\n\nColons work:\n\n```jade\nrss(xmlns:atom=\"atom\")\n```\n\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\nwe could use regular javascript concatenation:\n\n```jade\na(href='/user/' + user.id)= user.name\n```\n\nor we could use jade's interpolation, which I added because everyone\nusing Ruby or CoffeeScript seems to think this is legal js..:\n\n```jade\na(href='/user/#{user.id}')= user.name\n```\n\nThe `class` attribute is special-cased when an array is given,\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\n\n```jade\nbody(class=bodyClasses)\n```\n\n<a name=\"a6-10\"/>\n### HTML\n\n Inline html is fine, we can use the pipe syntax to\n write arbitrary text, in this case some html:\n\n```jade\nhtml\n  body\n    | <h1>Title</h1>\n    | <p>foo bar baz</p>\n```\n\n Or we can use the trailing `.` to indicate to Jade that we\n only want text in this block, allowing us to omit the pipes:\n\n```jade\nhtml\n  body.\n    <h1>Title</h1>\n    <p>foo bar baz</p>\n```\n\n Both of these examples yield the same result:\n\n```html\n<html><body><h1>Title</h1>\n<p>foo bar baz</p>\n</body></html>\n```\n\n The same rule applies for anywhere you can have text\n in jade, raw html is fine:\n\n```jade\nhtml\n  body\n    h1 User <em>#{name}</em>\n```\n\n<a name=\"a6-11\"/>\n### Doctypes\n\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\n\n```jade\n!!!\n```\n\nor\n\n```jade\ndoctype\n```\n\nWill output the _html 5_  doctype, however:\n\n```jade\n!!! transitional\n```\n\nWill output the _transitional_ doctype.\n\nDoctypes are case-insensitive, so the following are equivalent:\n\n```jade\ndoctype Basic\ndoctype basic\n```\n\nit's also possible to simply pass a doctype literal:\n\n```jade\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\n```\n\nyielding:\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN>\n```\n\nBelow are the doctypes defined by default, which can easily be extended:\n\n```js\nvar doctypes = exports.doctypes = {\n  '5': '<!DOCTYPE html>',\n  'default': '<!DOCTYPE html>',\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n};\n```\n\nTo alter the default simply change:\n\n```js\njade.doctypes.default = 'whatever you want';\n```\n\n<a name=\"a7\"/>\n## Filters\n\nFilters are prefixed with `:`, for example `:markdown` and\npass the following block of text to an arbitrary function for processing. View the _features_\nat the top of this document for available filters.\n\n```jade\nbody\n  :markdown\n    Woah! jade _and_ markdown, very **cool**\n    we can even link to [stuff](http://google.com)\n```\n\nRenders:\n\n```html\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\n```\n\n<a name=\"a8\"/>\n## Code\n\nJade currently supports three classifications of executable code. The first\nis prefixed by `-`, and is not buffered:\n\n```jade\n- var foo = 'bar';\n```\n\nThis can be used for conditionals, or iteration:\n\n```jade\n- for (var key in obj)\n  p= obj[key]\n```\n\nDue to Jade's buffering techniques the following is valid as well:\n\n```jade\n- if (foo)\n  ul\n    li yay\n    li foo\n    li worked\n- else\n  p oh no! didnt work\n```\n\nHell, even verbose iteration:\n\n```jade\n- if (items.length)\n  ul\n    - items.forEach(function(item){\n      li= item\n    - })\n```\n\nAnything you want!\n\nNext up we have _escaped_ buffered code, which is used to\nbuffer a return value, which is prefixed by `=`:\n\n```jade\n- var foo = 'bar'\n= foo\nh1= foo\n```\n\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\nby default for security, however to output unescaped return values\nyou may use `!=`:\n\n```jade\np!= aVarContainingMoreHTML\n```\n\n Jade also has designer-friendly variants, making the literal JavaScript\n more expressive and declarative. For example the following assignments\n are equivalent, and the expression is still regular javascript:\n\n```jade\n- var foo = 'foo ' + 'bar'\nfoo = 'foo ' + 'bar'\n```\n\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\n\n```jade\nif foo == 'bar'\n  ul\n    li yay\n    li foo\n    li worked\nelse\n  p oh no! didnt work\n```\n\n<a name=\"a9\"/>\n## Iteration\n\n Along with vanilla JavaScript Jade also supports a subset of\n constructs that allow you to create more designer-friendly templates,\n one of these constructs is `each`, taking the form:\n\n```jade\neach VAL[, KEY] in OBJ\n```\n\nAn example iterating over an array:\n\n```jade\n- var items = [\"one\", \"two\", \"three\"]\neach item in items\n  li= item\n```\n\noutputs:\n\n```html\n<li>one</li>\n<li>two</li>\n<li>three</li>\n```\n\niterating an array with index:\n\n```jade\nitems = [\"one\", \"two\", \"three\"]\neach item, i in items\n  li #{item}: #{i}\n```\n\noutputs:\n\n```html\n<li>one: 0</li>\n<li>two: 1</li>\n<li>three: 2</li>\n```\n\niterating an object's keys and values:\n\n```jade\nobj = { foo: 'bar' }\neach val, key in obj\n  li #{key}: #{val}\n```\n\nwould output `<li>foo: bar</li>`\n\nInternally Jade converts these statements to regular\nJavaScript loops such as `users.forEach(function(user){`,\nso lexical scope and nesting applies as it would with regular\nJavaScript:\n\n```jade\neach user in users\n  each role in user.roles\n    li= role\n```\n\n You may also use `for` if you prefer:\n\n```jade\nfor user in users\n  for role in user.roles\n    li= role\n```\n\n<a name=\"a10\"/>\n## Conditionals\n\n Jade conditionals are equivalent to those using the code (`-`) prefix,\n however allow you to ditch parenthesis to become more designer friendly,\n however keep in mind the expression given is _regular_ JavaScript:\n\n```jade\nfor user in users\n  if user.role == 'admin'\n    p #{user.name} is an admin\n  else\n    p= user.name\n```\n\n is equivalent to the following using vanilla JavaScript literals:\n\n```jade\nfor user in users\n  - if (user.role == 'admin')\n    p #{user.name} is an admin\n  - else\n    p= user.name\n```\n\n  Jade also provides have `unless` which is equivalent to `if (!(expr))`:\n\n```jade\nfor user in users\n  unless user.isAnonymous\n    p\n      | Click to view\n      a(href='/users/' + user.id)= user.name\n```\n\n<a name=\"a11\"/>\n## Template inheritance\n\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\n\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\n\n```jade\nhtml\n  head\n    h1 My Site - #{title}\n    block scripts\n      script(src='/jquery.js')\n  body\n    block content\n    block foot\n      #footer\n        p some footer content\n```\n\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\n\n```jade\nextends layout\n\nblock scripts\n  script(src='/jquery.js')\n  script(src='/pets.js')\n\nblock content\n  h1= title\n  each pet in pets\n    include pet\n```\n\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\n\n```jade\nextends regular-layout\n\nblock content\n  .sidebar\n    block sidebar\n      p nothing\n  .primary\n    block primary\n      p nothing\n```\n\n<a name=\"a12\"/>\n## Block append / prepend\n\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\n\n```jade\nhtml\n  head\n    block head\n      script(src='/vendor/jquery.js')\n      script(src='/vendor/caustic.js')\n    body\n      block content\n```\n\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\n\n```jade\nextends layout\n\nblock append head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n  When using `block append` or `block prepend` the `block` is optional:\n\n```jade\nextends layout\n\nappend head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n<a name=\"a13\"/>\n## Includes\n\n Includes allow you to statically include chunks of Jade,\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\n\n    ./layout.jade\n    ./includes/\n      ./head.jade\n      ./foot.jade\n\nand the following _layout.jade_:\n\n```jade\nhtml\n  include includes/head\n  body\n    h1 My Site\n    p Welcome to my super amazing site.\n    include includes/foot\n```\n\nboth includes _includes/head_ and _includes/foot_ are\nread relative to the `filename` option given to _layout.jade_,\nwhich should be an absolute path to this file, however Express does this for you. Include then parses these files, and injects the AST produced to render what you would expect:\n\n```html\n<html>\n  <head>\n    <title>My Site</title>\n    <script src=\"/javascripts/jquery.js\">\n    </script><script src=\"/javascripts/app.js\"></script>\n  </head>\n  <body>\n    <h1>My Site</h1>\n    <p>Welcome to my super lame site.</p>\n    <div id=\"footer\">\n      <p>Copyright>(c) foobar</p>\n    </div>\n  </body>\n</html>\n```\n\n As mentioned `include` can be used to include other content\n such as html or css. By providing an extension Jade will not\n assume that the file is Jade source and will include it as\n a literal:\n\n```jade\nhtml\n  body\n    include content.html\n```\n\n  Include directives may also accept a block, in which case the\n  the given block will be appended to the _last_ block defined\n  in the file. For example if `head.jade` contains:\n\n```jade\nhead\n  script(src='/jquery.js')\n```\n\n We may append values by providing a block to `include head`\n as shown below, adding the two scripts.\n\n```jade\nhtml\n  include head\n    script(src='/foo.js')\n    script(src='/bar.js')\n  body\n    h1 test\n```\n\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\n\n```jade\nhead\n  yield\n  script(src='/jquery.js')\n  script(src='/jquery.ui.js')\n```\n\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example support we have `user.jade` which utilizes a `user` variable.\n\n```jade\nh1= user.name\np= user.occupation\n```\n\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\n\n```jade\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\n\neach user in users\n  .user\n    include user\n```\n\nyielding:\n\n```html\n<div class=\"user\">\n  <h1>Tobi</h1>\n  <p>Ferret</p>\n</div>\n```\n\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\n\n```jade\neach person in users\n  .user\n    user = person\n    include user\n```\n\n<a name=\"a14\"/>\n## Mixins\n\n Mixins are converted to regular JavaScript functions in\n the compiled template that Jade constructs. Mixins may\n take arguments, though not required:\n\n```jade\nmixin list\n  ul\n    li foo\n    li bar\n    li baz\n```\n\n  Utilizing a mixin without args looks similar, just without a block:\n\n```jade\nh2 Groceries\nmixin list\n```\n\n  Mixins may take one or more arguments as well, the arguments\n  are regular javascripts expressions, so for example the following:\n\n```jade\nmixin pets(pets)\n  ul.pets\n    - each pet in pets\n      li= pet\n\nmixin profile(user)\n  .user\n    h2= user.name\n    mixin pets(user.pets)\n```\n\n   Would yield something similar to the following html:\n\n```html\n<div class=\"user\">\n  <h2>tj</h2>\n  <ul class=\"pets\">\n    <li>tobi</li>\n    <li>loki</li>\n    <li>jane</li>\n    <li>manny</li>\n  </ul>\n</div>\n```\n\n<a name=\"a15\"/>\n## Generated Output\n\n Suppose we have the following Jade:\n\n```jade\n- var title = 'yay'\nh1.title #{title}\np Just an example\n```\n\n When the `compileDebug` option is not explicitly `false`, Jade\n will compile the function instrumented with `__.lineno = n;`, which\n in the event of an exception is passed to `rethrow()` which constructs\n a useful message relative to the initial Jade input.\n\n```js\nfunction anonymous(locals) {\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\n  var rethrow = jade.rethrow;\n  try {\n    var attrs = jade.attrs, escape = jade.escape;\n    var buf = [];\n    with (locals || {}) {\n      var interp;\n      __.lineno = 1;\n       var title = 'yay'\n      __.lineno = 2;\n      buf.push('<h1');\n      buf.push(attrs({ \"class\": ('title') }));\n      buf.push('>');\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n      buf.push('</h1>');\n      __.lineno = 3;\n      buf.push('<p>');\n      buf.push('Just an example');\n      buf.push('</p>');\n    }\n    return buf.join(\"\");\n  } catch (err) {\n    rethrow(err, __.input, __.filename, __.lineno);\n  }\n}\n```\n\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\nto toString() compiled templates and avoid running the entire Jade library on\nthe client, increasing performance, and decreasing the amount of JavaScript\nrequired.\n\n```js\nfunction anonymous(locals) {\n  var attrs = jade.attrs, escape = jade.escape;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    var title = 'yay'\n    buf.push('<h1');\n    buf.push(attrs({ \"class\": ('title') }));\n    buf.push('>');\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n    buf.push('</h1>');\n    buf.push('<p>');\n    buf.push('Just an example');\n    buf.push('</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a16\"/>\n## Example Makefile\n\n  Below is an example Makefile used to compile _pages/*.jade_\n  into _pages/*.html_ files by simply executing `make`.\n\n```make\nJADE = $(shell find pages/*.jade)\nHTML = $(JADE:.jade=.html)\n\nall: $(HTML)\n\n%.html: %.jade\n    jade < $< --path $< > $@\n\nclean:\n    rm -f $(HTML)\n\n.PHONY: clean\n```\n\nthis can be combined with the `watch(1)` command to produce\na watcher-like behaviour:\n\n```bash\n$ watch make\n```\n\n<a name=\"a17\"/>\n## jade(1)\n\n```\n\nUsage: jade [options] [dir|file ...]\n\nOptions:\n\n  -h, --help         output usage information\n  -V, --version      output the version number\n  -o, --obj <str>    javascript options object\n  -O, --out <dir>    output the compiled html to <dir>\n  -p, --path <path>  filename used to resolve includes\n  -P, --pretty       compile pretty html output\n  -c, --client       compile for client-side runtime.js\n  -D, --no-debug     compile without debugging (smaller functions)\n\nExamples:\n\n  # translate jade the templates dir\n  $ jade templates\n\n  # create {foo,bar}.html\n  $ jade {foo,bar}.jade\n\n  # jade over stdio\n  $ jade < my.jade > my.html\n\n  # jade over stdio\n  $ echo \"h1 Jade!\" | jade\n\n  # foo, bar dirs rendering to /tmp\n  $ jade foo bar --out /tmp\n\n```\n\n<a name=\"a18\"/>\n## Tutorials\n\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\n\n<a name=\"a19\"/>\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"jade@0.27.5","dist":{"shasum":"379fedde074b30fcdcbd3799c205df15cddf47a0","tarball":"http://registry.npmjs.org/jade/-/jade-0.27.5.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.27.6":{"name":"jade","description":"Jade template engine","version":"0.27.6","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.6.1","mkdirp":"0.3.x"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"readme":" [![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\n\n# Jade - template engine\n\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\n\n## Test drive\n\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\n\n## README Contents\n\n- [Features](#a1)\n- [Implementations](#a2)\n- [Installation](#a3)\n- [Browser Support](#a4)\n- [Public API](#a5)\n- [Syntax](#a6)\n    - [Line Endings](#a6-1)\n    - [Tags](#a6-2)\n    - [Tag Text](#a6-3)\n    - [Comments](#a6-4)\n    - [Block Comments](#a6-5)\n    - [Nesting](#a6-6)\n    - [Block Expansion](#a6-7)\n    - [Case](#a6-8)\n    - [Attributes](#a6-9)\n    - [HTML](#a6-10)\n    - [Doctypes](#a6-11)\n- [Filters](#a7)\n- [Code](#a8)\n- [Iteration](#a9)\n- [Conditionals](#a10)\n- [Template inheritance](#a11)\n- [Block append / prepend](#a12)\n- [Includes](#a13)\n- [Mixins](#a14)\n- [Generated Output](#a15)\n- [Example Makefile](#a16)\n- [jade(1)](#a17)\n- [Tutorials](#a18)\n- [License](#a19)\n\n<a name=\"a1\"/>\n## Features\n\n  - client-side support\n  - great readability\n  - flexible indentation\n  - block-expansion\n  - mixins\n  - static includes\n  - attribute interpolation\n  - code is escaped by default for security\n  - contextual error reporting at compile &amp; run time\n  - executable for compiling jade templates via the command line\n  - html 5 mode (the default doctype)\n  - optional memory caching\n  - combine dynamic and static tag classes\n  - parse tree manipulation via _filters_\n  - template inheritance\n  - block append / prepend\n  - supports [Express JS](http://expressjs.com) out of the box\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\n  - block comments\n  - no tag prefix\n  - AST filters\n  - filters\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\n    - :cdata\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\n  - [html2jade](https://github.com/donpark/html2jade) converter\n\n<a name=\"a2\"/>\n## Implementations\n\n  - [php](http://github.com/everzet/jade.php)\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\n  - [ruby](http://github.com/stonean/slim)\n  - [python](https://github.com/SyrusAkbary/pyjade)\n  - [java](https://github.com/neuland/jade4j)\n\n<a name=\"a3\"/>\n## Installation\n\nvia npm:\n\n```bash\n$ npm install jade\n```\n\n<a name=\"a4\"/>\n## Browser Support\n\n To compile jade to a single file compatible for client-side use simply execute:\n\n```bash\n$ make jade.js\n```\n\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\n\n```bash\n$ make jade.min.js\n```\n\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\n\n```jade\np Hello #{name}\n```\n\n Can then be as small as the following generated function:\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\n  via `jade.attrs`, `jade.escape` etc.\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a5\"/>\n## Public API\n\n```js\nvar jade = require('jade');\n\n// Compile a function\nvar fn = jade.compile('string of jade', options);\nfn(locals);\n```\n\n### Options\n\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\n - `locals`    Local variable object\n - `filename`  Used in exceptions, and required when using includes\n - `debug`     Outputs tokens and function body generated\n - `compiler`  Compiler to replace jade's default\n - `compileDebug`  When `false` no debug instrumentation is compiled\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\n\n<a name=\"a6\"/>\n## Syntax\n\n<a name=\"a6-1\"/>\n### Line Endings\n\n**CRLF** and **CR** are converted to **LF** before parsing.\n\n<a name=\"a6-2\"/>\n### Tags\n\nA tag is simply a leading word:\n\n```jade\nhtml\n```\n\nfor example is converted to `<html></html>`\n\ntags can also have ids:\n\n```jade\ndiv#container\n```\n\nwhich would render `<div id=\"container\"></div>`\n\nhow about some classes?\n\n```jade\ndiv.user-details\n```\n\nrenders `<div class=\"user-details\"></div>`\n\nmultiple classes? _and_ an id? sure:\n\n```jade\ndiv#foo.bar.baz\n```\n\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\n\ndiv div div sure is annoying, how about:\n\n```jade\n#foo\n.bar\n```\n\nwhich is syntactic sugar for what we have already been doing, and outputs:\n\n```html\n<div id=\"foo\"></div><div class=\"bar\"></div>\n```\n\n<a name=\"a6-3\"/>\n### Tag Text\n\nSimply place some content after the tag:\n\n```jade\np wahoo!\n```\n\nrenders `<p>wahoo!</p>`.\n\nwell cool, but how about large bodies of text:\n\n```jade\np\n  | foo bar baz\n  | rawr rawr\n  | super cool\n  | go jade go\n```\n\nrenders `<p>foo bar baz rawr.....</p>`\n\ninterpolation? yup! both types of text can utilize interpolation,\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\n\n```jade\n#user #{name} &lt;#{email}&gt;\n```\n\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\n\nActually want `#{}` for some reason? escape it!\n\n```jade\np \\#{something}\n```\n\nnow we have `<p>#{something}</p>`\n\nWe can also utilize the unescaped variant `!{html}`, so the following\nwill result in a literal script tag:\n\n```jade\n- var html = \"<script></script>\"\n| !{html}\n```\n\nNested tags that also contain text can optionally use a text block:\n\n```jade\nlabel\n  | Username:\n  input(name='user[name]')\n```\n\nor immediate tag text:\n\n```jade\nlabel Username:\n  input(name='user[name]')\n```\n\nTags that accept _only_ text such as `script` and `style` do not\nneed the leading `|` character, for example:\n\n```jade\nhtml\n  head\n    title Example\n    script\n      if (foo) {\n        bar();\n      } else {\n        baz();\n      }\n```\n\nOnce again as an alternative, we may use a trailing `.` to indicate a text block, for example:\n\n```jade\np.\n  foo asdf\n  asdf\n   asdfasdfaf\n   asdf\n  asd.\n```\n\noutputs:\n\n```html\n<p>foo asdf\nasdf\n  asdfasdfaf\n  asdf\nasd.\n</p>\n```\n\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\n\n```jade\np .\n```\n\noutputs:\n\n```html\n<p>.</p>\n```\n\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\n\n```html\n<p>foo\\bar</p>\n```\n\nuse:\n\n```jade\np.\n  foo\\\\bar\n```\n\n<a name=\"a6-4\"/>\n### Comments\n\nSingle line comments currently look the same as JavaScript comments,\naka `//` and must be placed on their own line:\n\n```jade\n// just some paragraphs\np foo\np bar\n```\n\nwould output\n\n```html\n<!-- just some paragraphs -->\n<p>foo</p>\n<p>bar</p>\n```\n\nJade also supports unbuffered comments, by simply adding a hyphen:\n\n```jade\n//- will not output within markup\np foo\np bar\n```\n\noutputting\n\n```html\n<p>foo</p>\n<p>bar</p>\n```\n\n<a name=\"a6-5\"/>\n### Block Comments\n\n A block comment is legal as well:\n\n```jade\nbody\n  //\n    #content\n      h1 Example\n```\n\noutputting\n\n```html\n<body>\n  <!--\n  <div id=\"content\">\n    <h1>Example</h1>\n  </div>\n  -->\n</body>\n```\n\nJade supports conditional-comments as well, for example:\n\n```jade\nhead\n  //if lt IE 8\n    script(src='/ie-sucks.js')\n```\n\noutputs:\n\n```html\n<body>\n  <!--[if lt IE 8]>\n    <script src=\"/ie-sucks.js\"></script>\n  <![endif]-->\n</body>\n```\n\n<a name=\"a6-6\"/>\n### Nesting\n\n Jade supports nesting to define the tags in a natural way:\n\n```jade\nul\n  li.first\n    a(href='#') foo\n  li\n    a(href='#') bar\n  li.last\n    a(href='#') baz\n```\n\n<a name=\"a6-7\"/>\n### Block Expansion\n\n Block expansion allows you to create terse single-line nested tags,\n the following example is equivalent to the nesting example above.\n\n```jade\nul\n  li.first: a(href='#') foo\n  li: a(href='#') bar\n  li.last: a(href='#') baz\n```\n\n<a name=\"a6-8\"/>\n### Case\n\n The case statement takes the following form:\n\n```jade\nhtml\n  body\n    friends = 10\n    case friends\n      when 0\n        p you have no friends\n      when 1\n        p you have a friend\n      default\n        p you have #{friends} friends\n```\n\n Block expansion may also be used:\n\n```jade\nfriends = 5\n\nhtml\n  body\n    case friends\n      when 0: p you have no friends\n      when 1: p you have a friend\n      default: p you have #{friends} friends\n```\n\n<a name=\"a6-9\"/>\n### Attributes\n\nJade currently supports `(` and `)` as attribute delimiters.\n\n```jade\na(href='/login', title='View login page') Login\n```\n\nWhen a value is `undefined` or `null` the attribute is _not_ added,\nso this is fine, it will not compile `something=\"null\"`.\n\n```jade\ndiv(something=null)\n```\n\nBoolean attributes are also supported:\n\n```jade\ninput(type=\"checkbox\", checked)\n```\n\nBoolean attributes with code will only output the attribute when `true`:\n\n```jade\ninput(type=\"checkbox\", checked=someValue)\n```\n\nMultiple lines work too:\n\n```jade\ninput(type='checkbox',\n  name='agreement',\n  checked)\n```\n\nMultiple lines without the comma work fine:\n\n```jade\ninput(type='checkbox'\n  name='agreement'\n  checked)\n```\n\nFunky whitespace? fine:\n\n```jade\ninput(\n  type='checkbox'\n  name='agreement'\n  checked)\n```\n\nColons work:\n\n```jade\nrss(xmlns:atom=\"atom\")\n```\n\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\nwe could use regular javascript concatenation:\n\n```jade\na(href='/user/' + user.id)= user.name\n```\n\nor we could use jade's interpolation, which I added because everyone\nusing Ruby or CoffeeScript seems to think this is legal js..:\n\n```jade\na(href='/user/#{user.id}')= user.name\n```\n\nThe `class` attribute is special-cased when an array is given,\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\n\n```jade\nbody(class=bodyClasses)\n```\n\n<a name=\"a6-10\"/>\n### HTML\n\n Inline html is fine, we can use the pipe syntax to\n write arbitrary text, in this case some html:\n\n```jade\nhtml\n  body\n    | <h1>Title</h1>\n    | <p>foo bar baz</p>\n```\n\n Or we can use the trailing `.` to indicate to Jade that we\n only want text in this block, allowing us to omit the pipes:\n\n```jade\nhtml\n  body.\n    <h1>Title</h1>\n    <p>foo bar baz</p>\n```\n\n Both of these examples yield the same result:\n\n```html\n<html><body><h1>Title</h1>\n<p>foo bar baz</p>\n</body></html>\n```\n\n The same rule applies for anywhere you can have text\n in jade, raw html is fine:\n\n```jade\nhtml\n  body\n    h1 User <em>#{name}</em>\n```\n\n<a name=\"a6-11\"/>\n### Doctypes\n\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\n\n```jade\n!!!\n```\n\nor\n\n```jade\ndoctype\n```\n\nWill output the _html 5_  doctype, however:\n\n```jade\n!!! transitional\n```\n\nWill output the _transitional_ doctype.\n\nDoctypes are case-insensitive, so the following are equivalent:\n\n```jade\ndoctype Basic\ndoctype basic\n```\n\nit's also possible to simply pass a doctype literal:\n\n```jade\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\n```\n\nyielding:\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN>\n```\n\nBelow are the doctypes defined by default, which can easily be extended:\n\n```js\nvar doctypes = exports.doctypes = {\n  '5': '<!DOCTYPE html>',\n  'default': '<!DOCTYPE html>',\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n};\n```\n\nTo alter the default simply change:\n\n```js\njade.doctypes.default = 'whatever you want';\n```\n\n<a name=\"a7\"/>\n## Filters\n\nFilters are prefixed with `:`, for example `:markdown` and\npass the following block of text to an arbitrary function for processing. View the _features_\nat the top of this document for available filters.\n\n```jade\nbody\n  :markdown\n    Woah! jade _and_ markdown, very **cool**\n    we can even link to [stuff](http://google.com)\n```\n\nRenders:\n\n```html\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\n```\n\n<a name=\"a8\"/>\n## Code\n\nJade currently supports three classifications of executable code. The first\nis prefixed by `-`, and is not buffered:\n\n```jade\n- var foo = 'bar';\n```\n\nThis can be used for conditionals, or iteration:\n\n```jade\n- for (var key in obj)\n  p= obj[key]\n```\n\nDue to Jade's buffering techniques the following is valid as well:\n\n```jade\n- if (foo)\n  ul\n    li yay\n    li foo\n    li worked\n- else\n  p oh no! didnt work\n```\n\nHell, even verbose iteration:\n\n```jade\n- if (items.length)\n  ul\n    - items.forEach(function(item){\n      li= item\n    - })\n```\n\nAnything you want!\n\nNext up we have _escaped_ buffered code, which is used to\nbuffer a return value, which is prefixed by `=`:\n\n```jade\n- var foo = 'bar'\n= foo\nh1= foo\n```\n\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\nby default for security, however to output unescaped return values\nyou may use `!=`:\n\n```jade\np!= aVarContainingMoreHTML\n```\n\n Jade also has designer-friendly variants, making the literal JavaScript\n more expressive and declarative. For example the following assignments\n are equivalent, and the expression is still regular javascript:\n\n```jade\n- var foo = 'foo ' + 'bar'\nfoo = 'foo ' + 'bar'\n```\n\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\n\n```jade\nif foo == 'bar'\n  ul\n    li yay\n    li foo\n    li worked\nelse\n  p oh no! didnt work\n```\n\n<a name=\"a9\"/>\n## Iteration\n\n Along with vanilla JavaScript Jade also supports a subset of\n constructs that allow you to create more designer-friendly templates,\n one of these constructs is `each`, taking the form:\n\n```jade\neach VAL[, KEY] in OBJ\n```\n\nAn example iterating over an array:\n\n```jade\n- var items = [\"one\", \"two\", \"three\"]\neach item in items\n  li= item\n```\n\noutputs:\n\n```html\n<li>one</li>\n<li>two</li>\n<li>three</li>\n```\n\niterating an array with index:\n\n```jade\nitems = [\"one\", \"two\", \"three\"]\neach item, i in items\n  li #{item}: #{i}\n```\n\noutputs:\n\n```html\n<li>one: 0</li>\n<li>two: 1</li>\n<li>three: 2</li>\n```\n\niterating an object's keys and values:\n\n```jade\nobj = { foo: 'bar' }\neach val, key in obj\n  li #{key}: #{val}\n```\n\nwould output `<li>foo: bar</li>`\n\nInternally Jade converts these statements to regular\nJavaScript loops such as `users.forEach(function(user){`,\nso lexical scope and nesting applies as it would with regular\nJavaScript:\n\n```jade\neach user in users\n  each role in user.roles\n    li= role\n```\n\n You may also use `for` if you prefer:\n\n```jade\nfor user in users\n  for role in user.roles\n    li= role\n```\n\n<a name=\"a10\"/>\n## Conditionals\n\n Jade conditionals are equivalent to those using the code (`-`) prefix,\n however allow you to ditch parenthesis to become more designer friendly,\n however keep in mind the expression given is _regular_ JavaScript:\n\n```jade\nfor user in users\n  if user.role == 'admin'\n    p #{user.name} is an admin\n  else\n    p= user.name\n```\n\n is equivalent to the following using vanilla JavaScript literals:\n\n```jade\nfor user in users\n  - if (user.role == 'admin')\n    p #{user.name} is an admin\n  - else\n    p= user.name\n```\n\n  Jade also provides have `unless` which is equivalent to `if (!(expr))`:\n\n```jade\nfor user in users\n  unless user.isAnonymous\n    p\n      | Click to view\n      a(href='/users/' + user.id)= user.name\n```\n\n<a name=\"a11\"/>\n## Template inheritance\n\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\n\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\n\n```jade\nhtml\n  head\n    h1 My Site - #{title}\n    block scripts\n      script(src='/jquery.js')\n  body\n    block content\n    block foot\n      #footer\n        p some footer content\n```\n\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\n\n```jade\nextends layout\n\nblock scripts\n  script(src='/jquery.js')\n  script(src='/pets.js')\n\nblock content\n  h1= title\n  each pet in pets\n    include pet\n```\n\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\n\n```jade\nextends regular-layout\n\nblock content\n  .sidebar\n    block sidebar\n      p nothing\n  .primary\n    block primary\n      p nothing\n```\n\n<a name=\"a12\"/>\n## Block append / prepend\n\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\n\n```jade\nhtml\n  head\n    block head\n      script(src='/vendor/jquery.js')\n      script(src='/vendor/caustic.js')\n    body\n      block content\n```\n\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\n\n```jade\nextends layout\n\nblock append head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n  When using `block append` or `block prepend` the `block` is optional:\n\n```jade\nextends layout\n\nappend head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n<a name=\"a13\"/>\n## Includes\n\n Includes allow you to statically include chunks of Jade,\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\n\n    ./layout.jade\n    ./includes/\n      ./head.jade\n      ./foot.jade\n\nand the following _layout.jade_:\n\n```jade\nhtml\n  include includes/head\n  body\n    h1 My Site\n    p Welcome to my super amazing site.\n    include includes/foot\n```\n\nboth includes _includes/head_ and _includes/foot_ are\nread relative to the `filename` option given to _layout.jade_,\nwhich should be an absolute path to this file, however Express does this for you. Include then parses these files, and injects the AST produced to render what you would expect:\n\n```html\n<html>\n  <head>\n    <title>My Site</title>\n    <script src=\"/javascripts/jquery.js\">\n    </script><script src=\"/javascripts/app.js\"></script>\n  </head>\n  <body>\n    <h1>My Site</h1>\n    <p>Welcome to my super lame site.</p>\n    <div id=\"footer\">\n      <p>Copyright>(c) foobar</p>\n    </div>\n  </body>\n</html>\n```\n\n As mentioned `include` can be used to include other content\n such as html or css. By providing an extension Jade will not\n assume that the file is Jade source and will include it as\n a literal:\n\n```jade\nhtml\n  body\n    include content.html\n```\n\n  Include directives may also accept a block, in which case the\n  the given block will be appended to the _last_ block defined\n  in the file. For example if `head.jade` contains:\n\n```jade\nhead\n  script(src='/jquery.js')\n```\n\n We may append values by providing a block to `include head`\n as shown below, adding the two scripts.\n\n```jade\nhtml\n  include head\n    script(src='/foo.js')\n    script(src='/bar.js')\n  body\n    h1 test\n```\n\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\n\n```jade\nhead\n  yield\n  script(src='/jquery.js')\n  script(src='/jquery.ui.js')\n```\n\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example support we have `user.jade` which utilizes a `user` variable.\n\n```jade\nh1= user.name\np= user.occupation\n```\n\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\n\n```jade\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\n\neach user in users\n  .user\n    include user\n```\n\nyielding:\n\n```html\n<div class=\"user\">\n  <h1>Tobi</h1>\n  <p>Ferret</p>\n</div>\n```\n\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\n\n```jade\neach person in users\n  .user\n    user = person\n    include user\n```\n\n<a name=\"a14\"/>\n## Mixins\n\n Mixins are converted to regular JavaScript functions in\n the compiled template that Jade constructs. Mixins may\n take arguments, though not required:\n\n```jade\nmixin list\n  ul\n    li foo\n    li bar\n    li baz\n```\n\n  Utilizing a mixin without args looks similar, just without a block:\n\n```jade\nh2 Groceries\nmixin list\n```\n\n  Mixins may take one or more arguments as well, the arguments\n  are regular javascripts expressions, so for example the following:\n\n```jade\nmixin pets(pets)\n  ul.pets\n    - each pet in pets\n      li= pet\n\nmixin profile(user)\n  .user\n    h2= user.name\n    mixin pets(user.pets)\n```\n\n   Would yield something similar to the following html:\n\n```html\n<div class=\"user\">\n  <h2>tj</h2>\n  <ul class=\"pets\">\n    <li>tobi</li>\n    <li>loki</li>\n    <li>jane</li>\n    <li>manny</li>\n  </ul>\n</div>\n```\n\n<a name=\"a15\"/>\n## Generated Output\n\n Suppose we have the following Jade:\n\n```jade\n- var title = 'yay'\nh1.title #{title}\np Just an example\n```\n\n When the `compileDebug` option is not explicitly `false`, Jade\n will compile the function instrumented with `__.lineno = n;`, which\n in the event of an exception is passed to `rethrow()` which constructs\n a useful message relative to the initial Jade input.\n\n```js\nfunction anonymous(locals) {\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\n  var rethrow = jade.rethrow;\n  try {\n    var attrs = jade.attrs, escape = jade.escape;\n    var buf = [];\n    with (locals || {}) {\n      var interp;\n      __.lineno = 1;\n       var title = 'yay'\n      __.lineno = 2;\n      buf.push('<h1');\n      buf.push(attrs({ \"class\": ('title') }));\n      buf.push('>');\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n      buf.push('</h1>');\n      __.lineno = 3;\n      buf.push('<p>');\n      buf.push('Just an example');\n      buf.push('</p>');\n    }\n    return buf.join(\"\");\n  } catch (err) {\n    rethrow(err, __.input, __.filename, __.lineno);\n  }\n}\n```\n\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\nto toString() compiled templates and avoid running the entire Jade library on\nthe client, increasing performance, and decreasing the amount of JavaScript\nrequired.\n\n```js\nfunction anonymous(locals) {\n  var attrs = jade.attrs, escape = jade.escape;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    var title = 'yay'\n    buf.push('<h1');\n    buf.push(attrs({ \"class\": ('title') }));\n    buf.push('>');\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n    buf.push('</h1>');\n    buf.push('<p>');\n    buf.push('Just an example');\n    buf.push('</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a16\"/>\n## Example Makefile\n\n  Below is an example Makefile used to compile _pages/*.jade_\n  into _pages/*.html_ files by simply executing `make`.\n\n```make\nJADE = $(shell find pages/*.jade)\nHTML = $(JADE:.jade=.html)\n\nall: $(HTML)\n\n%.html: %.jade\n    jade < $< --path $< > $@\n\nclean:\n    rm -f $(HTML)\n\n.PHONY: clean\n```\n\nthis can be combined with the `watch(1)` command to produce\na watcher-like behaviour:\n\n```bash\n$ watch make\n```\n\n<a name=\"a17\"/>\n## jade(1)\n\n```\n\nUsage: jade [options] [dir|file ...]\n\nOptions:\n\n  -h, --help         output usage information\n  -V, --version      output the version number\n  -o, --obj <str>    javascript options object\n  -O, --out <dir>    output the compiled html to <dir>\n  -p, --path <path>  filename used to resolve includes\n  -P, --pretty       compile pretty html output\n  -c, --client       compile for client-side runtime.js\n  -D, --no-debug     compile without debugging (smaller functions)\n\nExamples:\n\n  # translate jade the templates dir\n  $ jade templates\n\n  # create {foo,bar}.html\n  $ jade {foo,bar}.jade\n\n  # jade over stdio\n  $ jade < my.jade > my.html\n\n  # jade over stdio\n  $ echo \"h1 Jade!\" | jade\n\n  # foo, bar dirs rendering to /tmp\n  $ jade foo bar --out /tmp\n\n```\n\n<a name=\"a18\"/>\n## Tutorials\n\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\n\n<a name=\"a19\"/>\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"jade@0.27.6","dist":{"shasum":"bf79918e1dc20cc5700829ce09a3d1102a91fdd9","tarball":"http://registry.npmjs.org/jade/-/jade-0.27.6.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.27.7":{"name":"jade","description":"Jade template engine","version":"0.27.7","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.6.1","mkdirp":"0.3.x","coffee-script":"~1.4.0"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"readme":" [![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\n\n# Jade - template engine\n\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\n\n## Test drive\n\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\n\n## README Contents\n\n- [Features](#a1)\n- [Implementations](#a2)\n- [Installation](#a3)\n- [Browser Support](#a4)\n- [Public API](#a5)\n- [Syntax](#a6)\n    - [Line Endings](#a6-1)\n    - [Tags](#a6-2)\n    - [Tag Text](#a6-3)\n    - [Comments](#a6-4)\n    - [Block Comments](#a6-5)\n    - [Nesting](#a6-6)\n    - [Block Expansion](#a6-7)\n    - [Case](#a6-8)\n    - [Attributes](#a6-9)\n    - [HTML](#a6-10)\n    - [Doctypes](#a6-11)\n- [Filters](#a7)\n- [Code](#a8)\n- [Iteration](#a9)\n- [Conditionals](#a10)\n- [Template inheritance](#a11)\n- [Block append / prepend](#a12)\n- [Includes](#a13)\n- [Mixins](#a14)\n- [Generated Output](#a15)\n- [Example Makefile](#a16)\n- [jade(1)](#a17)\n- [Tutorials](#a18)\n- [License](#a19)\n\n<a name=\"a1\"/>\n## Features\n\n  - client-side support\n  - great readability\n  - flexible indentation\n  - block-expansion\n  - mixins\n  - static includes\n  - attribute interpolation\n  - code is escaped by default for security\n  - contextual error reporting at compile &amp; run time\n  - executable for compiling jade templates via the command line\n  - html 5 mode (the default doctype)\n  - optional memory caching\n  - combine dynamic and static tag classes\n  - parse tree manipulation via _filters_\n  - template inheritance\n  - block append / prepend\n  - supports [Express JS](http://expressjs.com) out of the box\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\n  - block comments\n  - no tag prefix\n  - AST filters\n  - filters\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\n    - :cdata\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\n  - [html2jade](https://github.com/donpark/html2jade) converter\n\n<a name=\"a2\"/>\n## Implementations\n\n  - [php](http://github.com/everzet/jade.php)\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\n  - [ruby](http://github.com/stonean/slim)\n  - [python](https://github.com/SyrusAkbary/pyjade)\n  - [java](https://github.com/neuland/jade4j)\n\n<a name=\"a3\"/>\n## Installation\n\nvia npm:\n\n```bash\n$ npm install jade\n```\n\n<a name=\"a4\"/>\n## Browser Support\n\n To compile jade to a single file compatible for client-side use simply execute:\n\n```bash\n$ make jade.js\n```\n\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\n\n```bash\n$ make jade.min.js\n```\n\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\n\n```jade\np Hello #{name}\n```\n\n Can then be as small as the following generated function:\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\n  via `jade.attrs`, `jade.escape` etc.\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a5\"/>\n## Public API\n\n```js\nvar jade = require('jade');\n\n// Compile a function\nvar fn = jade.compile('string of jade', options);\nfn(locals);\n```\n\n### Options\n\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\n - `locals`    Local variable object\n - `filename`  Used in exceptions, and required when using includes\n - `debug`     Outputs tokens and function body generated\n - `compiler`  Compiler to replace jade's default\n - `compileDebug`  When `false` no debug instrumentation is compiled\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\n\n<a name=\"a6\"/>\n## Syntax\n\n<a name=\"a6-1\"/>\n### Line Endings\n\n**CRLF** and **CR** are converted to **LF** before parsing.\n\n<a name=\"a6-2\"/>\n### Tags\n\nA tag is simply a leading word:\n\n```jade\nhtml\n```\n\nfor example is converted to `<html></html>`\n\ntags can also have ids:\n\n```jade\ndiv#container\n```\n\nwhich would render `<div id=\"container\"></div>`\n\nhow about some classes?\n\n```jade\ndiv.user-details\n```\n\nrenders `<div class=\"user-details\"></div>`\n\nmultiple classes? _and_ an id? sure:\n\n```jade\ndiv#foo.bar.baz\n```\n\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\n\ndiv div div sure is annoying, how about:\n\n```jade\n#foo\n.bar\n```\n\nwhich is syntactic sugar for what we have already been doing, and outputs:\n\n```html\n<div id=\"foo\"></div><div class=\"bar\"></div>\n```\n\n<a name=\"a6-3\"/>\n### Tag Text\n\nSimply place some content after the tag:\n\n```jade\np wahoo!\n```\n\nrenders `<p>wahoo!</p>`.\n\nwell cool, but how about large bodies of text:\n\n```jade\np\n  | foo bar baz\n  | rawr rawr\n  | super cool\n  | go jade go\n```\n\nrenders `<p>foo bar baz rawr.....</p>`\n\ninterpolation? yup! both types of text can utilize interpolation,\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\n\n```jade\n#user #{name} &lt;#{email}&gt;\n```\n\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\n\nActually want `#{}` for some reason? escape it!\n\n```jade\np \\#{something}\n```\n\nnow we have `<p>#{something}</p>`\n\nWe can also utilize the unescaped variant `!{html}`, so the following\nwill result in a literal script tag:\n\n```jade\n- var html = \"<script></script>\"\n| !{html}\n```\n\nNested tags that also contain text can optionally use a text block:\n\n```jade\nlabel\n  | Username:\n  input(name='user[name]')\n```\n\nor immediate tag text:\n\n```jade\nlabel Username:\n  input(name='user[name]')\n```\n\nTags that accept _only_ text such as `script` and `style` do not\nneed the leading `|` character, for example:\n\n```jade\nhtml\n  head\n    title Example\n    script\n      if (foo) {\n        bar();\n      } else {\n        baz();\n      }\n```\n\nOnce again as an alternative, we may use a trailing `.` to indicate a text block, for example:\n\n```jade\np.\n  foo asdf\n  asdf\n   asdfasdfaf\n   asdf\n  asd.\n```\n\noutputs:\n\n```html\n<p>foo asdf\nasdf\n  asdfasdfaf\n  asdf\nasd.\n</p>\n```\n\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\n\n```jade\np .\n```\n\noutputs:\n\n```html\n<p>.</p>\n```\n\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\n\n```html\n<p>foo\\bar</p>\n```\n\nuse:\n\n```jade\np.\n  foo\\\\bar\n```\n\n<a name=\"a6-4\"/>\n### Comments\n\nSingle line comments currently look the same as JavaScript comments,\naka `//` and must be placed on their own line:\n\n```jade\n// just some paragraphs\np foo\np bar\n```\n\nwould output\n\n```html\n<!-- just some paragraphs -->\n<p>foo</p>\n<p>bar</p>\n```\n\nJade also supports unbuffered comments, by simply adding a hyphen:\n\n```jade\n//- will not output within markup\np foo\np bar\n```\n\noutputting\n\n```html\n<p>foo</p>\n<p>bar</p>\n```\n\n<a name=\"a6-5\"/>\n### Block Comments\n\n A block comment is legal as well:\n\n```jade\nbody\n  //\n    #content\n      h1 Example\n```\n\noutputting\n\n```html\n<body>\n  <!--\n  <div id=\"content\">\n    <h1>Example</h1>\n  </div>\n  -->\n</body>\n```\n\nJade supports conditional-comments as well, for example:\n\n```jade\nhead\n  //if lt IE 8\n    script(src='/ie-sucks.js')\n```\n\noutputs:\n\n```html\n<body>\n  <!--[if lt IE 8]>\n    <script src=\"/ie-sucks.js\"></script>\n  <![endif]-->\n</body>\n```\n\n<a name=\"a6-6\"/>\n### Nesting\n\n Jade supports nesting to define the tags in a natural way:\n\n```jade\nul\n  li.first\n    a(href='#') foo\n  li\n    a(href='#') bar\n  li.last\n    a(href='#') baz\n```\n\n<a name=\"a6-7\"/>\n### Block Expansion\n\n Block expansion allows you to create terse single-line nested tags,\n the following example is equivalent to the nesting example above.\n\n```jade\nul\n  li.first: a(href='#') foo\n  li: a(href='#') bar\n  li.last: a(href='#') baz\n```\n\n<a name=\"a6-8\"/>\n### Case\n\n The case statement takes the following form:\n\n```jade\nhtml\n  body\n    friends = 10\n    case friends\n      when 0\n        p you have no friends\n      when 1\n        p you have a friend\n      default\n        p you have #{friends} friends\n```\n\n Block expansion may also be used:\n\n```jade\nfriends = 5\n\nhtml\n  body\n    case friends\n      when 0: p you have no friends\n      when 1: p you have a friend\n      default: p you have #{friends} friends\n```\n\n<a name=\"a6-9\"/>\n### Attributes\n\nJade currently supports `(` and `)` as attribute delimiters.\n\n```jade\na(href='/login', title='View login page') Login\n```\n\nWhen a value is `undefined` or `null` the attribute is _not_ added,\nso this is fine, it will not compile `something=\"null\"`.\n\n```jade\ndiv(something=null)\n```\n\nBoolean attributes are also supported:\n\n```jade\ninput(type=\"checkbox\", checked)\n```\n\nBoolean attributes with code will only output the attribute when `true`:\n\n```jade\ninput(type=\"checkbox\", checked=someValue)\n```\n\nMultiple lines work too:\n\n```jade\ninput(type='checkbox',\n  name='agreement',\n  checked)\n```\n\nMultiple lines without the comma work fine:\n\n```jade\ninput(type='checkbox'\n  name='agreement'\n  checked)\n```\n\nFunky whitespace? fine:\n\n```jade\ninput(\n  type='checkbox'\n  name='agreement'\n  checked)\n```\n\nColons work:\n\n```jade\nrss(xmlns:atom=\"atom\")\n```\n\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\nwe could use regular javascript concatenation:\n\n```jade\na(href='/user/' + user.id)= user.name\n```\n\nor we could use jade's interpolation, which I added because everyone\nusing Ruby or CoffeeScript seems to think this is legal js..:\n\n```jade\na(href='/user/#{user.id}')= user.name\n```\n\nThe `class` attribute is special-cased when an array is given,\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\n\n```jade\nbody(class=bodyClasses)\n```\n\n<a name=\"a6-10\"/>\n### HTML\n\n Inline html is fine, we can use the pipe syntax to\n write arbitrary text, in this case some html:\n\n```jade\nhtml\n  body\n    | <h1>Title</h1>\n    | <p>foo bar baz</p>\n```\n\n Or we can use the trailing `.` to indicate to Jade that we\n only want text in this block, allowing us to omit the pipes:\n\n```jade\nhtml\n  body.\n    <h1>Title</h1>\n    <p>foo bar baz</p>\n```\n\n Both of these examples yield the same result:\n\n```html\n<html><body><h1>Title</h1>\n<p>foo bar baz</p>\n</body></html>\n```\n\n The same rule applies for anywhere you can have text\n in jade, raw html is fine:\n\n```jade\nhtml\n  body\n    h1 User <em>#{name}</em>\n```\n\n<a name=\"a6-11\"/>\n### Doctypes\n\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\n\n```jade\n!!!\n```\n\nor\n\n```jade\ndoctype\n```\n\nWill output the _html 5_  doctype, however:\n\n```jade\n!!! transitional\n```\n\nWill output the _transitional_ doctype.\n\nDoctypes are case-insensitive, so the following are equivalent:\n\n```jade\ndoctype Basic\ndoctype basic\n```\n\nit's also possible to simply pass a doctype literal:\n\n```jade\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\n```\n\nyielding:\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN>\n```\n\nBelow are the doctypes defined by default, which can easily be extended:\n\n```js\nvar doctypes = exports.doctypes = {\n  '5': '<!DOCTYPE html>',\n  'default': '<!DOCTYPE html>',\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n};\n```\n\nTo alter the default simply change:\n\n```js\njade.doctypes.default = 'whatever you want';\n```\n\n<a name=\"a7\"/>\n## Filters\n\nFilters are prefixed with `:`, for example `:markdown` and\npass the following block of text to an arbitrary function for processing. View the _features_\nat the top of this document for available filters.\n\n```jade\nbody\n  :markdown\n    Woah! jade _and_ markdown, very **cool**\n    we can even link to [stuff](http://google.com)\n```\n\nRenders:\n\n```html\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\n```\n\n<a name=\"a8\"/>\n## Code\n\nJade currently supports three classifications of executable code. The first\nis prefixed by `-`, and is not buffered:\n\n```jade\n- var foo = 'bar';\n```\n\nThis can be used for conditionals, or iteration:\n\n```jade\n- for (var key in obj)\n  p= obj[key]\n```\n\nDue to Jade's buffering techniques the following is valid as well:\n\n```jade\n- if (foo)\n  ul\n    li yay\n    li foo\n    li worked\n- else\n  p oh no! didnt work\n```\n\nHell, even verbose iteration:\n\n```jade\n- if (items.length)\n  ul\n    - items.forEach(function(item){\n      li= item\n    - })\n```\n\nAnything you want!\n\nNext up we have _escaped_ buffered code, which is used to\nbuffer a return value, which is prefixed by `=`:\n\n```jade\n- var foo = 'bar'\n= foo\nh1= foo\n```\n\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\nby default for security, however to output unescaped return values\nyou may use `!=`:\n\n```jade\np!= aVarContainingMoreHTML\n```\n\n Jade also has designer-friendly variants, making the literal JavaScript\n more expressive and declarative. For example the following assignments\n are equivalent, and the expression is still regular javascript:\n\n```jade\n- var foo = 'foo ' + 'bar'\nfoo = 'foo ' + 'bar'\n```\n\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\n\n```jade\nif foo == 'bar'\n  ul\n    li yay\n    li foo\n    li worked\nelse\n  p oh no! didnt work\n```\n\n<a name=\"a9\"/>\n## Iteration\n\n Along with vanilla JavaScript Jade also supports a subset of\n constructs that allow you to create more designer-friendly templates,\n one of these constructs is `each`, taking the form:\n\n```jade\neach VAL[, KEY] in OBJ\n```\n\nAn example iterating over an array:\n\n```jade\n- var items = [\"one\", \"two\", \"three\"]\neach item in items\n  li= item\n```\n\noutputs:\n\n```html\n<li>one</li>\n<li>two</li>\n<li>three</li>\n```\n\niterating an array with index:\n\n```jade\nitems = [\"one\", \"two\", \"three\"]\neach item, i in items\n  li #{item}: #{i}\n```\n\noutputs:\n\n```html\n<li>one: 0</li>\n<li>two: 1</li>\n<li>three: 2</li>\n```\n\niterating an object's keys and values:\n\n```jade\nobj = { foo: 'bar' }\neach val, key in obj\n  li #{key}: #{val}\n```\n\nwould output `<li>foo: bar</li>`\n\nInternally Jade converts these statements to regular\nJavaScript loops such as `users.forEach(function(user){`,\nso lexical scope and nesting applies as it would with regular\nJavaScript:\n\n```jade\neach user in users\n  each role in user.roles\n    li= role\n```\n\n You may also use `for` if you prefer:\n\n```jade\nfor user in users\n  for role in user.roles\n    li= role\n```\n\n<a name=\"a10\"/>\n## Conditionals\n\n Jade conditionals are equivalent to those using the code (`-`) prefix,\n however allow you to ditch parenthesis to become more designer friendly,\n however keep in mind the expression given is _regular_ JavaScript:\n\n```jade\nfor user in users\n  if user.role == 'admin'\n    p #{user.name} is an admin\n  else\n    p= user.name\n```\n\n is equivalent to the following using vanilla JavaScript literals:\n\n```jade\nfor user in users\n  - if (user.role == 'admin')\n    p #{user.name} is an admin\n  - else\n    p= user.name\n```\n\n  Jade also provides have `unless` which is equivalent to `if (!(expr))`:\n\n```jade\nfor user in users\n  unless user.isAnonymous\n    p\n      | Click to view\n      a(href='/users/' + user.id)= user.name\n```\n\n<a name=\"a11\"/>\n## Template inheritance\n\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\n\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\n\n```jade\nhtml\n  head\n    h1 My Site - #{title}\n    block scripts\n      script(src='/jquery.js')\n  body\n    block content\n    block foot\n      #footer\n        p some footer content\n```\n\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\n\n```jade\nextends layout\n\nblock scripts\n  script(src='/jquery.js')\n  script(src='/pets.js')\n\nblock content\n  h1= title\n  each pet in pets\n    include pet\n```\n\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\n\n```jade\nextends regular-layout\n\nblock content\n  .sidebar\n    block sidebar\n      p nothing\n  .primary\n    block primary\n      p nothing\n```\n\n<a name=\"a12\"/>\n## Block append / prepend\n\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\n\n```jade\nhtml\n  head\n    block head\n      script(src='/vendor/jquery.js')\n      script(src='/vendor/caustic.js')\n    body\n      block content\n```\n\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\n\n```jade\nextends layout\n\nblock append head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n  When using `block append` or `block prepend` the `block` is optional:\n\n```jade\nextends layout\n\nappend head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n<a name=\"a13\"/>\n## Includes\n\n Includes allow you to statically include chunks of Jade,\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\n\n    ./layout.jade\n    ./includes/\n      ./head.jade\n      ./foot.jade\n\nand the following _layout.jade_:\n\n```jade\nhtml\n  include includes/head\n  body\n    h1 My Site\n    p Welcome to my super amazing site.\n    include includes/foot\n```\n\nboth includes _includes/head_ and _includes/foot_ are\nread relative to the `filename` option given to _layout.jade_,\nwhich should be an absolute path to this file, however Express does this for you. Include then parses these files, and injects the AST produced to render what you would expect:\n\n```html\n<html>\n  <head>\n    <title>My Site</title>\n    <script src=\"/javascripts/jquery.js\">\n    </script><script src=\"/javascripts/app.js\"></script>\n  </head>\n  <body>\n    <h1>My Site</h1>\n    <p>Welcome to my super lame site.</p>\n    <div id=\"footer\">\n      <p>Copyright>(c) foobar</p>\n    </div>\n  </body>\n</html>\n```\n\n As mentioned `include` can be used to include other content\n such as html or css. By providing an extension Jade will not\n assume that the file is Jade source and will include it as\n a literal:\n\n```jade\nhtml\n  body\n    include content.html\n```\n\n  Include directives may also accept a block, in which case the\n  the given block will be appended to the _last_ block defined\n  in the file. For example if `head.jade` contains:\n\n```jade\nhead\n  script(src='/jquery.js')\n```\n\n We may append values by providing a block to `include head`\n as shown below, adding the two scripts.\n\n```jade\nhtml\n  include head\n    script(src='/foo.js')\n    script(src='/bar.js')\n  body\n    h1 test\n```\n\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\n\n```jade\nhead\n  yield\n  script(src='/jquery.js')\n  script(src='/jquery.ui.js')\n```\n\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example suppose we have `user.jade` which utilizes a `user` variable.\n\n```jade\nh1= user.name\np= user.occupation\n```\n\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\n\n```jade\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\n\neach user in users\n  .user\n    include user\n```\n\nyielding:\n\n```html\n<div class=\"user\">\n  <h1>Tobi</h1>\n  <p>Ferret</p>\n</div>\n```\n\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\n\n```jade\neach person in users\n  .user\n    user = person\n    include user\n```\n\n<a name=\"a14\"/>\n## Mixins\n\n Mixins are converted to regular JavaScript functions in\n the compiled template that Jade constructs. Mixins may\n take arguments, though not required:\n\n```jade\nmixin list\n  ul\n    li foo\n    li bar\n    li baz\n```\n\n  Utilizing a mixin without args looks similar, just without a block:\n\n```jade\nh2 Groceries\nmixin list\n```\n\n  Mixins may take one or more arguments as well, the arguments\n  are regular javascripts expressions, so for example the following:\n\n```jade\nmixin pets(pets)\n  ul.pets\n    - each pet in pets\n      li= pet\n\nmixin profile(user)\n  .user\n    h2= user.name\n    mixin pets(user.pets)\n```\n\n   Would yield something similar to the following html:\n\n```html\n<div class=\"user\">\n  <h2>tj</h2>\n  <ul class=\"pets\">\n    <li>tobi</li>\n    <li>loki</li>\n    <li>jane</li>\n    <li>manny</li>\n  </ul>\n</div>\n```\n\n<a name=\"a15\"/>\n## Generated Output\n\n Suppose we have the following Jade:\n\n```jade\n- var title = 'yay'\nh1.title #{title}\np Just an example\n```\n\n When the `compileDebug` option is not explicitly `false`, Jade\n will compile the function instrumented with `__.lineno = n;`, which\n in the event of an exception is passed to `rethrow()` which constructs\n a useful message relative to the initial Jade input.\n\n```js\nfunction anonymous(locals) {\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\n  var rethrow = jade.rethrow;\n  try {\n    var attrs = jade.attrs, escape = jade.escape;\n    var buf = [];\n    with (locals || {}) {\n      var interp;\n      __.lineno = 1;\n       var title = 'yay'\n      __.lineno = 2;\n      buf.push('<h1');\n      buf.push(attrs({ \"class\": ('title') }));\n      buf.push('>');\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n      buf.push('</h1>');\n      __.lineno = 3;\n      buf.push('<p>');\n      buf.push('Just an example');\n      buf.push('</p>');\n    }\n    return buf.join(\"\");\n  } catch (err) {\n    rethrow(err, __.input, __.filename, __.lineno);\n  }\n}\n```\n\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\nto toString() compiled templates and avoid running the entire Jade library on\nthe client, increasing performance, and decreasing the amount of JavaScript\nrequired.\n\n```js\nfunction anonymous(locals) {\n  var attrs = jade.attrs, escape = jade.escape;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    var title = 'yay'\n    buf.push('<h1');\n    buf.push(attrs({ \"class\": ('title') }));\n    buf.push('>');\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n    buf.push('</h1>');\n    buf.push('<p>');\n    buf.push('Just an example');\n    buf.push('</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a16\"/>\n## Example Makefile\n\n  Below is an example Makefile used to compile _pages/*.jade_\n  into _pages/*.html_ files by simply executing `make`.\n\n```make\nJADE = $(shell find pages/*.jade)\nHTML = $(JADE:.jade=.html)\n\nall: $(HTML)\n\n%.html: %.jade\n    jade < $< --path $< > $@\n\nclean:\n    rm -f $(HTML)\n\n.PHONY: clean\n```\n\nthis can be combined with the `watch(1)` command to produce\na watcher-like behaviour:\n\n```bash\n$ watch make\n```\n\n<a name=\"a17\"/>\n## jade(1)\n\n```\n\nUsage: jade [options] [dir|file ...]\n\nOptions:\n\n  -h, --help         output usage information\n  -V, --version      output the version number\n  -o, --obj <str>    javascript options object\n  -O, --out <dir>    output the compiled html to <dir>\n  -p, --path <path>  filename used to resolve includes\n  -P, --pretty       compile pretty html output\n  -c, --client       compile for client-side runtime.js\n  -D, --no-debug     compile without debugging (smaller functions)\n\nExamples:\n\n  # translate jade the templates dir\n  $ jade templates\n\n  # create {foo,bar}.html\n  $ jade {foo,bar}.jade\n\n  # jade over stdio\n  $ jade < my.jade > my.html\n\n  # jade over stdio\n  $ echo \"h1 Jade!\" | jade\n\n  # foo, bar dirs rendering to /tmp\n  $ jade foo bar --out /tmp\n\n```\n\n<a name=\"a18\"/>\n## Tutorials\n\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\n\n<a name=\"a19\"/>\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"jade@0.27.7","dist":{"shasum":"b157e3133789a5724cbdddd45341c7590da927aa","tarball":"http://registry.npmjs.org/jade/-/jade-0.27.7.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.28.0":{"name":"jade","description":"Jade template engine","version":"0.28.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.6.1","mkdirp":"0.3.x","coffee-script":"~1.4.0"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"readme":" [![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\n\n# Jade - template engine\n\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\n\n## Test drive\n\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\n\n## README Contents\n\n- [Features](#a1)\n- [Implementations](#a2)\n- [Installation](#a3)\n- [Browser Support](#a4)\n- [Public API](#a5)\n- [Syntax](#a6)\n    - [Line Endings](#a6-1)\n    - [Tags](#a6-2)\n    - [Tag Text](#a6-3)\n    - [Comments](#a6-4)\n    - [Block Comments](#a6-5)\n    - [Nesting](#a6-6)\n    - [Block Expansion](#a6-7)\n    - [Case](#a6-8)\n    - [Attributes](#a6-9)\n    - [HTML](#a6-10)\n    - [Doctypes](#a6-11)\n- [Filters](#a7)\n- [Code](#a8)\n- [Iteration](#a9)\n- [Conditionals](#a10)\n- [Template inheritance](#a11)\n- [Block append / prepend](#a12)\n- [Includes](#a13)\n- [Mixins](#a14)\n- [Generated Output](#a15)\n- [Example Makefile](#a16)\n- [jade(1)](#a17)\n- [Tutorials](#a18)\n- [License](#a19)\n\n<a name=\"a1\"/>\n## Features\n\n  - client-side support\n  - great readability\n  - flexible indentation\n  - block-expansion\n  - mixins\n  - static includes\n  - attribute interpolation\n  - code is escaped by default for security\n  - contextual error reporting at compile &amp; run time\n  - executable for compiling jade templates via the command line\n  - html 5 mode (the default doctype)\n  - optional memory caching\n  - combine dynamic and static tag classes\n  - parse tree manipulation via _filters_\n  - template inheritance\n  - block append / prepend\n  - supports [Express JS](http://expressjs.com) out of the box\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\n  - block comments\n  - no tag prefix\n  - filters\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\n    - :cdata\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\n  - [html2jade](https://github.com/donpark/html2jade) converter\n\n<a name=\"a2\"/>\n## Implementations\n\n  - [php](http://github.com/everzet/jade.php)\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\n  - [ruby](http://github.com/stonean/slim)\n  - [python](https://github.com/SyrusAkbary/pyjade)\n  - [java](https://github.com/neuland/jade4j)\n\n<a name=\"a3\"/>\n## Installation\n\nvia npm:\n\n```bash\n$ npm install jade\n```\n\n<a name=\"a4\"/>\n## Browser Support\n\n To compile jade to a single file compatible for client-side use simply execute:\n\n```bash\n$ make jade.js\n```\n\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\n\n```bash\n$ make jade.min.js\n```\n\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\n\n```jade\np Hello #{name}\n```\n\n Can then be as small as the following generated function:\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\n  via `jade.attrs`, `jade.escape` etc.\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a5\"/>\n## Public API\n\n```js\nvar jade = require('jade');\n\n// Compile a function\nvar fn = jade.compile('string of jade', options);\nfn(locals);\n```\n\n### Options\n\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\n - `locals`    Local variable object\n - `filename`  Used in exceptions, and required when using includes\n - `debug`     Outputs tokens and function body generated\n - `compiler`  Compiler to replace jade's default\n - `compileDebug`  When `false` no debug instrumentation is compiled\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\n\n<a name=\"a6\"/>\n## Syntax\n\n<a name=\"a6-1\"/>\n### Line Endings\n\n**CRLF** and **CR** are converted to **LF** before parsing.\n\n<a name=\"a6-2\"/>\n### Tags\n\nA tag is simply a leading word:\n\n```jade\nhtml\n```\n\nfor example is converted to `<html></html>`\n\ntags can also have ids:\n\n```jade\ndiv#container\n```\n\nwhich would render `<div id=\"container\"></div>`\n\nhow about some classes?\n\n```jade\ndiv.user-details\n```\n\nrenders `<div class=\"user-details\"></div>`\n\nmultiple classes? _and_ an id? sure:\n\n```jade\ndiv#foo.bar.baz\n```\n\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\n\ndiv div div sure is annoying, how about:\n\n```jade\n#foo\n.bar\n```\n\nwhich is syntactic sugar for what we have already been doing, and outputs:\n\n```html\n<div id=\"foo\"></div><div class=\"bar\"></div>\n```\n\n<a name=\"a6-3\"/>\n### Tag Text\n\nSimply place some content after the tag:\n\n```jade\np wahoo!\n```\n\nrenders `<p>wahoo!</p>`.\n\nwell cool, but how about large bodies of text:\n\n```jade\np\n  | foo bar baz\n  | rawr rawr\n  | super cool\n  | go jade go\n```\n\nrenders `<p>foo bar baz rawr.....</p>`\n\ninterpolation? yup! both types of text can utilize interpolation,\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\n\n```jade\n#user #{name} &lt;#{email}&gt;\n```\n\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\n\nActually want `#{}` for some reason? escape it!\n\n```jade\np \\#{something}\n```\n\nnow we have `<p>#{something}</p>`\n\nWe can also utilize the unescaped variant `!{html}`, so the following\nwill result in a literal script tag:\n\n```jade\n- var html = \"<script></script>\"\n| !{html}\n```\n\nNested tags that also contain text can optionally use a text block:\n\n```jade\nlabel\n  | Username:\n  input(name='user[name]')\n```\n\nor immediate tag text:\n\n```jade\nlabel Username:\n  input(name='user[name]')\n```\n\nTags that accept _only_ text such as `script` and `style` do not\nneed the leading `|` character, for example:\n\n```jade\nhtml\n  head\n    title Example\n    script\n      if (foo) {\n        bar();\n      } else {\n        baz();\n      }\n```\n\nOnce again as an alternative, we may use a trailing `.` to indicate a text block, for example:\n\n```jade\np.\n  foo asdf\n  asdf\n   asdfasdfaf\n   asdf\n  asd.\n```\n\noutputs:\n\n```html\n<p>foo asdf\nasdf\n  asdfasdfaf\n  asdf\nasd.\n</p>\n```\n\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\n\n```jade\np .\n```\n\noutputs:\n\n```html\n<p>.</p>\n```\n\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\n\n```html\n<p>foo\\bar</p>\n```\n\nuse:\n\n```jade\np.\n  foo\\\\bar\n```\n\n<a name=\"a6-4\"/>\n### Comments\n\nSingle line comments currently look the same as JavaScript comments,\naka `//` and must be placed on their own line:\n\n```jade\n// just some paragraphs\np foo\np bar\n```\n\nwould output\n\n```html\n<!-- just some paragraphs -->\n<p>foo</p>\n<p>bar</p>\n```\n\nJade also supports unbuffered comments, by simply adding a hyphen:\n\n```jade\n//- will not output within markup\np foo\np bar\n```\n\noutputting\n\n```html\n<p>foo</p>\n<p>bar</p>\n```\n\n<a name=\"a6-5\"/>\n### Block Comments\n\n A block comment is legal as well:\n\n```jade\nbody\n  //\n    #content\n      h1 Example\n```\n\noutputting\n\n```html\n<body>\n  <!--\n  <div id=\"content\">\n    <h1>Example</h1>\n  </div>\n  -->\n</body>\n```\n\nJade supports conditional-comments as well, for example:\n\n```jade\nhead\n  //if lt IE 8\n    script(src='/ie-sucks.js')\n```\n\noutputs:\n\n```html\n<body>\n  <!--[if lt IE 8]>\n    <script src=\"/ie-sucks.js\"></script>\n  <![endif]-->\n</body>\n```\n\n<a name=\"a6-6\"/>\n### Nesting\n\n Jade supports nesting to define the tags in a natural way:\n\n```jade\nul\n  li.first\n    a(href='#') foo\n  li\n    a(href='#') bar\n  li.last\n    a(href='#') baz\n```\n\n<a name=\"a6-7\"/>\n### Block Expansion\n\n Block expansion allows you to create terse single-line nested tags,\n the following example is equivalent to the nesting example above.\n\n```jade\nul\n  li.first: a(href='#') foo\n  li: a(href='#') bar\n  li.last: a(href='#') baz\n```\n\n<a name=\"a6-8\"/>\n### Case\n\n The case statement takes the following form:\n\n```jade\nhtml\n  body\n    friends = 10\n    case friends\n      when 0\n        p you have no friends\n      when 1\n        p you have a friend\n      default\n        p you have #{friends} friends\n```\n\n Block expansion may also be used:\n\n```jade\nfriends = 5\n\nhtml\n  body\n    case friends\n      when 0: p you have no friends\n      when 1: p you have a friend\n      default: p you have #{friends} friends\n```\n\n<a name=\"a6-9\"/>\n### Attributes\n\nJade currently supports `(` and `)` as attribute delimiters.\n\n```jade\na(href='/login', title='View login page') Login\n```\n\nWhen a value is `undefined` or `null` the attribute is _not_ added,\nso this is fine, it will not compile `something=\"null\"`.\n\n```jade\ndiv(something=null)\n```\n\nBoolean attributes are also supported:\n\n```jade\ninput(type=\"checkbox\", checked)\n```\n\nBoolean attributes with code will only output the attribute when `true`:\n\n```jade\ninput(type=\"checkbox\", checked=someValue)\n```\n\nMultiple lines work too:\n\n```jade\ninput(type='checkbox',\n  name='agreement',\n  checked)\n```\n\nMultiple lines without the comma work fine:\n\n```jade\ninput(type='checkbox'\n  name='agreement'\n  checked)\n```\n\nFunky whitespace? fine:\n\n```jade\ninput(\n  type='checkbox'\n  name='agreement'\n  checked)\n```\n\nColons work:\n\n```jade\nrss(xmlns:atom=\"atom\")\n```\n\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\nwe could use regular javascript concatenation:\n\n```jade\na(href='/user/' + user.id)= user.name\n```\n\nor we could use jade's interpolation, which I added because everyone\nusing Ruby or CoffeeScript seems to think this is legal js..:\n\n```jade\na(href='/user/#{user.id}')= user.name\n```\n\nThe `class` attribute is special-cased when an array is given,\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\n\n```jade\nbody(class=bodyClasses)\n```\n\n<a name=\"a6-10\"/>\n### HTML\n\n Inline html is fine, we can use the pipe syntax to\n write arbitrary text, in this case some html:\n\n```jade\nhtml\n  body\n    | <h1>Title</h1>\n    | <p>foo bar baz</p>\n```\n\n Or we can use the trailing `.` to indicate to Jade that we\n only want text in this block, allowing us to omit the pipes:\n\n```jade\nhtml\n  body.\n    <h1>Title</h1>\n    <p>foo bar baz</p>\n```\n\n Both of these examples yield the same result:\n\n```html\n<html><body><h1>Title</h1>\n<p>foo bar baz</p>\n</body></html>\n```\n\n The same rule applies for anywhere you can have text\n in jade, raw html is fine:\n\n```jade\nhtml\n  body\n    h1 User <em>#{name}</em>\n```\n\n<a name=\"a6-11\"/>\n### Doctypes\n\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\n\n```jade\n!!!\n```\n\nor\n\n```jade\ndoctype\n```\n\nWill output the _html 5_  doctype, however:\n\n```jade\n!!! transitional\n```\n\nWill output the _transitional_ doctype.\n\nDoctypes are case-insensitive, so the following are equivalent:\n\n```jade\ndoctype Basic\ndoctype basic\n```\n\nit's also possible to simply pass a doctype literal:\n\n```jade\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\n```\n\nyielding:\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN>\n```\n\nBelow are the doctypes defined by default, which can easily be extended:\n\n```js\nvar doctypes = exports.doctypes = {\n  '5': '<!DOCTYPE html>',\n  'default': '<!DOCTYPE html>',\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n};\n```\n\nTo alter the default simply change:\n\n```js\njade.doctypes.default = 'whatever you want';\n```\n\n<a name=\"a7\"/>\n## Filters\n\nFilters are prefixed with `:`, for example `:markdown` and\npass the following block of text to an arbitrary function for processing. View the _features_\nat the top of this document for available filters.\n\n```jade\nbody\n  :markdown\n    Woah! jade _and_ markdown, very **cool**\n    we can even link to [stuff](http://google.com)\n```\n\nRenders:\n\n```html\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\n```\n\n<a name=\"a8\"/>\n## Code\n\nJade currently supports three classifications of executable code. The first\nis prefixed by `-`, and is not buffered:\n\n```jade\n- var foo = 'bar';\n```\n\nThis can be used for conditionals, or iteration:\n\n```jade\n- for (var key in obj)\n  p= obj[key]\n```\n\nDue to Jade's buffering techniques the following is valid as well:\n\n```jade\n- if (foo)\n  ul\n    li yay\n    li foo\n    li worked\n- else\n  p oh no! didnt work\n```\n\nHell, even verbose iteration:\n\n```jade\n- if (items.length)\n  ul\n    - items.forEach(function(item){\n      li= item\n    - })\n```\n\nAnything you want!\n\nNext up we have _escaped_ buffered code, which is used to\nbuffer a return value, which is prefixed by `=`:\n\n```jade\n- var foo = 'bar'\n= foo\nh1= foo\n```\n\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\nby default for security, however to output unescaped return values\nyou may use `!=`:\n\n```jade\np!= aVarContainingMoreHTML\n```\n\n Jade also has designer-friendly variants, making the literal JavaScript\n more expressive and declarative. For example the following assignments\n are equivalent, and the expression is still regular javascript:\n\n```jade\n- var foo = 'foo ' + 'bar'\nfoo = 'foo ' + 'bar'\n```\n\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\n\n```jade\nif foo == 'bar'\n  ul\n    li yay\n    li foo\n    li worked\nelse\n  p oh no! didnt work\n```\n\n<a name=\"a9\"/>\n## Iteration\n\n Along with vanilla JavaScript Jade also supports a subset of\n constructs that allow you to create more designer-friendly templates,\n one of these constructs is `each`, taking the form:\n\n```jade\neach VAL[, KEY] in OBJ\n```\n\nAn example iterating over an array:\n\n```jade\n- var items = [\"one\", \"two\", \"three\"]\neach item in items\n  li= item\n```\n\noutputs:\n\n```html\n<li>one</li>\n<li>two</li>\n<li>three</li>\n```\n\niterating an array with index:\n\n```jade\nitems = [\"one\", \"two\", \"three\"]\neach item, i in items\n  li #{item}: #{i}\n```\n\noutputs:\n\n```html\n<li>one: 0</li>\n<li>two: 1</li>\n<li>three: 2</li>\n```\n\niterating an object's keys and values:\n\n```jade\nobj = { foo: 'bar' }\neach val, key in obj\n  li #{key}: #{val}\n```\n\nwould output `<li>foo: bar</li>`\n\nInternally Jade converts these statements to regular\nJavaScript loops such as `users.forEach(function(user){`,\nso lexical scope and nesting applies as it would with regular\nJavaScript:\n\n```jade\neach user in users\n  each role in user.roles\n    li= role\n```\n\n You may also use `for` if you prefer:\n\n```jade\nfor user in users\n  for role in user.roles\n    li= role\n```\n\n<a name=\"a10\"/>\n## Conditionals\n\n Jade conditionals are equivalent to those using the code (`-`) prefix,\n however allow you to ditch parenthesis to become more designer friendly,\n however keep in mind the expression given is _regular_ JavaScript:\n\n```jade\nfor user in users\n  if user.role == 'admin'\n    p #{user.name} is an admin\n  else\n    p= user.name\n```\n\n is equivalent to the following using vanilla JavaScript literals:\n\n```jade\nfor user in users\n  - if (user.role == 'admin')\n    p #{user.name} is an admin\n  - else\n    p= user.name\n```\n\n  Jade also provides have `unless` which is equivalent to `if (!(expr))`:\n\n```jade\nfor user in users\n  unless user.isAnonymous\n    p\n      | Click to view\n      a(href='/users/' + user.id)= user.name\n```\n\n<a name=\"a11\"/>\n## Template inheritance\n\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\n\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\n\n```jade\nhtml\n  head\n    h1 My Site - #{title}\n    block scripts\n      script(src='/jquery.js')\n  body\n    block content\n    block foot\n      #footer\n        p some footer content\n```\n\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\n\n```jade\nextends layout\n\nblock scripts\n  script(src='/jquery.js')\n  script(src='/pets.js')\n\nblock content\n  h1= title\n  each pet in pets\n    include pet\n```\n\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\n\n```jade\nextends regular-layout\n\nblock content\n  .sidebar\n    block sidebar\n      p nothing\n  .primary\n    block primary\n      p nothing\n```\n\n<a name=\"a12\"/>\n## Block append / prepend\n\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\n\n```jade\nhtml\n  head\n    block head\n      script(src='/vendor/jquery.js')\n      script(src='/vendor/caustic.js')\n    body\n      block content\n```\n\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\n\n```jade\nextends layout\n\nblock append head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n  When using `block append` or `block prepend` the `block` is optional:\n\n```jade\nextends layout\n\nappend head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n<a name=\"a13\"/>\n## Includes\n\n Includes allow you to statically include chunks of Jade,\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\n\n    ./layout.jade\n    ./includes/\n      ./head.jade\n      ./foot.jade\n\nand the following _layout.jade_:\n\n```jade\nhtml\n  include includes/head\n  body\n    h1 My Site\n    p Welcome to my super amazing site.\n    include includes/foot\n```\n\nboth includes _includes/head_ and _includes/foot_ are\nread relative to the `filename` option given to _layout.jade_,\nwhich should be an absolute path to this file, however Express does this for you. Include then parses these files, and injects the AST produced to render what you would expect:\n\n```html\n<html>\n  <head>\n    <title>My Site</title>\n    <script src=\"/javascripts/jquery.js\">\n    </script><script src=\"/javascripts/app.js\"></script>\n  </head>\n  <body>\n    <h1>My Site</h1>\n    <p>Welcome to my super lame site.</p>\n    <div id=\"footer\">\n      <p>Copyright>(c) foobar</p>\n    </div>\n  </body>\n</html>\n```\n\n As mentioned `include` can be used to include other content\n such as html or css. By providing an extension Jade will not\n assume that the file is Jade source and will include it as\n a literal:\n\n```jade\nhtml\n  body\n    include content.html\n```\n\n  Include directives may also accept a block, in which case the\n  the given block will be appended to the _last_ block defined\n  in the file. For example if `head.jade` contains:\n\n```jade\nhead\n  script(src='/jquery.js')\n```\n\n We may append values by providing a block to `include head`\n as shown below, adding the two scripts.\n\n```jade\nhtml\n  include head\n    script(src='/foo.js')\n    script(src='/bar.js')\n  body\n    h1 test\n```\n\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\n\n```jade\nhead\n  yield\n  script(src='/jquery.js')\n  script(src='/jquery.ui.js')\n```\n\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example suppose we have `user.jade` which utilizes a `user` variable.\n\n```jade\nh1= user.name\np= user.occupation\n```\n\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\n\n```jade\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\n\neach user in users\n  .user\n    include user\n```\n\nyielding:\n\n```html\n<div class=\"user\">\n  <h1>Tobi</h1>\n  <p>Ferret</p>\n</div>\n```\n\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\n\n```jade\neach person in users\n  .user\n    user = person\n    include user\n```\n\n<a name=\"a14\"/>\n## Mixins\n\n Mixins are converted to regular JavaScript functions in\n the compiled template that Jade constructs. Mixins may\n take arguments, though not required:\n\n```jade\nmixin list\n  ul\n    li foo\n    li bar\n    li baz\n```\n\n  Utilizing a mixin without args looks similar, just without a block:\n\n```jade\nh2 Groceries\nmixin list\n```\n\n  Mixins may take one or more arguments as well, the arguments\n  are regular javascripts expressions, so for example the following:\n\n```jade\nmixin pets(pets)\n  ul.pets\n    - each pet in pets\n      li= pet\n\nmixin profile(user)\n  .user\n    h2= user.name\n    mixin pets(user.pets)\n```\n\n   Would yield something similar to the following html:\n\n```html\n<div class=\"user\">\n  <h2>tj</h2>\n  <ul class=\"pets\">\n    <li>tobi</li>\n    <li>loki</li>\n    <li>jane</li>\n    <li>manny</li>\n  </ul>\n</div>\n```\n\n<a name=\"a15\"/>\n## Generated Output\n\n Suppose we have the following Jade:\n\n```jade\n- var title = 'yay'\nh1.title #{title}\np Just an example\n```\n\n When the `compileDebug` option is not explicitly `false`, Jade\n will compile the function instrumented with `__.lineno = n;`, which\n in the event of an exception is passed to `rethrow()` which constructs\n a useful message relative to the initial Jade input.\n\n```js\nfunction anonymous(locals) {\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\n  var rethrow = jade.rethrow;\n  try {\n    var attrs = jade.attrs, escape = jade.escape;\n    var buf = [];\n    with (locals || {}) {\n      var interp;\n      __.lineno = 1;\n       var title = 'yay'\n      __.lineno = 2;\n      buf.push('<h1');\n      buf.push(attrs({ \"class\": ('title') }));\n      buf.push('>');\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n      buf.push('</h1>');\n      __.lineno = 3;\n      buf.push('<p>');\n      buf.push('Just an example');\n      buf.push('</p>');\n    }\n    return buf.join(\"\");\n  } catch (err) {\n    rethrow(err, __.input, __.filename, __.lineno);\n  }\n}\n```\n\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\nto toString() compiled templates and avoid running the entire Jade library on\nthe client, increasing performance, and decreasing the amount of JavaScript\nrequired.\n\n```js\nfunction anonymous(locals) {\n  var attrs = jade.attrs, escape = jade.escape;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    var title = 'yay'\n    buf.push('<h1');\n    buf.push(attrs({ \"class\": ('title') }));\n    buf.push('>');\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n    buf.push('</h1>');\n    buf.push('<p>');\n    buf.push('Just an example');\n    buf.push('</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a16\"/>\n## Example Makefile\n\n  Below is an example Makefile used to compile _pages/*.jade_\n  into _pages/*.html_ files by simply executing `make`.\n\n```make\nJADE = $(shell find pages/*.jade)\nHTML = $(JADE:.jade=.html)\n\nall: $(HTML)\n\n%.html: %.jade\n    jade < $< --path $< > $@\n\nclean:\n    rm -f $(HTML)\n\n.PHONY: clean\n```\n\nthis can be combined with the `watch(1)` command to produce\na watcher-like behaviour:\n\n```bash\n$ watch make\n```\n\n<a name=\"a17\"/>\n## jade(1)\n\n```\n\nUsage: jade [options] [dir|file ...]\n\nOptions:\n\n  -h, --help         output usage information\n  -V, --version      output the version number\n  -o, --obj <str>    javascript options object\n  -O, --out <dir>    output the compiled html to <dir>\n  -p, --path <path>  filename used to resolve includes\n  -P, --pretty       compile pretty html output\n  -c, --client       compile for client-side runtime.js\n  -D, --no-debug     compile without debugging (smaller functions)\n\nExamples:\n\n  # translate jade the templates dir\n  $ jade templates\n\n  # create {foo,bar}.html\n  $ jade {foo,bar}.jade\n\n  # jade over stdio\n  $ jade < my.jade > my.html\n\n  # jade over stdio\n  $ echo \"h1 Jade!\" | jade\n\n  # foo, bar dirs rendering to /tmp\n  $ jade foo bar --out /tmp\n\n```\n\n<a name=\"a18\"/>\n## Tutorials\n\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\n\n<a name=\"a19\"/>\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"jade@0.28.0","dist":{"shasum":"86be5701b6a14309f79202c3867b18cf75522fa3","tarball":"http://registry.npmjs.org/jade/-/jade-0.28.0.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.28.1":{"name":"jade","description":"Jade template engine","version":"0.28.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.6.1","mkdirp":"0.3.x","coffee-script":"~1.4.0"},"devDependencies":{"mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"prepublish":"npm prune"},"readme":" [![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\n\n# Jade - template engine\n\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\n\n## Test drive\n\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\n\n## README Contents\n\n- [Features](#a1)\n- [Implementations](#a2)\n- [Installation](#a3)\n- [Browser Support](#a4)\n- [Public API](#a5)\n- [Syntax](#a6)\n    - [Line Endings](#a6-1)\n    - [Tags](#a6-2)\n    - [Tag Text](#a6-3)\n    - [Comments](#a6-4)\n    - [Block Comments](#a6-5)\n    - [Nesting](#a6-6)\n    - [Block Expansion](#a6-7)\n    - [Case](#a6-8)\n    - [Attributes](#a6-9)\n    - [HTML](#a6-10)\n    - [Doctypes](#a6-11)\n- [Filters](#a7)\n- [Code](#a8)\n- [Iteration](#a9)\n- [Conditionals](#a10)\n- [Template inheritance](#a11)\n- [Block append / prepend](#a12)\n- [Includes](#a13)\n- [Mixins](#a14)\n- [Generated Output](#a15)\n- [Example Makefile](#a16)\n- [jade(1)](#a17)\n- [Tutorials](#a18)\n- [License](#a19)\n\n<a name=\"a1\"/>\n## Features\n\n  - client-side support\n  - great readability\n  - flexible indentation\n  - block-expansion\n  - mixins\n  - static includes\n  - attribute interpolation\n  - code is escaped by default for security\n  - contextual error reporting at compile &amp; run time\n  - executable for compiling jade templates via the command line\n  - html 5 mode (the default doctype)\n  - optional memory caching\n  - combine dynamic and static tag classes\n  - parse tree manipulation via _filters_\n  - template inheritance\n  - block append / prepend\n  - supports [Express JS](http://expressjs.com) out of the box\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\n  - block comments\n  - no tag prefix\n  - filters\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\n    - :cdata\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\n  - [html2jade](https://github.com/donpark/html2jade) converter\n\n<a name=\"a2\"/>\n## Implementations\n\n  - [php](http://github.com/everzet/jade.php)\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\n  - [ruby](http://github.com/stonean/slim)\n  - [python](https://github.com/SyrusAkbary/pyjade)\n  - [java](https://github.com/neuland/jade4j)\n\n<a name=\"a3\"/>\n## Installation\n\nvia npm:\n\n```bash\n$ npm install jade\n```\n\n<a name=\"a4\"/>\n## Browser Support\n\n To compile jade to a single file compatible for client-side use simply execute:\n\n```bash\n$ make jade.js\n```\n\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\n\n```bash\n$ make jade.min.js\n```\n\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\n\n```jade\np Hello #{name}\n```\n\n Can then be as small as the following generated function:\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\n  via `jade.attrs`, `jade.escape` etc.\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a5\"/>\n## Public API\n\n```js\nvar jade = require('jade');\n\n// Compile a function\nvar fn = jade.compile('string of jade', options);\nfn(locals);\n```\n\n### Options\n\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\n - `locals`    Local variable object\n - `filename`  Used in exceptions, and required when using includes\n - `debug`     Outputs tokens and function body generated\n - `compiler`  Compiler to replace jade's default\n - `compileDebug`  When `false` no debug instrumentation is compiled\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\n\n<a name=\"a6\"/>\n## Syntax\n\n<a name=\"a6-1\"/>\n### Line Endings\n\n**CRLF** and **CR** are converted to **LF** before parsing.\n\n<a name=\"a6-2\"/>\n### Tags\n\nA tag is simply a leading word:\n\n```jade\nhtml\n```\n\nfor example is converted to `<html></html>`\n\ntags can also have ids:\n\n```jade\ndiv#container\n```\n\nwhich would render `<div id=\"container\"></div>`\n\nhow about some classes?\n\n```jade\ndiv.user-details\n```\n\nrenders `<div class=\"user-details\"></div>`\n\nmultiple classes? _and_ an id? sure:\n\n```jade\ndiv#foo.bar.baz\n```\n\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\n\ndiv div div sure is annoying, how about:\n\n```jade\n#foo\n.bar\n```\n\nwhich is syntactic sugar for what we have already been doing, and outputs:\n\n```html\n<div id=\"foo\"></div><div class=\"bar\"></div>\n```\n\n<a name=\"a6-3\"/>\n### Tag Text\n\nSimply place some content after the tag:\n\n```jade\np wahoo!\n```\n\nrenders `<p>wahoo!</p>`.\n\nwell cool, but how about large bodies of text:\n\n```jade\np\n  | foo bar baz\n  | rawr rawr\n  | super cool\n  | go jade go\n```\n\nrenders `<p>foo bar baz rawr.....</p>`\n\ninterpolation? yup! both types of text can utilize interpolation,\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\n\n```jade\n#user #{name} &lt;#{email}&gt;\n```\n\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\n\nActually want `#{}` for some reason? escape it!\n\n```jade\np \\#{something}\n```\n\nnow we have `<p>#{something}</p>`\n\nWe can also utilize the unescaped variant `!{html}`, so the following\nwill result in a literal script tag:\n\n```jade\n- var html = \"<script></script>\"\n| !{html}\n```\n\nNested tags that also contain text can optionally use a text block:\n\n```jade\nlabel\n  | Username:\n  input(name='user[name]')\n```\n\nor immediate tag text:\n\n```jade\nlabel Username:\n  input(name='user[name]')\n```\n\nTags that accept _only_ text such as `script` and `style` do not\nneed the leading `|` character, for example:\n\n```jade\nhtml\n  head\n    title Example\n    script\n      if (foo) {\n        bar();\n      } else {\n        baz();\n      }\n```\n\nOnce again as an alternative, we may use a trailing `.` to indicate a text block, for example:\n\n```jade\np.\n  foo asdf\n  asdf\n   asdfasdfaf\n   asdf\n  asd.\n```\n\noutputs:\n\n```html\n<p>foo asdf\nasdf\n  asdfasdfaf\n  asdf\nasd.\n</p>\n```\n\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\n\n```jade\np .\n```\n\noutputs:\n\n```html\n<p>.</p>\n```\n\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\n\n```html\n<p>foo\\bar</p>\n```\n\nuse:\n\n```jade\np.\n  foo\\\\bar\n```\n\n<a name=\"a6-4\"/>\n### Comments\n\nSingle line comments currently look the same as JavaScript comments,\naka `//` and must be placed on their own line:\n\n```jade\n// just some paragraphs\np foo\np bar\n```\n\nwould output\n\n```html\n<!-- just some paragraphs -->\n<p>foo</p>\n<p>bar</p>\n```\n\nJade also supports unbuffered comments, by simply adding a hyphen:\n\n```jade\n//- will not output within markup\np foo\np bar\n```\n\noutputting\n\n```html\n<p>foo</p>\n<p>bar</p>\n```\n\n<a name=\"a6-5\"/>\n### Block Comments\n\n A block comment is legal as well:\n\n```jade\nbody\n  //\n    #content\n      h1 Example\n```\n\noutputting\n\n```html\n<body>\n  <!--\n  <div id=\"content\">\n    <h1>Example</h1>\n  </div>\n  -->\n</body>\n```\n\nJade supports conditional-comments as well, for example:\n\n```jade\nhead\n  //if lt IE 8\n    script(src='/ie-sucks.js')\n```\n\noutputs:\n\n```html\n<body>\n  <!--[if lt IE 8]>\n    <script src=\"/ie-sucks.js\"></script>\n  <![endif]-->\n</body>\n```\n\n<a name=\"a6-6\"/>\n### Nesting\n\n Jade supports nesting to define the tags in a natural way:\n\n```jade\nul\n  li.first\n    a(href='#') foo\n  li\n    a(href='#') bar\n  li.last\n    a(href='#') baz\n```\n\n<a name=\"a6-7\"/>\n### Block Expansion\n\n Block expansion allows you to create terse single-line nested tags,\n the following example is equivalent to the nesting example above.\n\n```jade\nul\n  li.first: a(href='#') foo\n  li: a(href='#') bar\n  li.last: a(href='#') baz\n```\n\n<a name=\"a6-8\"/>\n### Case\n\n The case statement takes the following form:\n\n```jade\nhtml\n  body\n    friends = 10\n    case friends\n      when 0\n        p you have no friends\n      when 1\n        p you have a friend\n      default\n        p you have #{friends} friends\n```\n\n Block expansion may also be used:\n\n```jade\nfriends = 5\n\nhtml\n  body\n    case friends\n      when 0: p you have no friends\n      when 1: p you have a friend\n      default: p you have #{friends} friends\n```\n\n<a name=\"a6-9\"/>\n### Attributes\n\nJade currently supports `(` and `)` as attribute delimiters.\n\n```jade\na(href='/login', title='View login page') Login\n```\n\nWhen a value is `undefined` or `null` the attribute is _not_ added,\nso this is fine, it will not compile `something=\"null\"`.\n\n```jade\ndiv(something=null)\n```\n\nBoolean attributes are also supported:\n\n```jade\ninput(type=\"checkbox\", checked)\n```\n\nBoolean attributes with code will only output the attribute when `true`:\n\n```jade\ninput(type=\"checkbox\", checked=someValue)\n```\n\nMultiple lines work too:\n\n```jade\ninput(type='checkbox',\n  name='agreement',\n  checked)\n```\n\nMultiple lines without the comma work fine:\n\n```jade\ninput(type='checkbox'\n  name='agreement'\n  checked)\n```\n\nFunky whitespace? fine:\n\n```jade\ninput(\n  type='checkbox'\n  name='agreement'\n  checked)\n```\n\nColons work:\n\n```jade\nrss(xmlns:atom=\"atom\")\n```\n\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\nwe could use regular javascript concatenation:\n\n```jade\na(href='/user/' + user.id)= user.name\n```\n\nor we could use jade's interpolation, which I added because everyone\nusing Ruby or CoffeeScript seems to think this is legal js..:\n\n```jade\na(href='/user/#{user.id}')= user.name\n```\n\nThe `class` attribute is special-cased when an array is given,\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\n\n```jade\nbody(class=bodyClasses)\n```\n\n<a name=\"a6-10\"/>\n### HTML\n\n Inline html is fine, we can use the pipe syntax to\n write arbitrary text, in this case some html:\n\n```jade\nhtml\n  body\n    | <h1>Title</h1>\n    | <p>foo bar baz</p>\n```\n\n Or we can use the trailing `.` to indicate to Jade that we\n only want text in this block, allowing us to omit the pipes:\n\n```jade\nhtml\n  body.\n    <h1>Title</h1>\n    <p>foo bar baz</p>\n```\n\n Both of these examples yield the same result:\n\n```html\n<html><body><h1>Title</h1>\n<p>foo bar baz</p>\n</body></html>\n```\n\n The same rule applies for anywhere you can have text\n in jade, raw html is fine:\n\n```jade\nhtml\n  body\n    h1 User <em>#{name}</em>\n```\n\n<a name=\"a6-11\"/>\n### Doctypes\n\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\n\n```jade\n!!!\n```\n\nor\n\n```jade\ndoctype\n```\n\nWill output the _html 5_  doctype, however:\n\n```jade\n!!! transitional\n```\n\nWill output the _transitional_ doctype.\n\nDoctypes are case-insensitive, so the following are equivalent:\n\n```jade\ndoctype Basic\ndoctype basic\n```\n\nit's also possible to simply pass a doctype literal:\n\n```jade\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\n```\n\nyielding:\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN>\n```\n\nBelow are the doctypes defined by default, which can easily be extended:\n\n```js\nvar doctypes = exports.doctypes = {\n  '5': '<!DOCTYPE html>',\n  'default': '<!DOCTYPE html>',\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n};\n```\n\nTo alter the default simply change:\n\n```js\njade.doctypes.default = 'whatever you want';\n```\n\n<a name=\"a7\"/>\n## Filters\n\nFilters are prefixed with `:`, for example `:markdown` and\npass the following block of text to an arbitrary function for processing. View the _features_\nat the top of this document for available filters.\n\n```jade\nbody\n  :markdown\n    Woah! jade _and_ markdown, very **cool**\n    we can even link to [stuff](http://google.com)\n```\n\nRenders:\n\n```html\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\n```\n\n<a name=\"a8\"/>\n## Code\n\nJade currently supports three classifications of executable code. The first\nis prefixed by `-`, and is not buffered:\n\n```jade\n- var foo = 'bar';\n```\n\nThis can be used for conditionals, or iteration:\n\n```jade\n- for (var key in obj)\n  p= obj[key]\n```\n\nDue to Jade's buffering techniques the following is valid as well:\n\n```jade\n- if (foo)\n  ul\n    li yay\n    li foo\n    li worked\n- else\n  p oh no! didnt work\n```\n\nHell, even verbose iteration:\n\n```jade\n- if (items.length)\n  ul\n    - items.forEach(function(item){\n      li= item\n    - })\n```\n\nAnything you want!\n\nNext up we have _escaped_ buffered code, which is used to\nbuffer a return value, which is prefixed by `=`:\n\n```jade\n- var foo = 'bar'\n= foo\nh1= foo\n```\n\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\nby default for security, however to output unescaped return values\nyou may use `!=`:\n\n```jade\np!= aVarContainingMoreHTML\n```\n\n Jade also has designer-friendly variants, making the literal JavaScript\n more expressive and declarative. For example the following assignments\n are equivalent, and the expression is still regular javascript:\n\n```jade\n- var foo = 'foo ' + 'bar'\nfoo = 'foo ' + 'bar'\n```\n\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\n\n```jade\nif foo == 'bar'\n  ul\n    li yay\n    li foo\n    li worked\nelse\n  p oh no! didnt work\n```\n\n<a name=\"a9\"/>\n## Iteration\n\n Along with vanilla JavaScript Jade also supports a subset of\n constructs that allow you to create more designer-friendly templates,\n one of these constructs is `each`, taking the form:\n\n```jade\neach VAL[, KEY] in OBJ\n```\n\nAn example iterating over an array:\n\n```jade\n- var items = [\"one\", \"two\", \"three\"]\neach item in items\n  li= item\n```\n\noutputs:\n\n```html\n<li>one</li>\n<li>two</li>\n<li>three</li>\n```\n\niterating an array with index:\n\n```jade\nitems = [\"one\", \"two\", \"three\"]\neach item, i in items\n  li #{item}: #{i}\n```\n\noutputs:\n\n```html\n<li>one: 0</li>\n<li>two: 1</li>\n<li>three: 2</li>\n```\n\niterating an object's keys and values:\n\n```jade\nobj = { foo: 'bar' }\neach val, key in obj\n  li #{key}: #{val}\n```\n\nwould output `<li>foo: bar</li>`\n\nInternally Jade converts these statements to regular\nJavaScript loops such as `users.forEach(function(user){`,\nso lexical scope and nesting applies as it would with regular\nJavaScript:\n\n```jade\neach user in users\n  each role in user.roles\n    li= role\n```\n\n You may also use `for` if you prefer:\n\n```jade\nfor user in users\n  for role in user.roles\n    li= role\n```\n\n<a name=\"a10\"/>\n## Conditionals\n\n Jade conditionals are equivalent to those using the code (`-`) prefix,\n however allow you to ditch parenthesis to become more designer friendly,\n however keep in mind the expression given is _regular_ JavaScript:\n\n```jade\nfor user in users\n  if user.role == 'admin'\n    p #{user.name} is an admin\n  else\n    p= user.name\n```\n\n is equivalent to the following using vanilla JavaScript literals:\n\n```jade\nfor user in users\n  - if (user.role == 'admin')\n    p #{user.name} is an admin\n  - else\n    p= user.name\n```\n\n  Jade also provides have `unless` which is equivalent to `if (!(expr))`:\n\n```jade\nfor user in users\n  unless user.isAnonymous\n    p\n      | Click to view\n      a(href='/users/' + user.id)= user.name\n```\n\n<a name=\"a11\"/>\n## Template inheritance\n\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\n\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\n\n```jade\nhtml\n  head\n    h1 My Site - #{title}\n    block scripts\n      script(src='/jquery.js')\n  body\n    block content\n    block foot\n      #footer\n        p some footer content\n```\n\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\n\n```jade\nextends layout\n\nblock scripts\n  script(src='/jquery.js')\n  script(src='/pets.js')\n\nblock content\n  h1= title\n  each pet in pets\n    include pet\n```\n\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\n\n```jade\nextends regular-layout\n\nblock content\n  .sidebar\n    block sidebar\n      p nothing\n  .primary\n    block primary\n      p nothing\n```\n\n<a name=\"a12\"/>\n## Block append / prepend\n\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\n\n```jade\nhtml\n  head\n    block head\n      script(src='/vendor/jquery.js')\n      script(src='/vendor/caustic.js')\n    body\n      block content\n```\n\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\n\n```jade\nextends layout\n\nblock append head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n  When using `block append` or `block prepend` the `block` is optional:\n\n```jade\nextends layout\n\nappend head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n<a name=\"a13\"/>\n## Includes\n\n Includes allow you to statically include chunks of Jade,\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\n\n    ./layout.jade\n    ./includes/\n      ./head.jade\n      ./foot.jade\n\nand the following _layout.jade_:\n\n```jade\nhtml\n  include includes/head\n  body\n    h1 My Site\n    p Welcome to my super amazing site.\n    include includes/foot\n```\n\nboth includes _includes/head_ and _includes/foot_ are\nread relative to the `filename` option given to _layout.jade_,\nwhich should be an absolute path to this file, however Express does this for you. Include then parses these files, and injects the AST produced to render what you would expect:\n\n```html\n<html>\n  <head>\n    <title>My Site</title>\n    <script src=\"/javascripts/jquery.js\">\n    </script><script src=\"/javascripts/app.js\"></script>\n  </head>\n  <body>\n    <h1>My Site</h1>\n    <p>Welcome to my super lame site.</p>\n    <div id=\"footer\">\n      <p>Copyright>(c) foobar</p>\n    </div>\n  </body>\n</html>\n```\n\n As mentioned `include` can be used to include other content\n such as html or css. By providing an extension Jade will not\n assume that the file is Jade source and will include it as\n a literal:\n\n```jade\nhtml\n  body\n    include content.html\n```\n\n  Include directives may also accept a block, in which case the\n  the given block will be appended to the _last_ block defined\n  in the file. For example if `head.jade` contains:\n\n```jade\nhead\n  script(src='/jquery.js')\n```\n\n We may append values by providing a block to `include head`\n as shown below, adding the two scripts.\n\n```jade\nhtml\n  include head\n    script(src='/foo.js')\n    script(src='/bar.js')\n  body\n    h1 test\n```\n\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\n\n```jade\nhead\n  yield\n  script(src='/jquery.js')\n  script(src='/jquery.ui.js')\n```\n\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example suppose we have `user.jade` which utilizes a `user` variable.\n\n```jade\nh1= user.name\np= user.occupation\n```\n\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\n\n```jade\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\n\neach user in users\n  .user\n    include user\n```\n\nyielding:\n\n```html\n<div class=\"user\">\n  <h1>Tobi</h1>\n  <p>Ferret</p>\n</div>\n```\n\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\n\n```jade\neach person in users\n  .user\n    user = person\n    include user\n```\n\n<a name=\"a14\"/>\n## Mixins\n\n Mixins are converted to regular JavaScript functions in\n the compiled template that Jade constructs. Mixins may\n take arguments, though not required:\n\n```jade\nmixin list\n  ul\n    li foo\n    li bar\n    li baz\n```\n\n  Utilizing a mixin without args looks similar, just without a block:\n\n```jade\nh2 Groceries\nmixin list\n```\n\n  Mixins may take one or more arguments as well, the arguments\n  are regular javascripts expressions, so for example the following:\n\n```jade\nmixin pets(pets)\n  ul.pets\n    - each pet in pets\n      li= pet\n\nmixin profile(user)\n  .user\n    h2= user.name\n    mixin pets(user.pets)\n```\n\n   Would yield something similar to the following html:\n\n```html\n<div class=\"user\">\n  <h2>tj</h2>\n  <ul class=\"pets\">\n    <li>tobi</li>\n    <li>loki</li>\n    <li>jane</li>\n    <li>manny</li>\n  </ul>\n</div>\n```\n\n<a name=\"a15\"/>\n## Generated Output\n\n Suppose we have the following Jade:\n\n```jade\n- var title = 'yay'\nh1.title #{title}\np Just an example\n```\n\n When the `compileDebug` option is not explicitly `false`, Jade\n will compile the function instrumented with `__.lineno = n;`, which\n in the event of an exception is passed to `rethrow()` which constructs\n a useful message relative to the initial Jade input.\n\n```js\nfunction anonymous(locals) {\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\n  var rethrow = jade.rethrow;\n  try {\n    var attrs = jade.attrs, escape = jade.escape;\n    var buf = [];\n    with (locals || {}) {\n      var interp;\n      __.lineno = 1;\n       var title = 'yay'\n      __.lineno = 2;\n      buf.push('<h1');\n      buf.push(attrs({ \"class\": ('title') }));\n      buf.push('>');\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n      buf.push('</h1>');\n      __.lineno = 3;\n      buf.push('<p>');\n      buf.push('Just an example');\n      buf.push('</p>');\n    }\n    return buf.join(\"\");\n  } catch (err) {\n    rethrow(err, __.input, __.filename, __.lineno);\n  }\n}\n```\n\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\nto toString() compiled templates and avoid running the entire Jade library on\nthe client, increasing performance, and decreasing the amount of JavaScript\nrequired.\n\n```js\nfunction anonymous(locals) {\n  var attrs = jade.attrs, escape = jade.escape;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    var title = 'yay'\n    buf.push('<h1');\n    buf.push(attrs({ \"class\": ('title') }));\n    buf.push('>');\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n    buf.push('</h1>');\n    buf.push('<p>');\n    buf.push('Just an example');\n    buf.push('</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a16\"/>\n## Example Makefile\n\n  Below is an example Makefile used to compile _pages/*.jade_\n  into _pages/*.html_ files by simply executing `make`.\n\n```make\nJADE = $(shell find pages/*.jade)\nHTML = $(JADE:.jade=.html)\n\nall: $(HTML)\n\n%.html: %.jade\n    jade < $< --path $< > $@\n\nclean:\n    rm -f $(HTML)\n\n.PHONY: clean\n```\n\nthis can be combined with the `watch(1)` command to produce\na watcher-like behaviour:\n\n```bash\n$ watch make\n```\n\n<a name=\"a17\"/>\n## jade(1)\n\n```\n\nUsage: jade [options] [dir|file ...]\n\nOptions:\n\n  -h, --help         output usage information\n  -V, --version      output the version number\n  -o, --obj <str>    javascript options object\n  -O, --out <dir>    output the compiled html to <dir>\n  -p, --path <path>  filename used to resolve includes\n  -P, --pretty       compile pretty html output\n  -c, --client       compile for client-side runtime.js\n  -D, --no-debug     compile without debugging (smaller functions)\n\nExamples:\n\n  # translate jade the templates dir\n  $ jade templates\n\n  # create {foo,bar}.html\n  $ jade {foo,bar}.jade\n\n  # jade over stdio\n  $ jade < my.jade > my.html\n\n  # jade over stdio\n  $ echo \"h1 Jade!\" | jade\n\n  # foo, bar dirs rendering to /tmp\n  $ jade foo bar --out /tmp\n\n```\n\n<a name=\"a18\"/>\n## Tutorials\n\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\n\n<a name=\"a19\"/>\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"jade@0.28.1","dist":{"shasum":"39b19c3d637f74aae346ee0b8df6cb3f22f5689f","tarball":"http://registry.npmjs.org/jade/-/jade-0.28.1.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.28.2":{"name":"jade","description":"Jade template engine","version":"0.28.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.6.1","mkdirp":"0.3.x"},"devDependencies":{"coffee-script":"~1.4.0","mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"test":"mocha -R spec","prepublish":"npm prune"},"readme":"# Jade - template engine \n[![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\n[![Dependency Status](https://gemnasium.com/visionmedia/jade.png)](https://gemnasium.com/visionmedia/jade)\n\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\n\n## Test drive\n\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\n\n## README Contents\n\n- [Features](#a1)\n- [Implementations](#a2)\n- [Installation](#a3)\n- [Browser Support](#a4)\n- [Public API](#a5)\n- [Syntax](#a6)\n    - [Line Endings](#a6-1)\n    - [Tags](#a6-2)\n    - [Tag Text](#a6-3)\n    - [Comments](#a6-4)\n    - [Block Comments](#a6-5)\n    - [Nesting](#a6-6)\n    - [Block Expansion](#a6-7)\n    - [Case](#a6-8)\n    - [Attributes](#a6-9)\n    - [HTML](#a6-10)\n    - [Doctypes](#a6-11)\n- [Filters](#a7)\n- [Code](#a8)\n- [Iteration](#a9)\n- [Conditionals](#a10)\n- [Template inheritance](#a11)\n- [Block append / prepend](#a12)\n- [Includes](#a13)\n- [Mixins](#a14)\n- [Generated Output](#a15)\n- [Example Makefile](#a16)\n- [jade(1)](#a17)\n- [Tutorials](#a18)\n- [License](#a19)\n\n<a name=\"a1\"/>\n## Features\n\n  - client-side support\n  - great readability\n  - flexible indentation\n  - block-expansion\n  - mixins\n  - static includes\n  - attribute interpolation\n  - code is escaped by default for security\n  - contextual error reporting at compile &amp; run time\n  - executable for compiling jade templates via the command line\n  - html 5 mode (the default doctype)\n  - optional memory caching\n  - combine dynamic and static tag classes\n  - parse tree manipulation via _filters_\n  - template inheritance\n  - block append / prepend\n  - supports [Express JS](http://expressjs.com) out of the box\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\n  - block comments\n  - no tag prefix\n  - filters\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\n    - :cdata\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\n  - [html2jade](https://github.com/donpark/html2jade) converter\n\n<a name=\"a2\"/>\n## Implementations\n\n  - [php](http://github.com/everzet/jade.php)\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\n  - [ruby](http://github.com/stonean/slim)\n  - [python](https://github.com/SyrusAkbary/pyjade)\n  - [java](https://github.com/neuland/jade4j)\n\n<a name=\"a3\"/>\n## Installation\n\nvia npm:\n\n```bash\n$ npm install jade\n```\n\n<a name=\"a4\"/>\n## Browser Support\n\n To compile jade to a single file compatible for client-side use simply execute:\n\n```bash\n$ make jade.js\n```\n\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\n\n```bash\n$ make jade.min.js\n```\n\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\n\n```jade\np Hello #{name}\n```\n\n Can then be as small as the following generated function:\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\n  via `jade.attrs`, `jade.escape` etc.\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a5\"/>\n## Public API\n\n```js\nvar jade = require('jade');\n\n// Compile a function\nvar fn = jade.compile('string of jade', options);\nfn(locals);\n```\n\n### Options\n\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\n - `locals`    Local variable object\n - `filename`  Used in exceptions, and required when using includes\n - `debug`     Outputs tokens and function body generated\n - `compiler`  Compiler to replace jade's default\n - `compileDebug`  When `false` no debug instrumentation is compiled\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\n\n<a name=\"a6\"/>\n## Syntax\n\n<a name=\"a6-1\"/>\n### Line Endings\n\n**CRLF** and **CR** are converted to **LF** before parsing.\n\n<a name=\"a6-2\"/>\n### Tags\n\nA tag is simply a leading word:\n\n```jade\nhtml\n```\n\nfor example is converted to `<html></html>`\n\ntags can also have ids:\n\n```jade\ndiv#container\n```\n\nwhich would render `<div id=\"container\"></div>`\n\nhow about some classes?\n\n```jade\ndiv.user-details\n```\n\nrenders `<div class=\"user-details\"></div>`\n\nmultiple classes? _and_ an id? sure:\n\n```jade\ndiv#foo.bar.baz\n```\n\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\n\ndiv div div sure is annoying, how about:\n\n```jade\n#foo\n.bar\n```\n\nwhich is syntactic sugar for what we have already been doing, and outputs:\n\n```html\n<div id=\"foo\"></div><div class=\"bar\"></div>\n```\n\n<a name=\"a6-3\"/>\n### Tag Text\n\nSimply place some content after the tag:\n\n```jade\np wahoo!\n```\n\nrenders `<p>wahoo!</p>`.\n\nwell cool, but how about large bodies of text:\n\n```jade\np\n  | foo bar baz\n  | rawr rawr\n  | super cool\n  | go jade go\n```\n\nrenders `<p>foo bar baz rawr.....</p>`\n\ninterpolation? yup! both types of text can utilize interpolation,\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\n\n```jade\n#user #{name} &lt;#{email}&gt;\n```\n\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\n\nActually want `#{}` for some reason? escape it!\n\n```jade\np \\#{something}\n```\n\nnow we have `<p>#{something}</p>`\n\nWe can also utilize the unescaped variant `!{html}`, so the following\nwill result in a literal script tag:\n\n```jade\n- var html = \"<script></script>\"\n| !{html}\n```\n\nNested tags that also contain text can optionally use a text block:\n\n```jade\nlabel\n  | Username:\n  input(name='user[name]')\n```\n\nor immediate tag text:\n\n```jade\nlabel Username:\n  input(name='user[name]')\n```\n\nTags that accept _only_ text such as `script` and `style` do not\nneed the leading `|` character, for example:\n\n```jade\nhtml\n  head\n    title Example\n    script\n      if (foo) {\n        bar();\n      } else {\n        baz();\n      }\n```\n\nOnce again as an alternative, we may use a trailing `.` to indicate a text block, for example:\n\n```jade\np.\n  foo asdf\n  asdf\n   asdfasdfaf\n   asdf\n  asd.\n```\n\noutputs:\n\n```html\n<p>foo asdf\nasdf\n  asdfasdfaf\n  asdf\nasd.\n</p>\n```\n\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\n\n```jade\np .\n```\n\noutputs:\n\n```html\n<p>.</p>\n```\n\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\n\n```html\n<p>foo\\bar</p>\n```\n\nuse:\n\n```jade\np.\n  foo\\\\bar\n```\n\n<a name=\"a6-4\"/>\n### Comments\n\nSingle line comments currently look the same as JavaScript comments,\naka `//` and must be placed on their own line:\n\n```jade\n// just some paragraphs\np foo\np bar\n```\n\nwould output\n\n```html\n<!-- just some paragraphs -->\n<p>foo</p>\n<p>bar</p>\n```\n\nJade also supports unbuffered comments, by simply adding a hyphen:\n\n```jade\n//- will not output within markup\np foo\np bar\n```\n\noutputting\n\n```html\n<p>foo</p>\n<p>bar</p>\n```\n\n<a name=\"a6-5\"/>\n### Block Comments\n\n A block comment is legal as well:\n\n```jade\nbody\n  //\n    #content\n      h1 Example\n```\n\noutputting\n\n```html\n<body>\n  <!--\n  <div id=\"content\">\n    <h1>Example</h1>\n  </div>\n  -->\n</body>\n```\n\nJade supports conditional-comments as well, for example:\n\n```jade\nhead\n  //if lt IE 8\n    script(src='/ie-sucks.js')\n```\n\noutputs:\n\n```html\n<head>\n  <!--[if lt IE 8]>\n    <script src=\"/ie-sucks.js\"></script>\n  <![endif]-->\n</head>\n```\n\n<a name=\"a6-6\"/>\n### Nesting\n\n Jade supports nesting to define the tags in a natural way:\n\n```jade\nul\n  li.first\n    a(href='#') foo\n  li\n    a(href='#') bar\n  li.last\n    a(href='#') baz\n```\n\n<a name=\"a6-7\"/>\n### Block Expansion\n\n Block expansion allows you to create terse single-line nested tags,\n the following example is equivalent to the nesting example above.\n\n```jade\nul\n  li.first: a(href='#') foo\n  li: a(href='#') bar\n  li.last: a(href='#') baz\n```\n\n<a name=\"a6-8\"/>\n### Case\n\n The case statement takes the following form:\n\n```jade\nhtml\n  body\n    friends = 10\n    case friends\n      when 0\n        p you have no friends\n      when 1\n        p you have a friend\n      default\n        p you have #{friends} friends\n```\n\n Block expansion may also be used:\n\n```jade\nfriends = 5\n\nhtml\n  body\n    case friends\n      when 0: p you have no friends\n      when 1: p you have a friend\n      default: p you have #{friends} friends\n```\n\n<a name=\"a6-9\"/>\n### Attributes\n\nJade currently supports `(` and `)` as attribute delimiters.\n\n```jade\na(href='/login', title='View login page') Login\n```\n\nWhen a value is `undefined` or `null` the attribute is _not_ added,\nso this is fine, it will not compile `something=\"null\"`.\n\n```jade\ndiv(something=null)\n```\n\nBoolean attributes are also supported:\n\n```jade\ninput(type=\"checkbox\", checked)\n```\n\nBoolean attributes with code will only output the attribute when `true`:\n\n```jade\ninput(type=\"checkbox\", checked=someValue)\n```\n\nMultiple lines work too:\n\n```jade\ninput(type='checkbox',\n  name='agreement',\n  checked)\n```\n\nMultiple lines without the comma work fine:\n\n```jade\ninput(type='checkbox'\n  name='agreement'\n  checked)\n```\n\nFunky whitespace? fine:\n\n```jade\ninput(\n  type='checkbox'\n  name='agreement'\n  checked)\n```\n\nColons work:\n\n```jade\nrss(xmlns:atom=\"atom\")\n```\n\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\nwe could use regular javascript concatenation:\n\n```jade\na(href='/user/' + user.id)= user.name\n```\n\nor we could use jade's interpolation, which I added because everyone\nusing Ruby or CoffeeScript seems to think this is legal js..:\n\n```jade\na(href='/user/#{user.id}')= user.name\n```\n\nThe `class` attribute is special-cased when an array is given,\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\n\n```jade\nbody(class=bodyClasses)\n```\n\n<a name=\"a6-10\"/>\n### HTML\n\n Inline html is fine, we can use the pipe syntax to\n write arbitrary text, in this case some html:\n\n```jade\nhtml\n  body\n    | <h1>Title</h1>\n    | <p>foo bar baz</p>\n```\n\n Or we can use the trailing `.` to indicate to Jade that we\n only want text in this block, allowing us to omit the pipes:\n\n```jade\nhtml\n  body.\n    <h1>Title</h1>\n    <p>foo bar baz</p>\n```\n\n Both of these examples yield the same result:\n\n```html\n<html><body><h1>Title</h1>\n<p>foo bar baz</p>\n</body></html>\n```\n\n The same rule applies for anywhere you can have text\n in jade, raw html is fine:\n\n```jade\nhtml\n  body\n    h1 User <em>#{name}</em>\n```\n\n<a name=\"a6-11\"/>\n### Doctypes\n\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\n\n```jade\n!!!\n```\n\nor\n\n```jade\ndoctype\n```\n\nWill output the _html 5_  doctype, however:\n\n```jade\n!!! transitional\n```\n\nWill output the _transitional_ doctype.\n\nDoctypes are case-insensitive, so the following are equivalent:\n\n```jade\ndoctype Basic\ndoctype basic\n```\n\nit's also possible to simply pass a doctype literal:\n\n```jade\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\n```\n\nyielding:\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN>\n```\n\nBelow are the doctypes defined by default, which can easily be extended:\n\n```js\nvar doctypes = exports.doctypes = {\n  '5': '<!DOCTYPE html>',\n  'default': '<!DOCTYPE html>',\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n};\n```\n\nTo alter the default simply change:\n\n```js\njade.doctypes.default = 'whatever you want';\n```\n\n<a name=\"a7\"/>\n## Filters\n\nFilters are prefixed with `:`, for example `:markdown` and\npass the following block of text to an arbitrary function for processing. View the _features_\nat the top of this document for available filters.\n\n```jade\nbody\n  :markdown\n    Woah! jade _and_ markdown, very **cool**\n    we can even link to [stuff](http://google.com)\n```\n\nRenders:\n\n```html\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\n```\n\n<a name=\"a8\"/>\n## Code\n\nJade currently supports three classifications of executable code. The first\nis prefixed by `-`, and is not buffered:\n\n```jade\n- var foo = 'bar';\n```\n\nThis can be used for conditionals, or iteration:\n\n```jade\n- for (var key in obj)\n  p= obj[key]\n```\n\nDue to Jade's buffering techniques the following is valid as well:\n\n```jade\n- if (foo)\n  ul\n    li yay\n    li foo\n    li worked\n- else\n  p oh no! didnt work\n```\n\nHell, even verbose iteration:\n\n```jade\n- if (items.length)\n  ul\n    - items.forEach(function(item){\n      li= item\n    - })\n```\n\nAnything you want!\n\nNext up we have _escaped_ buffered code, which is used to\nbuffer a return value, which is prefixed by `=`:\n\n```jade\n- var foo = 'bar'\n= foo\nh1= foo\n```\n\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\nby default for security, however to output unescaped return values\nyou may use `!=`:\n\n```jade\np!= aVarContainingMoreHTML\n```\n\n Jade also has designer-friendly variants, making the literal JavaScript\n more expressive and declarative. For example the following assignments\n are equivalent, and the expression is still regular javascript:\n\n```jade\n- var foo = 'foo ' + 'bar'\nfoo = 'foo ' + 'bar'\n```\n\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\n\n```jade\nif foo == 'bar'\n  ul\n    li yay\n    li foo\n    li worked\nelse\n  p oh no! didnt work\n```\n\n<a name=\"a9\"/>\n## Iteration\n\n Along with vanilla JavaScript Jade also supports a subset of\n constructs that allow you to create more designer-friendly templates,\n one of these constructs is `each`, taking the form:\n\n```jade\neach VAL[, KEY] in OBJ\n```\n\nAn example iterating over an array:\n\n```jade\n- var items = [\"one\", \"two\", \"three\"]\neach item in items\n  li= item\n```\n\noutputs:\n\n```html\n<li>one</li>\n<li>two</li>\n<li>three</li>\n```\n\niterating an array with index:\n\n```jade\nitems = [\"one\", \"two\", \"three\"]\neach item, i in items\n  li #{item}: #{i}\n```\n\noutputs:\n\n```html\n<li>one: 0</li>\n<li>two: 1</li>\n<li>three: 2</li>\n```\n\niterating an object's keys and values:\n\n```jade\nobj = { foo: 'bar' }\neach val, key in obj\n  li #{key}: #{val}\n```\n\nwould output `<li>foo: bar</li>`\n\nInternally Jade converts these statements to regular\nJavaScript loops such as `users.forEach(function(user){`,\nso lexical scope and nesting applies as it would with regular\nJavaScript:\n\n```jade\neach user in users\n  each role in user.roles\n    li= role\n```\n\n You may also use `for` if you prefer:\n\n```jade\nfor user in users\n  for role in user.roles\n    li= role\n```\n\n<a name=\"a10\"/>\n## Conditionals\n\n Jade conditionals are equivalent to those using the code (`-`) prefix,\n however allow you to ditch parenthesis to become more designer friendly,\n however keep in mind the expression given is _regular_ JavaScript:\n\n```jade\nfor user in users\n  if user.role == 'admin'\n    p #{user.name} is an admin\n  else\n    p= user.name\n```\n\n is equivalent to the following using vanilla JavaScript literals:\n\n```jade\nfor user in users\n  - if (user.role == 'admin')\n    p #{user.name} is an admin\n  - else\n    p= user.name\n```\n\n  Jade also provides `unless` which is equivalent to `if (!(expr))`:\n\n```jade\nfor user in users\n  unless user.isAnonymous\n    p\n      | Click to view\n      a(href='/users/' + user.id)= user.name\n```\n\n<a name=\"a11\"/>\n## Template inheritance\n\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\n\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\n\n```jade\nhtml\n  head\n    h1 My Site - #{title}\n    block scripts\n      script(src='/jquery.js')\n  body\n    block content\n    block foot\n      #footer\n        p some footer content\n```\n\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\n\n```jade\nextends layout\n\nblock scripts\n  script(src='/jquery.js')\n  script(src='/pets.js')\n\nblock content\n  h1= title\n  each pet in pets\n    include pet\n```\n\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\n\n```jade\nextends regular-layout\n\nblock content\n  .sidebar\n    block sidebar\n      p nothing\n  .primary\n    block primary\n      p nothing\n```\n\n<a name=\"a12\"/>\n## Block append / prepend\n\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\n\n```jade\nhtml\n  head\n    block head\n      script(src='/vendor/jquery.js')\n      script(src='/vendor/caustic.js')\n    body\n      block content\n```\n\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\n\n```jade\nextends layout\n\nblock append head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n  When using `block append` or `block prepend` the `block` is optional:\n\n```jade\nextends layout\n\nappend head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n<a name=\"a13\"/>\n## Includes\n\n Includes allow you to statically include chunks of Jade,\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\n\n    ./layout.jade\n    ./includes/\n      ./head.jade\n      ./foot.jade\n\nand the following _layout.jade_:\n\n```jade\nhtml\n  include includes/head\n  body\n    h1 My Site\n    p Welcome to my super amazing site.\n    include includes/foot\n```\n\nboth includes _includes/head_ and _includes/foot_ are\nread relative to the `filename` option given to _layout.jade_,\nwhich should be an absolute path to this file, however Express does this for you. Include then parses these files, and injects the AST produced to render what you would expect:\n\n```html\n<html>\n  <head>\n    <title>My Site</title>\n    <script src=\"/javascripts/jquery.js\">\n    </script><script src=\"/javascripts/app.js\"></script>\n  </head>\n  <body>\n    <h1>My Site</h1>\n    <p>Welcome to my super lame site.</p>\n    <div id=\"footer\">\n      <p>Copyright>(c) foobar</p>\n    </div>\n  </body>\n</html>\n```\n\n As mentioned `include` can be used to include other content\n such as html or css. By providing an extension Jade will not\n assume that the file is Jade source and will include it as\n a literal:\n\n```jade\nhtml\n  body\n    include content.html\n```\n\n  Include directives may also accept a block, in which case the\n  the given block will be appended to the _last_ block defined\n  in the file. For example if `head.jade` contains:\n\n```jade\nhead\n  script(src='/jquery.js')\n```\n\n We may append values by providing a block to `include head`\n as shown below, adding the two scripts.\n\n```jade\nhtml\n  include head\n    script(src='/foo.js')\n    script(src='/bar.js')\n  body\n    h1 test\n```\n\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\n\n```jade\nhead\n  yield\n  script(src='/jquery.js')\n  script(src='/jquery.ui.js')\n```\n\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example suppose we have `user.jade` which utilizes a `user` variable.\n\n```jade\nh1= user.name\np= user.occupation\n```\n\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\n\n```jade\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\n\neach user in users\n  .user\n    include user\n```\n\nyielding:\n\n```html\n<div class=\"user\">\n  <h1>Tobi</h1>\n  <p>Ferret</p>\n</div>\n```\n\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\n\n```jade\neach person in users\n  .user\n    user = person\n    include user\n```\n\n<a name=\"a14\"/>\n## Mixins\n\n Mixins are converted to regular JavaScript functions in\n the compiled template that Jade constructs. Mixins may\n take arguments, though not required:\n\n```jade\nmixin list\n  ul\n    li foo\n    li bar\n    li baz\n```\n\n  Utilizing a mixin without args looks similar, just without a block:\n\n```jade\nh2 Groceries\nmixin list\n```\n\n  Mixins may take one or more arguments as well, the arguments\n  are regular javascripts expressions, so for example the following:\n\n```jade\nmixin pets(pets)\n  ul.pets\n    - each pet in pets\n      li= pet\n\nmixin profile(user)\n  .user\n    h2= user.name\n    mixin pets(user.pets)\n```\n\n   Would yield something similar to the following html:\n\n```html\n<div class=\"user\">\n  <h2>tj</h2>\n  <ul class=\"pets\">\n    <li>tobi</li>\n    <li>loki</li>\n    <li>jane</li>\n    <li>manny</li>\n  </ul>\n</div>\n```\n\n<a name=\"a15\"/>\n## Generated Output\n\n Suppose we have the following Jade:\n\n```jade\n- var title = 'yay'\nh1.title #{title}\np Just an example\n```\n\n When the `compileDebug` option is not explicitly `false`, Jade\n will compile the function instrumented with `__.lineno = n;`, which\n in the event of an exception is passed to `rethrow()` which constructs\n a useful message relative to the initial Jade input.\n\n```js\nfunction anonymous(locals) {\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\n  var rethrow = jade.rethrow;\n  try {\n    var attrs = jade.attrs, escape = jade.escape;\n    var buf = [];\n    with (locals || {}) {\n      var interp;\n      __.lineno = 1;\n       var title = 'yay'\n      __.lineno = 2;\n      buf.push('<h1');\n      buf.push(attrs({ \"class\": ('title') }));\n      buf.push('>');\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n      buf.push('</h1>');\n      __.lineno = 3;\n      buf.push('<p>');\n      buf.push('Just an example');\n      buf.push('</p>');\n    }\n    return buf.join(\"\");\n  } catch (err) {\n    rethrow(err, __.input, __.filename, __.lineno);\n  }\n}\n```\n\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\nto toString() compiled templates and avoid running the entire Jade library on\nthe client, increasing performance, and decreasing the amount of JavaScript\nrequired.\n\n```js\nfunction anonymous(locals) {\n  var attrs = jade.attrs, escape = jade.escape;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    var title = 'yay'\n    buf.push('<h1');\n    buf.push(attrs({ \"class\": ('title') }));\n    buf.push('>');\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n    buf.push('</h1>');\n    buf.push('<p>');\n    buf.push('Just an example');\n    buf.push('</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a16\"/>\n## Example Makefile\n\n  Below is an example Makefile used to compile _pages/*.jade_\n  into _pages/*.html_ files by simply executing `make`.\n\n_Note:_ If you try to run this snippet and `make` throws a `missing separator` error, you should make sure all indented lines use a tab for indentation instead of spaces. (For whatever reason, GitHub renders this code snippet with 4-space indentation although the actual README file uses tabs in this snippet.)\n\n```make\nJADE = $(shell find . -wholename './pages/*.jade')\nHTML = $(JADE:.jade=.html)\n\nall: $(HTML)\n\n%.html: %.jade\n\tjade < $< --path $< > $@\n\nclean:\n\trm -f $(HTML)\n\n.PHONY: clean\n```\n\nthis can be combined with the `watch(1)` command to produce\na watcher-like behaviour:\n\n```bash\n$ watch make\n```\n\n<a name=\"a17\"/>\n## jade(1)\n\n```\n\nUsage: jade [options] [dir|file ...]\n\nOptions:\n\n  -h, --help         output usage information\n  -V, --version      output the version number\n  -o, --obj <str>    javascript options object\n  -O, --out <dir>    output the compiled html to <dir>\n  -p, --path <path>  filename used to resolve includes\n  -P, --pretty       compile pretty html output\n  -c, --client       compile for client-side runtime.js\n  -D, --no-debug     compile without debugging (smaller functions)\n\nExamples:\n\n  # translate jade the templates dir\n  $ jade templates\n\n  # create {foo,bar}.html\n  $ jade {foo,bar}.jade\n\n  # jade over stdio\n  $ jade < my.jade > my.html\n\n  # jade over stdio\n  $ echo \"h1 Jade!\" | jade\n\n  # foo, bar dirs rendering to /tmp\n  $ jade foo bar --out /tmp\n\n```\n\n<a name=\"a18\"/>\n## Tutorials\n\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\n\n<a name=\"a19\"/>\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"jade@0.28.2","dist":{"shasum":"29ddaafcb42ed6fb7305f8f47379fff70fc77880","tarball":"http://registry.npmjs.org/jade/-/jade-0.28.2.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.29.0":{"name":"jade","description":"Jade template engine","version":"0.29.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"0.6.1","mkdirp":"0.3.x","transformers":"~1.8.0","character-parser":"~1.0.0","monocle":"~0.1.43"},"devDependencies":{"coffee-script":"*","mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"test":"mocha -R spec","prepublish":"npm prune"},"readme":"# Jade - template engine \n[![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\n[![Dependency Status](https://gemnasium.com/visionmedia/jade.png)](https://gemnasium.com/visionmedia/jade)\n\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\n\n## Test drive\n\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\n\n## README Contents\n\n- [Features](#a1)\n- [Implementations](#a2)\n- [Installation](#a3)\n- [Browser Support](#a4)\n- [Public API](#a5)\n- [Syntax](#a6)\n    - [Line Endings](#a6-1)\n    - [Tags](#a6-2)\n    - [Tag Text](#a6-3)\n    - [Comments](#a6-4)\n    - [Block Comments](#a6-5)\n    - [Nesting](#a6-6)\n    - [Block Expansion](#a6-7)\n    - [Case](#a6-8)\n    - [Attributes](#a6-9)\n    - [HTML](#a6-10)\n    - [Doctypes](#a6-11)\n- [Filters](#a7)\n- [Code](#a8)\n- [Iteration](#a9)\n- [Conditionals](#a10)\n- [Template inheritance](#a11)\n- [Block append / prepend](#a12)\n- [Includes](#a13)\n- [Mixins](#a14)\n- [Generated Output](#a15)\n- [Example Makefile](#a16)\n- [jade(1)](#a17)\n- [Tutorials](#a18)\n- [License](#a19)\n\n<a name=\"a1\"/>\n## Features\n\n  - client-side support\n  - great readability\n  - flexible indentation\n  - block-expansion\n  - mixins\n  - static includes\n  - attribute interpolation\n  - code is escaped by default for security\n  - contextual error reporting at compile &amp; run time\n  - executable for compiling jade templates via the command line\n  - html 5 mode (the default doctype)\n  - optional memory caching\n  - combine dynamic and static tag classes\n  - parse tree manipulation via _filters_\n  - template inheritance\n  - block append / prepend\n  - supports [Express JS](http://expressjs.com) out of the box\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\n  - block comments\n  - no tag prefix\n  - filters\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\n    - :cdata\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\n  - [html2jade](https://github.com/donpark/html2jade) converter\n\n<a name=\"a2\"/>\n## Implementations\n\n  - [php](http://github.com/everzet/jade.php)\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\n  - [ruby](https://github.com/slim-template/slim)\n  - [python](https://github.com/SyrusAkbary/pyjade)\n  - [java](https://github.com/neuland/jade4j)\n\n<a name=\"a3\"/>\n## Installation\n\nvia npm:\n\n```bash\n$ npm install jade\n```\n\n<a name=\"a4\"/>\n## Browser Support\n\n To compile jade to a single file compatible for client-side use simply execute:\n\n```bash\n$ make jade.js\n```\n\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\n\n```bash\n$ make jade.min.js\n```\n\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\n\n```jade\np Hello #{name}\n```\n\n Can then be as small as the following generated function:\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\n  via `jade.attrs`, `jade.escape` etc.\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a5\"/>\n## Public API\n\n```js\nvar jade = require('jade');\n\n// Compile a function\nvar fn = jade.compile('string of jade', options);\nfn(locals);\n```\n\n### Options\n\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\n - `locals`    Local variable object\n - `filename`  Used in exceptions, and required when using includes\n - `debug`     Outputs tokens and function body generated\n - `compiler`  Compiler to replace jade's default\n - `compileDebug`  When `false` no debug instrumentation is compiled\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\n\n<a name=\"a6\"/>\n## Syntax\n\n<a name=\"a6-1\"/>\n### Line Endings\n\n**CRLF** and **CR** are converted to **LF** before parsing.\n\n<a name=\"a6-2\"/>\n### Tags\n\nA tag is simply a leading word:\n\n```jade\nhtml\n```\n\nfor example is converted to `<html></html>`\n\ntags can also have ids:\n\n```jade\ndiv#container\n```\n\nwhich would render `<div id=\"container\"></div>`\n\nhow about some classes?\n\n```jade\ndiv.user-details\n```\n\nrenders `<div class=\"user-details\"></div>`\n\nmultiple classes? _and_ an id? sure:\n\n```jade\ndiv#foo.bar.baz\n```\n\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\n\ndiv div div sure is annoying, how about:\n\n```jade\n#foo\n.bar\n```\n\nwhich is syntactic sugar for what we have already been doing, and outputs:\n\n```html\n<div id=\"foo\"></div><div class=\"bar\"></div>\n```\n\n<a name=\"a6-3\"/>\n### Tag Text\n\nSimply place some content after the tag:\n\n```jade\np wahoo!\n```\n\nrenders `<p>wahoo!</p>`.\n\nwell cool, but how about large bodies of text:\n\n```jade\np\n  | foo bar baz\n  | rawr rawr\n  | super cool\n  | go jade go\n```\n\nrenders `<p>foo bar baz rawr.....</p>`\n\ninterpolation? yup! both types of text can utilize interpolation,\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\n\n```jade\n#user #{name} &lt;#{email}&gt;\n```\n\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\n\nActually want `#{}` for some reason? escape it!\n\n```jade\np \\#{something}\n```\n\nnow we have `<p>#{something}</p>`\n\nWe can also utilize the unescaped variant `!{html}`, so the following\nwill result in a literal script tag:\n\n```jade\n- var html = \"<script></script>\"\n| !{html}\n```\n\nNested tags that also contain text can optionally use a text block:\n\n```jade\nlabel\n  | Username:\n  input(name='user[name]')\n```\n\nor immediate tag text:\n\n```jade\nlabel Username:\n  input(name='user[name]')\n```\n\nTags that accept _only_ text such as `script` and `style` do not\nneed the leading `|` character, for example:\n\n```jade\nhtml\n  head\n    title Example\n    script\n      if (foo) {\n        bar();\n      } else {\n        baz();\n      }\n```\n\nOnce again as an alternative, we may use a trailing `.` to indicate a text block, for example:\n\n```jade\np.\n  foo asdf\n  asdf\n   asdfasdfaf\n   asdf\n  asd.\n```\n\noutputs:\n\n```html\n<p>foo asdf\nasdf\n  asdfasdfaf\n  asdf\nasd.\n</p>\n```\n\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\n\n```jade\np .\n```\n\noutputs:\n\n```html\n<p>.</p>\n```\n\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\n\n```html\n<p>foo\\bar</p>\n```\n\nuse:\n\n```jade\np.\n  foo\\\\bar\n```\n\n<a name=\"a6-4\"/>\n### Comments\n\nSingle line comments currently look the same as JavaScript comments,\naka `//` and must be placed on their own line:\n\n```jade\n// just some paragraphs\np foo\np bar\n```\n\nwould output\n\n```html\n<!-- just some paragraphs -->\n<p>foo</p>\n<p>bar</p>\n```\n\nJade also supports unbuffered comments, by simply adding a hyphen:\n\n```jade\n//- will not output within markup\np foo\np bar\n```\n\noutputting\n\n```html\n<p>foo</p>\n<p>bar</p>\n```\n\n<a name=\"a6-5\"/>\n### Block Comments\n\n A block comment is legal as well:\n\n```jade\nbody\n  //\n    #content\n      h1 Example\n```\n\noutputting\n\n```html\n<body>\n  <!--\n  <div id=\"content\">\n    <h1>Example</h1>\n  </div>\n  -->\n</body>\n```\n\nJade supports conditional-comments as well, for example:\n\n```jade\nhead\n  //if lt IE 8\n    script(src='/ie-sucks.js')\n```\n\noutputs:\n\n```html\n<head>\n  <!--[if lt IE 8]>\n    <script src=\"/ie-sucks.js\"></script>\n  <![endif]-->\n</head>\n```\n\n<a name=\"a6-6\"/>\n### Nesting\n\n Jade supports nesting to define the tags in a natural way:\n\n```jade\nul\n  li.first\n    a(href='#') foo\n  li\n    a(href='#') bar\n  li.last\n    a(href='#') baz\n```\n\n<a name=\"a6-7\"/>\n### Block Expansion\n\n Block expansion allows you to create terse single-line nested tags,\n the following example is equivalent to the nesting example above.\n\n```jade\nul\n  li.first: a(href='#') foo\n  li: a(href='#') bar\n  li.last: a(href='#') baz\n```\n\n<a name=\"a6-8\"/>\n### Case\n\n The case statement takes the following form:\n\n```jade\nhtml\n  body\n    friends = 10\n    case friends\n      when 0\n        p you have no friends\n      when 1\n        p you have a friend\n      default\n        p you have #{friends} friends\n```\n\n Block expansion may also be used:\n\n```jade\nfriends = 5\n\nhtml\n  body\n    case friends\n      when 0: p you have no friends\n      when 1: p you have a friend\n      default: p you have #{friends} friends\n```\n\n<a name=\"a6-9\"/>\n### Attributes\n\nJade currently supports `(` and `)` as attribute delimiters.\n\n```jade\na(href='/login', title='View login page') Login\n```\n\nWhen a value is `undefined` or `null` the attribute is _not_ added,\nso this is fine, it will not compile `something=\"null\"`.\n\n```jade\ndiv(something=null)\n```\n\nBoolean attributes are also supported:\n\n```jade\ninput(type=\"checkbox\", checked)\n```\n\nBoolean attributes with code will only output the attribute when `true`:\n\n```jade\ninput(type=\"checkbox\", checked=someValue)\n```\n\nMultiple lines work too:\n\n```jade\ninput(type='checkbox',\n  name='agreement',\n  checked)\n```\n\nMultiple lines without the comma work fine:\n\n```jade\ninput(type='checkbox'\n  name='agreement'\n  checked)\n```\n\nFunky whitespace? fine:\n\n```jade\ninput(\n  type='checkbox'\n  name='agreement'\n  checked)\n```\n\nColons work:\n\n```jade\nrss(xmlns:atom=\"atom\")\n```\n\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\nwe could use regular javascript concatenation:\n\n```jade\na(href='/user/' + user.id)= user.name\n```\n\nor we could use jade's interpolation, which I added because everyone\nusing Ruby or CoffeeScript seems to think this is legal js..:\n\n```jade\na(href='/user/#{user.id}')= user.name\n```\n\nThe `class` attribute is special-cased when an array is given,\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\n\n```jade\nbody(class=bodyClasses)\n```\n\n<a name=\"a6-10\"/>\n### HTML\n\n Inline html is fine, we can use the pipe syntax to\n write arbitrary text, in this case some html:\n\n```jade\nhtml\n  body\n    | <h1>Title</h1>\n    | <p>foo bar baz</p>\n```\n\n Or we can use the trailing `.` to indicate to Jade that we\n only want text in this block, allowing us to omit the pipes:\n\n```jade\nhtml\n  body.\n    <h1>Title</h1>\n    <p>foo bar baz</p>\n```\n\n Both of these examples yield the same result:\n\n```html\n<html><body><h1>Title</h1>\n<p>foo bar baz</p>\n</body></html>\n```\n\n The same rule applies for anywhere you can have text\n in jade, raw html is fine:\n\n```jade\nhtml\n  body\n    h1 User <em>#{name}</em>\n```\n\n<a name=\"a6-11\"/>\n### Doctypes\n\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\n\n```jade\n!!!\n```\n\nor\n\n```jade\ndoctype\n```\n\nWill output the _html 5_  doctype, however:\n\n```jade\n!!! transitional\n```\n\nWill output the _transitional_ doctype.\n\nDoctypes are case-insensitive, so the following are equivalent:\n\n```jade\ndoctype Basic\ndoctype basic\n```\n\nit's also possible to simply pass a doctype literal:\n\n```jade\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\n```\n\nyielding:\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN>\n```\n\nBelow are the doctypes defined by default, which can easily be extended:\n\n```js\nvar doctypes = exports.doctypes = {\n  '5': '<!DOCTYPE html>',\n  'default': '<!DOCTYPE html>',\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n};\n```\n\nTo alter the default simply change:\n\n```js\njade.doctypes.default = 'whatever you want';\n```\n\n<a name=\"a7\"/>\n## Filters\n\nFilters are prefixed with `:`, for example `:markdown` and\npass the following block of text to an arbitrary function for processing. View the _features_\nat the top of this document for available filters.\n\n```jade\nbody\n  :markdown\n    Woah! jade _and_ markdown, very **cool**\n    we can even link to [stuff](http://google.com)\n```\n\nRenders:\n\n```html\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\n```\n\n<a name=\"a8\"/>\n## Code\n\nJade currently supports three classifications of executable code. The first\nis prefixed by `-`, and is not buffered:\n\n```jade\n- var foo = 'bar';\n```\n\nThis can be used for conditionals, or iteration:\n\n```jade\n- for (var key in obj)\n  p= obj[key]\n```\n\nDue to Jade's buffering techniques the following is valid as well:\n\n```jade\n- if (foo)\n  ul\n    li yay\n    li foo\n    li worked\n- else\n  p oh no! didnt work\n```\n\nHell, even verbose iteration:\n\n```jade\n- if (items.length)\n  ul\n    - items.forEach(function(item){\n      li= item\n    - })\n```\n\nAnything you want!\n\nNext up we have _escaped_ buffered code, which is used to\nbuffer a return value, which is prefixed by `=`:\n\n```jade\n- var foo = 'bar'\n= foo\nh1= foo\n```\n\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\nby default for security, however to output unescaped return values\nyou may use `!=`:\n\n```jade\np!= aVarContainingMoreHTML\n```\n\n Jade also has designer-friendly variants, making the literal JavaScript\n more expressive and declarative. For example the following assignments\n are equivalent, and the expression is still regular javascript:\n\n```jade\n- var foo = 'foo ' + 'bar'\nfoo = 'foo ' + 'bar'\n```\n\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\n\n```jade\nif foo == 'bar'\n  ul\n    li yay\n    li foo\n    li worked\nelse\n  p oh no! didnt work\n```\n\n<a name=\"a9\"/>\n## Iteration\n\n Along with vanilla JavaScript Jade also supports a subset of\n constructs that allow you to create more designer-friendly templates,\n one of these constructs is `each`, taking the form:\n\n```jade\neach VAL[, KEY] in OBJ\n```\n\nAn example iterating over an array:\n\n```jade\n- var items = [\"one\", \"two\", \"three\"]\neach item in items\n  li= item\n```\n\noutputs:\n\n```html\n<li>one</li>\n<li>two</li>\n<li>three</li>\n```\n\niterating an array with index:\n\n```jade\nitems = [\"one\", \"two\", \"three\"]\neach item, i in items\n  li #{item}: #{i}\n```\n\noutputs:\n\n```html\n<li>one: 0</li>\n<li>two: 1</li>\n<li>three: 2</li>\n```\n\niterating an object's keys and values:\n\n```jade\nobj = { foo: 'bar' }\neach val, key in obj\n  li #{key}: #{val}\n```\n\nwould output `<li>foo: bar</li>`\n\nInternally Jade converts these statements to regular\nJavaScript loops such as `users.forEach(function(user){`,\nso lexical scope and nesting applies as it would with regular\nJavaScript:\n\n```jade\neach user in users\n  each role in user.roles\n    li= role\n```\n\n You may also use `for` if you prefer:\n\n```jade\nfor user in users\n  for role in user.roles\n    li= role\n```\n\n<a name=\"a10\"/>\n## Conditionals\n\n Jade conditionals are equivalent to those using the code (`-`) prefix,\n however allow you to ditch parenthesis to become more designer friendly,\n however keep in mind the expression given is _regular_ JavaScript:\n\n```jade\nfor user in users\n  if user.role == 'admin'\n    p #{user.name} is an admin\n  else\n    p= user.name\n```\n\n is equivalent to the following using vanilla JavaScript literals:\n\n```jade\nfor user in users\n  - if (user.role == 'admin')\n    p #{user.name} is an admin\n  - else\n    p= user.name\n```\n\n  Jade also provides `unless` which is equivalent to `if (!(expr))`:\n\n```jade\nfor user in users\n  unless user.isAnonymous\n    p\n      | Click to view\n      a(href='/users/' + user.id)= user.name\n```\n\n<a name=\"a11\"/>\n## Template inheritance\n\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\n\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\n\n```jade\nhtml\n  head\n    h1 My Site - #{title}\n    block scripts\n      script(src='/jquery.js')\n  body\n    block content\n    block foot\n      #footer\n        p some footer content\n```\n\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\n\n```jade\nextends layout\n\nblock scripts\n  script(src='/jquery.js')\n  script(src='/pets.js')\n\nblock content\n  h1= title\n  each pet in pets\n    include pet\n```\n\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\n\n```jade\nextends regular-layout\n\nblock content\n  .sidebar\n    block sidebar\n      p nothing\n  .primary\n    block primary\n      p nothing\n```\n\n<a name=\"a12\"/>\n## Block append / prepend\n\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\n\n```jade\nhtml\n  head\n    block head\n      script(src='/vendor/jquery.js')\n      script(src='/vendor/caustic.js')\n  body\n    block content\n```\n\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\n\n```jade\nextends layout\n\nblock append head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n  When using `block append` or `block prepend` the `block` is optional:\n\n```jade\nextends layout\n\nappend head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n<a name=\"a13\"/>\n## Includes\n\n Includes allow you to statically include chunks of Jade,\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\n\n    ./layout.jade\n    ./includes/\n      ./head.jade\n      ./foot.jade\n\nand the following _layout.jade_:\n\n```jade\nhtml\n  include includes/head\n  body\n    h1 My Site\n    p Welcome to my super amazing site.\n    include includes/foot\n```\n\nboth includes _includes/head_ and _includes/foot_ are\nread relative to the `filename` option given to _layout.jade_,\nwhich should be an absolute path to this file, however Express\ndoes this for you. Include then parses these files, and injects\nthe AST produced to render what you would expect:\n\n```html\n<html>\n  <head>\n    <title>My Site</title>\n    <script src=\"/javascripts/jquery.js\">\n    </script><script src=\"/javascripts/app.js\"></script>\n  </head>\n  <body>\n    <h1>My Site</h1>\n    <p>Welcome to my super lame site.</p>\n    <div id=\"footer\">\n      <p>Copyright>(c) foobar</p>\n    </div>\n  </body>\n</html>\n```\n\nAs mentioned `include` can be used to include other content\nsuch as html or css. By providing an extension, Jade will\nread that file in, apply any [filter](#a7) matching the file's\nextension, and insert that content into the output.\n\n```jade\nhtml\n  head\n    //- css and js have simple filters that wrap them in\n        <style> and <script> tags, respectively\n    include stylesheet.css\n    include script.js\n  body\n    //- \"markdown\" files will use the \"markdown\" filter\n        to convert Markdown to HTML\n    include introduction.markdown\n    //- html files have no filter and are included verbatim\n    include content.html\n```\n\n  Include directives may also accept a block, in which case the\n  the given block will be appended to the _last_ block defined\n  in the file. For example if `head.jade` contains:\n\n```jade\nhead\n  script(src='/jquery.js')\n```\n\n We may append values by providing a block to `include head`\n as shown below, adding the two scripts.\n\n```jade\nhtml\n  include head\n    script(src='/foo.js')\n    script(src='/bar.js')\n  body\n    h1 test\n```\n\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\n\n```jade\nhead\n  yield\n  script(src='/jquery.js')\n  script(src='/jquery.ui.js')\n```\n\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example suppose we have `user.jade` which utilizes a `user` variable.\n\n```jade\nh1= user.name\np= user.occupation\n```\n\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\n\n```jade\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\n\neach user in users\n  .user\n    include user\n```\n\nyielding:\n\n```html\n<div class=\"user\">\n  <h1>Tobi</h1>\n  <p>Ferret</p>\n</div>\n```\n\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\n\n```jade\neach person in users\n  .user\n    user = person\n    include user\n```\n\n<a name=\"a14\"/>\n## Mixins\n\n Mixins are converted to regular JavaScript functions in\n the compiled template that Jade constructs. Mixins may\n take arguments, though not required:\n\n```jade\nmixin list\n  ul\n    li foo\n    li bar\n    li baz\n```\n\n  Utilizing a mixin without args looks similar, just without a block:\n\n```jade\nh2 Groceries\nmixin list\n```\n\n  Mixins may take one or more arguments as well, the arguments\n  are regular javascripts expressions, so for example the following:\n\n```jade\nmixin pets(pets)\n  ul.pets\n    - each pet in pets\n      li= pet\n\nmixin profile(user)\n  .user\n    h2= user.name\n    mixin pets(user.pets)\n```\n\n   Would yield something similar to the following html:\n\n```html\n<div class=\"user\">\n  <h2>tj</h2>\n  <ul class=\"pets\">\n    <li>tobi</li>\n    <li>loki</li>\n    <li>jane</li>\n    <li>manny</li>\n  </ul>\n</div>\n```\n\n<a name=\"a15\"/>\n## Generated Output\n\n Suppose we have the following Jade:\n\n```jade\n- var title = 'yay'\nh1.title #{title}\np Just an example\n```\n\n When the `compileDebug` option is not explicitly `false`, Jade\n will compile the function instrumented with `__.lineno = n;`, which\n in the event of an exception is passed to `rethrow()` which constructs\n a useful message relative to the initial Jade input.\n\n```js\nfunction anonymous(locals) {\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\n  var rethrow = jade.rethrow;\n  try {\n    var attrs = jade.attrs, escape = jade.escape;\n    var buf = [];\n    with (locals || {}) {\n      var interp;\n      __.lineno = 1;\n       var title = 'yay'\n      __.lineno = 2;\n      buf.push('<h1');\n      buf.push(attrs({ \"class\": ('title') }));\n      buf.push('>');\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n      buf.push('</h1>');\n      __.lineno = 3;\n      buf.push('<p>');\n      buf.push('Just an example');\n      buf.push('</p>');\n    }\n    return buf.join(\"\");\n  } catch (err) {\n    rethrow(err, __.input, __.filename, __.lineno);\n  }\n}\n```\n\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\nto toString() compiled templates and avoid running the entire Jade library on\nthe client, increasing performance, and decreasing the amount of JavaScript\nrequired.\n\n```js\nfunction anonymous(locals) {\n  var attrs = jade.attrs, escape = jade.escape;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    var title = 'yay'\n    buf.push('<h1');\n    buf.push(attrs({ \"class\": ('title') }));\n    buf.push('>');\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n    buf.push('</h1>');\n    buf.push('<p>');\n    buf.push('Just an example');\n    buf.push('</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a16\"/>\n## Example Makefile\n\n  Below is an example Makefile used to compile _pages/*.jade_\n  into _pages/*.html_ files by simply executing `make`.\n\n_Note:_ If you try to run this snippet and `make` throws a `missing separator` error, you should make sure all indented lines use a tab for indentation instead of spaces. (For whatever reason, GitHub renders this code snippet with 4-space indentation although the actual README file uses tabs in this snippet.)\n\n```make\nJADE = $(shell find . -wholename './pages/*.jade')\nHTML = $(JADE:.jade=.html)\n\nall: $(HTML)\n\n%.html: %.jade\n\tjade < $< --path $< > $@\n\nclean:\n\trm -f $(HTML)\n\n.PHONY: clean\n```\n\nthis can be combined with the `watch(1)` command to produce\na watcher-like behaviour:\n\n```bash\n$ watch make\n```\n\nor you use the watch option below:\n\n<a name=\"a17\"/>\n## jade(1)\n\n```\n\nUsage: jade [options] [dir|file ...]\n\nOptions:\n\n  -h, --help         output usage information\n  -V, --version      output the version number\n  -o, --obj <str>    javascript options object\n  -O, --out <dir>    output the compiled html to <dir>\n  -p, --path <path>  filename used to resolve includes\n  -P, --pretty       compile pretty html output\n  -c, --client       compile function for client-side runtime.js\n  -D, --no-debug     compile without debugging (smaller functions)\n  -w, --watch        watch files for changes and automatically re-render\n\nExamples:\n\n  # translate jade the templates dir\n  $ jade templates\n\n  # create {foo,bar}.html\n  $ jade {foo,bar}.jade\n\n  # jade over stdio\n  $ jade < my.jade > my.html\n\n  # jade over stdio\n  $ echo \"h1 Jade!\" | jade\n\n  # foo, bar dirs rendering to /tmp\n  $ jade foo bar --out /tmp \n\n```\n\n<a name=\"a18\"/>\n## Tutorials\n\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\n\n<a name=\"a19\"/>\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"jade@0.29.0","dist":{"shasum":"8c4bd1165634cac39368c92df9c0aab83e57648a","tarball":"http://registry.npmjs.org/jade/-/jade-0.29.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.30.0":{"name":"jade","description":"Jade template engine","version":"0.30.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"~1.1.1","mkdirp":"0.3.x","transformers":"~2.0.1","character-parser":"~1.0.0","monocle":"~0.1.46"},"devDependencies":{"coffee-script":"*","mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"test":"mocha -R spec","prepublish":"npm prune"},"readme":"# Jade - template engine \n[![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\n[![Dependency Status](https://gemnasium.com/visionmedia/jade.png)](https://gemnasium.com/visionmedia/jade)\n\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\n\n## Test drive\n\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\n\n## README Contents\n\n- [Features](#a1)\n- [Implementations](#a2)\n- [Installation](#a3)\n- [Browser Support](#a4)\n- [Public API](#a5)\n- [Syntax](#a6)\n    - [Line Endings](#a6-1)\n    - [Tags](#a6-2)\n    - [Tag Text](#a6-3)\n    - [Comments](#a6-4)\n    - [Block Comments](#a6-5)\n    - [Nesting](#a6-6)\n    - [Block Expansion](#a6-7)\n    - [Case](#a6-8)\n    - [Attributes](#a6-9)\n    - [HTML](#a6-10)\n    - [Doctypes](#a6-11)\n- [Filters](#a7)\n- [Code](#a8)\n- [Iteration](#a9)\n- [Conditionals](#a10)\n- [Template inheritance](#a11)\n- [Block append / prepend](#a12)\n- [Includes](#a13)\n- [Mixins](#a14)\n- [Generated Output](#a15)\n- [Example Makefile](#a16)\n- [jade(1)](#a17)\n- [Tutorials](#a18)\n- [License](#a19)\n\n<a name=\"a1\"/>\n## Features\n\n  - client-side support\n  - great readability\n  - flexible indentation\n  - block-expansion\n  - mixins\n  - static includes\n  - attribute interpolation\n  - code is escaped by default for security\n  - contextual error reporting at compile &amp; run time\n  - executable for compiling jade templates via the command line\n  - html 5 mode (the default doctype)\n  - optional memory caching\n  - combine dynamic and static tag classes\n  - parse tree manipulation via _filters_\n  - template inheritance\n  - block append / prepend\n  - supports [Express JS](http://expressjs.com) out of the box\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\n  - block comments\n  - no tag prefix\n  - filters\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\n    - :cdata\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\n  - [html2jade](https://github.com/donpark/html2jade) converter\n\n<a name=\"a2\"/>\n## Implementations\n\n  - [php](http://github.com/everzet/jade.php)\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\n  - [ruby](https://github.com/slim-template/slim)\n  - [python](https://github.com/SyrusAkbary/pyjade)\n  - [java](https://github.com/neuland/jade4j)\n\n<a name=\"a3\"/>\n## Installation\n\nvia npm:\n\n```bash\n$ npm install jade\n```\n\n<a name=\"a4\"/>\n## Browser Support\n\n To compile jade to a single file compatible for client-side use simply execute:\n\n```bash\n$ make jade.js\n```\n\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\n\n```bash\n$ make jade.min.js\n```\n\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\n\n```jade\np Hello #{name}\n```\n\n Can then be as small as the following generated function:\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\n  via `jade.attrs`, `jade.escape` etc.\n\n```js\nfunction anonymous(locals, attrs, escape, rethrow) {\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a5\"/>\n## Public API\n\n```js\nvar jade = require('jade');\n\n// Compile a function\nvar fn = jade.compile('string of jade', options);\nfn(locals);\n```\n\n### Options\n\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\n - `locals`    Local variable object\n - `filename`  Used in exceptions, and required when using includes\n - `debug`     Outputs tokens and function body generated\n - `compiler`  Compiler to replace jade's default\n - `compileDebug`  When `false` no debug instrumentation is compiled\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\n\n<a name=\"a6\"/>\n## Syntax\n\n<a name=\"a6-1\"/>\n### Line Endings\n\n**CRLF** and **CR** are converted to **LF** before parsing.\n\n<a name=\"a6-2\"/>\n### Tags\n\nA tag is simply a leading word:\n\n```jade\nhtml\n```\n\nfor example is converted to `<html></html>`\n\ntags can also have ids:\n\n```jade\ndiv#container\n```\n\nwhich would render `<div id=\"container\"></div>`\n\nhow about some classes?\n\n```jade\ndiv.user-details\n```\n\nrenders `<div class=\"user-details\"></div>`\n\nmultiple classes? _and_ an id? sure:\n\n```jade\ndiv#foo.bar.baz\n```\n\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\n\ndiv div div sure is annoying, how about:\n\n```jade\n#foo\n.bar\n```\n\nwhich is syntactic sugar for what we have already been doing, and outputs:\n\n```html\n<div id=\"foo\"></div><div class=\"bar\"></div>\n```\n\n<a name=\"a6-3\"/>\n### Tag Text\n\nSimply place some content after the tag:\n\n```jade\np wahoo!\n```\n\nrenders `<p>wahoo!</p>`.\n\nwell cool, but how about large bodies of text:\n\n```jade\np\n  | foo bar baz\n  | rawr rawr\n  | super cool\n  | go jade go\n```\n\nrenders `<p>foo bar baz rawr.....</p>`\n\ninterpolation? yup! both types of text can utilize interpolation,\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\n\n```jade\n#user #{name} &lt;#{email}&gt;\n```\n\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\n\nActually want `#{}` for some reason? escape it!\n\n```jade\np \\#{something}\n```\n\nnow we have `<p>#{something}</p>`\n\nWe can also utilize the unescaped variant `!{html}`, so the following\nwill result in a literal script tag:\n\n```jade\n- var html = \"<script></script>\"\n| !{html}\n```\n\nNested tags that also contain text can optionally use a text block:\n\n```jade\nlabel\n  | Username:\n  input(name='user[name]')\n```\n\nor immediate tag text:\n\n```jade\nlabel Username:\n  input(name='user[name]')\n```\n\nTags that accept _only_ text such as `script` and `style` do not\nneed the leading `|` character, for example:\n\n```jade\nhtml\n  head\n    title Example\n    script\n      if (foo) {\n        bar();\n      } else {\n        baz();\n      }\n```\n\nOnce again as an alternative, we may use a trailing `.` to indicate a text block, for example:\n\n```jade\np.\n  foo asdf\n  asdf\n   asdfasdfaf\n   asdf\n  asd.\n```\n\noutputs:\n\n```html\n<p>foo asdf\nasdf\n  asdfasdfaf\n  asdf\nasd.\n</p>\n```\n\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\n\n```jade\np .\n```\n\noutputs:\n\n```html\n<p>.</p>\n```\n\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\n\n```html\n<p>foo\\bar</p>\n```\n\nuse:\n\n```jade\np.\n  foo\\\\bar\n```\n\n<a name=\"a6-4\"/>\n### Comments\n\nSingle line comments currently look the same as JavaScript comments,\naka `//` and must be placed on their own line:\n\n```jade\n// just some paragraphs\np foo\np bar\n```\n\nwould output\n\n```html\n<!-- just some paragraphs -->\n<p>foo</p>\n<p>bar</p>\n```\n\nJade also supports unbuffered comments, by simply adding a hyphen:\n\n```jade\n//- will not output within markup\np foo\np bar\n```\n\noutputting\n\n```html\n<p>foo</p>\n<p>bar</p>\n```\n\n<a name=\"a6-5\"/>\n### Block Comments\n\n A block comment is legal as well:\n\n```jade\nbody\n  //\n    #content\n      h1 Example\n```\n\noutputting\n\n```html\n<body>\n  <!--\n  <div id=\"content\">\n    <h1>Example</h1>\n  </div>\n  -->\n</body>\n```\n\nJade supports conditional-comments as well, for example:\n\n```jade\nhead\n  //if lt IE 8\n    script(src='/ie-sucks.js')\n```\n\noutputs:\n\n```html\n<head>\n  <!--[if lt IE 8]>\n    <script src=\"/ie-sucks.js\"></script>\n  <![endif]-->\n</head>\n```\n\n<a name=\"a6-6\"/>\n### Nesting\n\n Jade supports nesting to define the tags in a natural way:\n\n```jade\nul\n  li.first\n    a(href='#') foo\n  li\n    a(href='#') bar\n  li.last\n    a(href='#') baz\n```\n\n<a name=\"a6-7\"/>\n### Block Expansion\n\n Block expansion allows you to create terse single-line nested tags,\n the following example is equivalent to the nesting example above.\n\n```jade\nul\n  li.first: a(href='#') foo\n  li: a(href='#') bar\n  li.last: a(href='#') baz\n```\n\n<a name=\"a6-8\"/>\n### Case\n\n The case statement takes the following form:\n\n```jade\nhtml\n  body\n    friends = 10\n    case friends\n      when 0\n        p you have no friends\n      when 1\n        p you have a friend\n      default\n        p you have #{friends} friends\n```\n\n Block expansion may also be used:\n\n```jade\nfriends = 5\n\nhtml\n  body\n    case friends\n      when 0: p you have no friends\n      when 1: p you have a friend\n      default: p you have #{friends} friends\n```\n\n<a name=\"a6-9\"/>\n### Attributes\n\nJade currently supports `(` and `)` as attribute delimiters.\n\n```jade\na(href='/login', title='View login page') Login\n```\n\nWhen a value is `undefined` or `null` the attribute is _not_ added,\nso this is fine, it will not compile `something=\"null\"`.\n\n```jade\ndiv(something=null)\n```\n\nBoolean attributes are also supported:\n\n```jade\ninput(type=\"checkbox\", checked)\n```\n\nBoolean attributes with code will only output the attribute when `true`:\n\n```jade\ninput(type=\"checkbox\", checked=someValue)\n```\n\nMultiple lines work too:\n\n```jade\ninput(type='checkbox',\n  name='agreement',\n  checked)\n```\n\nMultiple lines without the comma work fine:\n\n```jade\ninput(type='checkbox'\n  name='agreement'\n  checked)\n```\n\nFunky whitespace? fine:\n\n```jade\ninput(\n  type='checkbox'\n  name='agreement'\n  checked)\n```\n\nColons work:\n\n```jade\nrss(xmlns:atom=\"atom\")\n```\n\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\nwe could use regular javascript concatenation:\n\n```jade\na(href='/user/' + user.id)= user.name\n```\n\nor we could use jade's interpolation, which I added because everyone\nusing Ruby or CoffeeScript seems to think this is legal js..:\n\n```jade\na(href='/user/#{user.id}')= user.name\n```\n\nThe `class` attribute is special-cased when an array is given,\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\n\n```jade\nbody(class=bodyClasses)\n```\n\n<a name=\"a6-10\"/>\n### HTML\n\n Inline html is fine, we can use the pipe syntax to\n write arbitrary text, in this case some html:\n\n```jade\nhtml\n  body\n    | <h1>Title</h1>\n    | <p>foo bar baz</p>\n```\n\n Or we can use the trailing `.` to indicate to Jade that we\n only want text in this block, allowing us to omit the pipes:\n\n```jade\nhtml\n  body.\n    <h1>Title</h1>\n    <p>foo bar baz</p>\n```\n\n Both of these examples yield the same result:\n\n```html\n<html><body><h1>Title</h1>\n<p>foo bar baz</p>\n</body></html>\n```\n\n The same rule applies for anywhere you can have text\n in jade, raw html is fine:\n\n```jade\nhtml\n  body\n    h1 User <em>#{name}</em>\n```\n\n<a name=\"a6-11\"/>\n### Doctypes\n\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\n\n```jade\n!!!\n```\n\nor\n\n```jade\ndoctype\n```\n\nWill output the _html 5_  doctype, however:\n\n```jade\n!!! transitional\n```\n\nWill output the _transitional_ doctype.\n\nDoctypes are case-insensitive, so the following are equivalent:\n\n```jade\ndoctype Basic\ndoctype basic\n```\n\nit's also possible to simply pass a doctype literal:\n\n```jade\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\n```\n\nyielding:\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN>\n```\n\nBelow are the doctypes defined by default, which can easily be extended:\n\n```js\nvar doctypes = exports.doctypes = {\n  '5': '<!DOCTYPE html>',\n  'default': '<!DOCTYPE html>',\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n};\n```\n\nTo alter the default simply change:\n\n```js\njade.doctypes.default = 'whatever you want';\n```\n\n<a name=\"a7\"/>\n## Filters\n\nFilters are prefixed with `:`, for example `:markdown` and\npass the following block of text to an arbitrary function for processing. View the _features_\nat the top of this document for available filters.\n\n```jade\nbody\n  :markdown\n    Woah! jade _and_ markdown, very **cool**\n    we can even link to [stuff](http://google.com)\n```\n\nRenders:\n\n```html\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\n```\n\n<a name=\"a8\"/>\n## Code\n\nJade currently supports three classifications of executable code. The first\nis prefixed by `-`, and is not buffered:\n\n```jade\n- var foo = 'bar';\n```\n\nThis can be used for conditionals, or iteration:\n\n```jade\n- for (var key in obj)\n  p= obj[key]\n```\n\nDue to Jade's buffering techniques the following is valid as well:\n\n```jade\n- if (foo)\n  ul\n    li yay\n    li foo\n    li worked\n- else\n  p oh no! didnt work\n```\n\nHell, even verbose iteration:\n\n```jade\n- if (items.length)\n  ul\n    - items.forEach(function(item){\n      li= item\n    - })\n```\n\nAnything you want!\n\nNext up we have _escaped_ buffered code, which is used to\nbuffer a return value, which is prefixed by `=`:\n\n```jade\n- var foo = 'bar'\n= foo\nh1= foo\n```\n\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\nby default for security, however to output unescaped return values\nyou may use `!=`:\n\n```jade\np!= aVarContainingMoreHTML\n```\n\n Jade also has designer-friendly variants, making the literal JavaScript\n more expressive and declarative. For example the following assignments\n are equivalent, and the expression is still regular javascript:\n\n```jade\n- var foo = 'foo ' + 'bar'\nfoo = 'foo ' + 'bar'\n```\n\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\n\n```jade\nif foo == 'bar'\n  ul\n    li yay\n    li foo\n    li worked\nelse\n  p oh no! didnt work\n```\n\n<a name=\"a9\"/>\n## Iteration\n\n Along with vanilla JavaScript Jade also supports a subset of\n constructs that allow you to create more designer-friendly templates,\n one of these constructs is `each`, taking the form:\n\n```jade\neach VAL[, KEY] in OBJ\n```\n\nAn example iterating over an array:\n\n```jade\n- var items = [\"one\", \"two\", \"three\"]\neach item in items\n  li= item\n```\n\noutputs:\n\n```html\n<li>one</li>\n<li>two</li>\n<li>three</li>\n```\n\niterating an array with index:\n\n```jade\nitems = [\"one\", \"two\", \"three\"]\neach item, i in items\n  li #{item}: #{i}\n```\n\noutputs:\n\n```html\n<li>one: 0</li>\n<li>two: 1</li>\n<li>three: 2</li>\n```\n\niterating an object's keys and values:\n\n```jade\nobj = { foo: 'bar' }\neach val, key in obj\n  li #{key}: #{val}\n```\n\nwould output `<li>foo: bar</li>`\n\nInternally Jade converts these statements to regular\nJavaScript loops such as `users.forEach(function(user){`,\nso lexical scope and nesting applies as it would with regular\nJavaScript:\n\n```jade\neach user in users\n  each role in user.roles\n    li= role\n```\n\n You may also use `for` if you prefer:\n\n```jade\nfor user in users\n  for role in user.roles\n    li= role\n```\n\n<a name=\"a10\"/>\n## Conditionals\n\n Jade conditionals are equivalent to those using the code (`-`) prefix,\n however allow you to ditch parenthesis to become more designer friendly,\n however keep in mind the expression given is _regular_ JavaScript:\n\n```jade\nfor user in users\n  if user.role == 'admin'\n    p #{user.name} is an admin\n  else\n    p= user.name\n```\n\n is equivalent to the following using vanilla JavaScript literals:\n\n```jade\nfor user in users\n  - if (user.role == 'admin')\n    p #{user.name} is an admin\n  - else\n    p= user.name\n```\n\n  Jade also provides `unless` which is equivalent to `if (!(expr))`:\n\n```jade\nfor user in users\n  unless user.isAnonymous\n    p\n      | Click to view\n      a(href='/users/' + user.id)= user.name\n```\n\n<a name=\"a11\"/>\n## Template inheritance\n\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\n\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\n\n```jade\nhtml\n  head\n    h1 My Site - #{title}\n    block scripts\n      script(src='/jquery.js')\n  body\n    block content\n    block foot\n      #footer\n        p some footer content\n```\n\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\n\n```jade\nextends layout\n\nblock scripts\n  script(src='/jquery.js')\n  script(src='/pets.js')\n\nblock content\n  h1= title\n  each pet in pets\n    include pet\n```\n\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\n\n```jade\nextends regular-layout\n\nblock content\n  .sidebar\n    block sidebar\n      p nothing\n  .primary\n    block primary\n      p nothing\n```\n\n<a name=\"a12\"/>\n## Block append / prepend\n\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\n\n```jade\nhtml\n  head\n    block head\n      script(src='/vendor/jquery.js')\n      script(src='/vendor/caustic.js')\n  body\n    block content\n```\n\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\n\n```jade\nextends layout\n\nblock append head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n  When using `block append` or `block prepend` the `block` is optional:\n\n```jade\nextends layout\n\nappend head\n  script(src='/vendor/three.js')\n  script(src='/game.js')\n```\n\n<a name=\"a13\"/>\n## Includes\n\n Includes allow you to statically include chunks of Jade,\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\n\n    ./layout.jade\n    ./includes/\n      ./head.jade\n      ./foot.jade\n\nand the following _layout.jade_:\n\n```jade\nhtml\n  include includes/head\n  body\n    h1 My Site\n    p Welcome to my super amazing site.\n    include includes/foot\n```\n\nboth includes _includes/head_ and _includes/foot_ are\nread relative to the `filename` option given to _layout.jade_,\nwhich should be an absolute path to this file, however Express\ndoes this for you. Include then parses these files, and injects\nthe AST produced to render what you would expect:\n\n```html\n<html>\n  <head>\n    <title>My Site</title>\n    <script src=\"/javascripts/jquery.js\">\n    </script><script src=\"/javascripts/app.js\"></script>\n  </head>\n  <body>\n    <h1>My Site</h1>\n    <p>Welcome to my super lame site.</p>\n    <div id=\"footer\">\n      <p>Copyright>(c) foobar</p>\n    </div>\n  </body>\n</html>\n```\n\nAs mentioned `include` can be used to include other content\nsuch as html or css. By providing an extension, Jade will\nread that file in, apply any [filter](#a7) matching the file's\nextension, and insert that content into the output.\n\n```jade\nhtml\n  head\n    //- css and js have simple filters that wrap them in\n        <style> and <script> tags, respectively\n    include stylesheet.css\n    include script.js\n  body\n    //- \"markdown\" files will use the \"markdown\" filter\n        to convert Markdown to HTML\n    include introduction.markdown\n    //- html files have no filter and are included verbatim\n    include content.html\n```\n\n  Include directives may also accept a block, in which case the\n  the given block will be appended to the _last_ block defined\n  in the file. For example if `head.jade` contains:\n\n```jade\nhead\n  script(src='/jquery.js')\n```\n\n We may append values by providing a block to `include head`\n as shown below, adding the two scripts.\n\n```jade\nhtml\n  include head\n    script(src='/foo.js')\n    script(src='/bar.js')\n  body\n    h1 test\n```\n\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\n\n```jade\nhead\n  yield\n  script(src='/jquery.js')\n  script(src='/jquery.ui.js')\n```\n\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example suppose we have `user.jade` which utilizes a `user` variable.\n\n```jade\nh1= user.name\np= user.occupation\n```\n\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\n\n```jade\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\n\neach user in users\n  .user\n    include user\n```\n\nyielding:\n\n```html\n<div class=\"user\">\n  <h1>Tobi</h1>\n  <p>Ferret</p>\n</div>\n```\n\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\n\n```jade\neach person in users\n  .user\n    user = person\n    include user\n```\n\n<a name=\"a14\"/>\n## Mixins\n\n Mixins are converted to regular JavaScript functions in\n the compiled template that Jade constructs. Mixins may\n take arguments, though not required:\n\n```jade\nmixin list\n  ul\n    li foo\n    li bar\n    li baz\n```\n\n  Utilizing a mixin without args looks similar, just without a block:\n\n```jade\nh2 Groceries\nmixin list\n```\n\n  Mixins may take one or more arguments as well, the arguments\n  are regular javascripts expressions, so for example the following:\n\n```jade\nmixin pets(pets)\n  ul.pets\n    - each pet in pets\n      li= pet\n\nmixin profile(user)\n  .user\n    h2= user.name\n    mixin pets(user.pets)\n```\n\n   Would yield something similar to the following html:\n\n```html\n<div class=\"user\">\n  <h2>tj</h2>\n  <ul class=\"pets\">\n    <li>tobi</li>\n    <li>loki</li>\n    <li>jane</li>\n    <li>manny</li>\n  </ul>\n</div>\n```\n\n<a name=\"a15\"/>\n## Generated Output\n\n Suppose we have the following Jade:\n\n```jade\n- var title = 'yay'\nh1.title #{title}\np Just an example\n```\n\n When the `compileDebug` option is not explicitly `false`, Jade\n will compile the function instrumented with `__.lineno = n;`, which\n in the event of an exception is passed to `rethrow()` which constructs\n a useful message relative to the initial Jade input.\n\n```js\nfunction anonymous(locals) {\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\n  var rethrow = jade.rethrow;\n  try {\n    var attrs = jade.attrs, escape = jade.escape;\n    var buf = [];\n    with (locals || {}) {\n      var interp;\n      __.lineno = 1;\n       var title = 'yay'\n      __.lineno = 2;\n      buf.push('<h1');\n      buf.push(attrs({ \"class\": ('title') }));\n      buf.push('>');\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n      buf.push('</h1>');\n      __.lineno = 3;\n      buf.push('<p>');\n      buf.push('Just an example');\n      buf.push('</p>');\n    }\n    return buf.join(\"\");\n  } catch (err) {\n    rethrow(err, __.input, __.filename, __.lineno);\n  }\n}\n```\n\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\nto toString() compiled templates and avoid running the entire Jade library on\nthe client, increasing performance, and decreasing the amount of JavaScript\nrequired.\n\n```js\nfunction anonymous(locals) {\n  var attrs = jade.attrs, escape = jade.escape;\n  var buf = [];\n  with (locals || {}) {\n    var interp;\n    var title = 'yay'\n    buf.push('<h1');\n    buf.push(attrs({ \"class\": ('title') }));\n    buf.push('>');\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\n    buf.push('</h1>');\n    buf.push('<p>');\n    buf.push('Just an example');\n    buf.push('</p>');\n  }\n  return buf.join(\"\");\n}\n```\n\n<a name=\"a16\"/>\n## Example Makefile\n\n  Below is an example Makefile used to compile _pages/*.jade_\n  into _pages/*.html_ files by simply executing `make`.\n\n_Note:_ If you try to run this snippet and `make` throws a `missing separator` error, you should make sure all indented lines use a tab for indentation instead of spaces. (For whatever reason, GitHub renders this code snippet with 4-space indentation although the actual README file uses tabs in this snippet.)\n\n```make\nJADE = $(shell find . -wholename './pages/*.jade')\nHTML = $(JADE:.jade=.html)\n\nall: $(HTML)\n\n%.html: %.jade\n\tjade < $< --path $< > $@\n\nclean:\n\trm -f $(HTML)\n\n.PHONY: clean\n```\n\nthis can be combined with the `watch(1)` command to produce\na watcher-like behaviour:\n\n```bash\n$ watch make\n```\n\nor you use the watch option below:\n\n<a name=\"a17\"/>\n## jade(1)\n\n```\n\nUsage: jade [options] [dir|file ...]\n\nOptions:\n\n  -h, --help         output usage information\n  -V, --version      output the version number\n  -O, --obj <str>    javascript options object\n  -o, --out <dir>    output the compiled html to <dir>\n  -p, --path <path>  filename used to resolve includes\n  -P, --pretty       compile pretty html output\n  -c, --client       compile function for client-side runtime.js\n  -D, --no-debug     compile without debugging (smaller functions)\n  -w, --watch        watch files for changes and automatically re-render\n\nExamples:\n\n  # translate jade the templates dir\n  $ jade templates\n\n  # create {foo,bar}.html\n  $ jade {foo,bar}.jade\n\n  # jade over stdio\n  $ jade < my.jade > my.html\n\n  # jade over stdio\n  $ echo \"h1 Jade!\" | jade\n\n  # foo, bar dirs rendering to /tmp\n  $ jade foo bar --out /tmp \n\n```\n\n<a name=\"a18\"/>\n## Tutorials\n\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\n\n<a name=\"a19\"/>\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"jade@0.30.0","dist":{"shasum":"9ea816da61bea6fef4709b4d9f6b442f1e205ba3","tarball":"http://registry.npmjs.org/jade/-/jade-0.30.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.31.0":{"name":"jade","description":"Jade template engine","version":"0.31.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"1.1.1","mkdirp":"0.3.x","transformers":"2.0.1","character-parser":"1.0.2","monocle":"0.1.46","with":"1.0.3"},"devDependencies":{"coffee-script":"*","mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*","browserify":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"test":"mocha -R spec","prepublish":"npm prune","build":"npm run compile","compile":"npm run compile-full && npm run compile-runtime","compile-full":"browserify ./lib/jade.js --standalone jade -x ./node_modules/transformers > jade.js","compile-runtime":"browserify ./lib/runtime.js --standalone jade > runtime.js"},"browser":{"./lib/filters.js":"./lib/filters-client.js"},"readme":"# Jade - template engine \r\n[![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\r\n[![Dependency Status](https://gemnasium.com/visionmedia/jade.png)](https://gemnasium.com/visionmedia/jade)\r\n\r\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\r\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\r\n\r\n## Anouncment\r\n\r\nJade version 0.31.0 deprecated implicit text only support for scripts and styles.  To fix this all you need to do is add a `.` character after the script or style tag.\r\n\r\nIt is hoped that this change will make jade easier for newcommers to learn without affecting the power of the language or leading to excessive verboseness.\r\n\r\nIf you have a lot of jade files that need fixing you can use [fix-jade](https://github.com/ForbesLindesay/fix-jade) to attempt to automate the process.\r\n\r\n## Test drive\r\n\r\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\r\n\r\n## README Contents\r\n\r\n- [Features](#a1)\r\n- [Implementations](#a2)\r\n- [Installation](#a3)\r\n- [Browser Support](#a4)\r\n- [Public API](#a5)\r\n- [Syntax](#a6)\r\n    - [Line Endings](#a6-1)\r\n    - [Tags](#a6-2)\r\n    - [Tag Text](#a6-3)\r\n    - [Comments](#a6-4)\r\n    - [Block Comments](#a6-5)\r\n    - [Nesting](#a6-6)\r\n    - [Block Expansion](#a6-7)\r\n    - [Case](#a6-8)\r\n    - [Attributes](#a6-9)\r\n    - [HTML](#a6-10)\r\n    - [Doctypes](#a6-11)\r\n- [Filters](#a7)\r\n- [Code](#a8)\r\n- [Iteration](#a9)\r\n- [Conditionals](#a10)\r\n- [Template inheritance](#a11)\r\n- [Block append / prepend](#a12)\r\n- [Includes](#a13)\r\n- [Mixins](#a14)\r\n- [Generated Output](#a15)\r\n- [Example Makefile](#a16)\r\n- [jade(1)](#a17)\r\n- [Tutorials](#a18)\r\n- [License](#a19)\r\n\r\n<a name=\"a1\"/>\r\n## Features\r\n\r\n  - client-side support\r\n  - great readability\r\n  - flexible indentation\r\n  - block-expansion\r\n  - mixins\r\n  - static includes\r\n  - attribute interpolation\r\n  - code is escaped by default for security\r\n  - contextual error reporting at compile &amp; run time\r\n  - executable for compiling jade templates via the command line\r\n  - html 5 mode (the default doctype)\r\n  - optional memory caching\r\n  - combine dynamic and static tag classes\r\n  - parse tree manipulation via _filters_\r\n  - template inheritance\r\n  - block append / prepend\r\n  - supports [Express JS](http://expressjs.com) out of the box\r\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\r\n  - block comments\r\n  - no tag prefix\r\n  - filters\r\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\r\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\r\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\r\n    - :cdata\r\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\r\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\r\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\r\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\r\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\r\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\r\n  - [html2jade](https://github.com/donpark/html2jade) converter\r\n\r\n<a name=\"a2\"/>\r\n## Implementations\r\n\r\n  - [php](http://github.com/everzet/jade.php)\r\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\r\n  - [ruby](https://github.com/slim-template/slim)\r\n  - [python](https://github.com/SyrusAkbary/pyjade)\r\n  - [java](https://github.com/neuland/jade4j)\r\n\r\n<a name=\"a3\"/>\r\n## Installation\r\n\r\nvia npm:\r\n\r\n```bash\r\n$ npm install jade\r\n```\r\n\r\n<a name=\"a4\"/>\r\n## Browser Support\r\n\r\n To compile jade to a single file compatible for client-side use simply execute:\r\n\r\n```bash\r\n$ make jade.js\r\n```\r\n\r\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\r\n\r\n```bash\r\n$ make jade.min.js\r\n```\r\n\r\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\r\n\r\n```jade\r\np Hello #{name}\r\n```\r\n\r\n Can then be as small as the following generated function:\r\n\r\n```js\r\nfunction anonymous(locals, attrs, escape, rethrow) {\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\r\n  via `jade.attrs`, `jade.escape` etc.\r\n\r\n```js\r\nfunction anonymous(locals, attrs, escape, rethrow) {\r\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n<a name=\"a5\"/>\r\n## Public API\r\n\r\n```js\r\nvar jade = require('jade');\r\n\r\n// Compile a function\r\nvar fn = jade.compile('string of jade', options);\r\nfn(locals);\r\n```\r\n\r\n### Options\r\n\r\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\r\n - `locals`    Local variable object\r\n - `filename`  Used in exceptions, and required when using includes\r\n - `debug`     Outputs tokens and function body generated\r\n - `compiler`  Compiler to replace jade's default\r\n - `compileDebug`  When `false` no debug instrumentation is compiled\r\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\r\n\r\n<a name=\"a6\"/>\r\n## Syntax\r\n\r\n<a name=\"a6-1\"/>\r\n### Line Endings\r\n\r\n**CRLF** and **CR** are converted to **LF** before parsing.\r\n\r\n<a name=\"a6-2\"/>\r\n### Tags\r\n\r\nA tag is simply a leading word:\r\n\r\n```jade\r\nhtml\r\n```\r\n\r\nfor example is converted to `<html></html>`\r\n\r\ntags can also have ids:\r\n\r\n```jade\r\ndiv#container\r\n```\r\n\r\nwhich would render `<div id=\"container\"></div>`\r\n\r\nhow about some classes?\r\n\r\n```jade\r\ndiv.user-details\r\n```\r\n\r\nrenders `<div class=\"user-details\"></div>`\r\n\r\nmultiple classes? _and_ an id? sure:\r\n\r\n```jade\r\ndiv#foo.bar.baz\r\n```\r\n\r\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\r\n\r\ndiv div div sure is annoying, how about:\r\n\r\n```jade\r\n#foo\r\n.bar\r\n```\r\n\r\nwhich is syntactic sugar for what we have already been doing, and outputs:\r\n\r\n```html\r\n<div id=\"foo\"></div><div class=\"bar\"></div>\r\n```\r\n\r\n<a name=\"a6-3\"/>\r\n### Tag Text\r\n\r\nSimply place some content after the tag:\r\n\r\n```jade\r\np wahoo!\r\n```\r\n\r\nrenders `<p>wahoo!</p>`.\r\n\r\nwell cool, but how about large bodies of text:\r\n\r\n```jade\r\np\r\n  | foo bar baz\r\n  | rawr rawr\r\n  | super cool\r\n  | go jade go\r\n```\r\n\r\nrenders `<p>foo bar baz rawr.....</p>`\r\n\r\ninterpolation? yup! both types of text can utilize interpolation,\r\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\r\n\r\n```jade\r\n#user #{name} &lt;#{email}&gt;\r\n```\r\n\r\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\r\n\r\nActually want `#{}` for some reason? escape it!\r\n\r\n```jade\r\np \\#{something}\r\n```\r\n\r\nnow we have `<p>#{something}</p>`\r\n\r\nWe can also utilize the unescaped variant `!{html}`, so the following\r\nwill result in a literal script tag:\r\n\r\n```jade\r\n- var html = \"<script></script>\"\r\n| !{html}\r\n```\r\n\r\nNested tags that also contain text can optionally use a text block:\r\n\r\n```jade\r\nlabel\r\n  | Username:\r\n  input(name='user[name]')\r\n```\r\n\r\nor immediate tag text:\r\n\r\n```jade\r\nlabel Username:\r\n  input(name='user[name]')\r\n```\r\n\r\nAs an alternative, we may use a trailing `.` to indicate a text block, for example:\r\n\r\n```jade\r\np.\r\n  foo asdf\r\n  asdf\r\n   asdfasdfaf\r\n   asdf\r\n  asd.\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<p>foo asdf\r\nasdf\r\n  asdfasdfaf\r\n  asdf\r\nasd.\r\n</p>\r\n```\r\n\r\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\r\n\r\n```jade\r\np .\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<p>.</p>\r\n```\r\n\r\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\r\n\r\n```html\r\n<p>foo\\bar</p>\r\n```\r\n\r\nuse:\r\n\r\n```jade\r\np.\r\n  foo\\\\bar\r\n```\r\n\r\n<a name=\"a6-4\"/>\r\n### Comments\r\n\r\nSingle line comments currently look the same as JavaScript comments,\r\naka `//` and must be placed on their own line:\r\n\r\n```jade\r\n// just some paragraphs\r\np foo\r\np bar\r\n```\r\n\r\nwould output\r\n\r\n```html\r\n<!-- just some paragraphs -->\r\n<p>foo</p>\r\n<p>bar</p>\r\n```\r\n\r\nJade also supports unbuffered comments, by simply adding a hyphen:\r\n\r\n```jade\r\n//- will not output within markup\r\np foo\r\np bar\r\n```\r\n\r\noutputting\r\n\r\n```html\r\n<p>foo</p>\r\n<p>bar</p>\r\n```\r\n\r\n<a name=\"a6-5\"/>\r\n### Block Comments\r\n\r\n A block comment is legal as well:\r\n\r\n```jade\r\nbody\r\n  //\r\n    #content\r\n      h1 Example\r\n```\r\n\r\noutputting\r\n\r\n```html\r\n<body>\r\n  <!--\r\n  <div id=\"content\">\r\n    <h1>Example</h1>\r\n  </div>\r\n  -->\r\n</body>\r\n```\r\n\r\nJade supports conditional-comments as well, for example:\r\n\r\n```jade\r\nhead\r\n  //if lt IE 8\r\n    script(src='/ie-sucks.js')\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<head>\r\n  <!--[if lt IE 8]>\r\n    <script src=\"/ie-sucks.js\"></script>\r\n  <![endif]-->\r\n</head>\r\n```\r\n\r\n<a name=\"a6-6\"/>\r\n### Nesting\r\n\r\n Jade supports nesting to define the tags in a natural way:\r\n\r\n```jade\r\nul\r\n  li.first\r\n    a(href='#') foo\r\n  li\r\n    a(href='#') bar\r\n  li.last\r\n    a(href='#') baz\r\n```\r\n\r\n<a name=\"a6-7\"/>\r\n### Block Expansion\r\n\r\n Block expansion allows you to create terse single-line nested tags,\r\n the following example is equivalent to the nesting example above.\r\n\r\n```jade\r\nul\r\n  li.first: a(href='#') foo\r\n  li: a(href='#') bar\r\n  li.last: a(href='#') baz\r\n```\r\n\r\n<a name=\"a6-8\"/>\r\n### Case\r\n\r\n The case statement takes the following form:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    friends = 10\r\n    case friends\r\n      when 0\r\n        p you have no friends\r\n      when 1\r\n        p you have a friend\r\n      default\r\n        p you have #{friends} friends\r\n```\r\n\r\n Block expansion may also be used:\r\n\r\n```jade\r\nfriends = 5\r\n\r\nhtml\r\n  body\r\n    case friends\r\n      when 0: p you have no friends\r\n      when 1: p you have a friend\r\n      default: p you have #{friends} friends\r\n```\r\n\r\n<a name=\"a6-9\"/>\r\n### Attributes\r\n\r\nJade currently supports `(` and `)` as attribute delimiters.\r\n\r\n```jade\r\na(href='/login', title='View login page') Login\r\n```\r\n\r\nWhen a value is `undefined` or `null` the attribute is _not_ added,\r\nso this is fine, it will not compile `something=\"null\"`.\r\n\r\n```jade\r\ndiv(something=null)\r\n```\r\n\r\nBoolean attributes are also supported:\r\n\r\n```jade\r\ninput(type=\"checkbox\", checked)\r\n```\r\n\r\nBoolean attributes with code will only output the attribute when `true`:\r\n\r\n```jade\r\ninput(type=\"checkbox\", checked=someValue)\r\n```\r\n\r\nMultiple lines work too:\r\n\r\n```jade\r\ninput(type='checkbox',\r\n  name='agreement',\r\n  checked)\r\n```\r\n\r\nMultiple lines without the comma work fine:\r\n\r\n```jade\r\ninput(type='checkbox'\r\n  name='agreement'\r\n  checked)\r\n```\r\n\r\nFunky whitespace? fine:\r\n\r\n```jade\r\ninput(\r\n  type='checkbox'\r\n  name='agreement'\r\n  checked)\r\n```\r\n\r\nColons work:\r\n\r\n```jade\r\nrss(xmlns:atom=\"atom\")\r\n```\r\n\r\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\r\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\r\nwe could use regular javascript concatenation:\r\n\r\n```jade\r\na(href='/user/' + user.id)= user.name\r\n```\r\n\r\nor we could use jade's interpolation, which I added because everyone\r\nusing Ruby or CoffeeScript seems to think this is legal js..:\r\n\r\n```jade\r\na(href='/user/#{user.id}')= user.name\r\n```\r\n\r\nThe `class` attribute is special-cased when an array is given,\r\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\r\n\r\n```jade\r\nbody(class=bodyClasses)\r\n```\r\n\r\n<a name=\"a6-10\"/>\r\n### HTML\r\n\r\n Inline html is fine, we can use the pipe syntax to\r\n write arbitrary text, in this case some html:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    | <h1>Title</h1>\r\n    | <p>foo bar baz</p>\r\n```\r\n\r\n Or we can use the trailing `.` to indicate to Jade that we\r\n only want text in this block, allowing us to omit the pipes:\r\n\r\n```jade\r\nhtml\r\n  body.\r\n    <h1>Title</h1>\r\n    <p>foo bar baz</p>\r\n```\r\n\r\n Both of these examples yield the same result:\r\n\r\n```html\r\n<html><body><h1>Title</h1>\r\n<p>foo bar baz</p>\r\n</body></html>\r\n```\r\n\r\n The same rule applies for anywhere you can have text\r\n in jade, raw html is fine:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    h1 User <em>#{name}</em>\r\n```\r\n\r\n<a name=\"a6-11\"/>\r\n### Doctypes\r\n\r\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\r\n\r\n```jade\r\n!!!\r\n```\r\n\r\nor\r\n\r\n```jade\r\ndoctype\r\n```\r\n\r\nWill output the _html 5_  doctype, however:\r\n\r\n```jade\r\n!!! transitional\r\n```\r\n\r\nWill output the _transitional_ doctype.\r\n\r\nDoctypes are case-insensitive, so the following are equivalent:\r\n\r\n```jade\r\ndoctype Basic\r\ndoctype basic\r\n```\r\n\r\nit's also possible to simply pass a doctype literal:\r\n\r\n```jade\r\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"\r\n```\r\n\r\nyielding:\r\n\r\n```html\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\">\r\n```\r\n\r\nBelow are the doctypes defined by default, which can easily be extended:\r\n\r\n```js\r\nvar doctypes = exports.doctypes = {\r\n  '5': '<!DOCTYPE html>',\r\n  'default': '<!DOCTYPE html>',\r\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\r\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\r\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\r\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\r\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\r\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\r\n};\r\n```\r\n\r\nTo alter the default simply change:\r\n\r\n```js\r\njade.doctypes.default = 'whatever you want';\r\n```\r\n\r\n<a name=\"a7\"/>\r\n## Filters\r\n\r\nFilters are prefixed with `:`, for example `:markdown` and\r\npass the following block of text to an arbitrary function for processing. View the _features_\r\nat the top of this document for available filters.\r\n\r\n```jade\r\nbody\r\n  :markdown\r\n    Woah! jade _and_ markdown, very **cool**\r\n    we can even link to [stuff](http://google.com)\r\n```\r\n\r\nRenders:\r\n\r\n```html\r\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\r\n```\r\n\r\n<a name=\"a8\"/>\r\n## Code\r\n\r\nJade currently supports three classifications of executable code. The first\r\nis prefixed by `-`, and is not buffered:\r\n\r\n```jade\r\n- var foo = 'bar';\r\n```\r\n\r\nThis can be used for conditionals, or iteration:\r\n\r\n```jade\r\n- for (var key in obj)\r\n  p= obj[key]\r\n```\r\n\r\nDue to Jade's buffering techniques the following is valid as well:\r\n\r\n```jade\r\n- if (foo)\r\n  ul\r\n    li yay\r\n    li foo\r\n    li worked\r\n- else\r\n  p oh no! didnt work\r\n```\r\n\r\nHell, even verbose iteration:\r\n\r\n```jade\r\n- if (items.length)\r\n  ul\r\n    - items.forEach(function(item){\r\n      li= item\r\n    - })\r\n```\r\n\r\nAnything you want!\r\n\r\nNext up we have _escaped_ buffered code, which is used to\r\nbuffer a return value, which is prefixed by `=`:\r\n\r\n```jade\r\n- var foo = 'bar'\r\n= foo\r\nh1= foo\r\n```\r\n\r\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\r\nby default for security, however to output unescaped return values\r\nyou may use `!=`:\r\n\r\n```jade\r\np!= aVarContainingMoreHTML\r\n```\r\n\r\n Jade also has designer-friendly variants, making the literal JavaScript\r\n more expressive and declarative. For example the following assignments\r\n are equivalent, and the expression is still regular javascript:\r\n\r\n```jade\r\n- var foo = 'foo ' + 'bar'\r\nfoo = 'foo ' + 'bar'\r\n```\r\n\r\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\r\n\r\n```jade\r\nif foo == 'bar'\r\n  ul\r\n    li yay\r\n    li foo\r\n    li worked\r\nelse\r\n  p oh no! didnt work\r\n```\r\n\r\n<a name=\"a9\"/>\r\n## Iteration\r\n\r\n Along with vanilla JavaScript Jade also supports a subset of\r\n constructs that allow you to create more designer-friendly templates,\r\n one of these constructs is `each`, taking the form:\r\n\r\n```jade\r\neach VAL[, KEY] in OBJ\r\n```\r\n\r\nAn example iterating over an array:\r\n\r\n```jade\r\n- var items = [\"one\", \"two\", \"three\"]\r\neach item in items\r\n  li= item\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<li>one</li>\r\n<li>two</li>\r\n<li>three</li>\r\n```\r\n\r\niterating an array with index:\r\n\r\n```jade\r\nitems = [\"one\", \"two\", \"three\"]\r\neach item, i in items\r\n  li #{item}: #{i}\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<li>one: 0</li>\r\n<li>two: 1</li>\r\n<li>three: 2</li>\r\n```\r\n\r\niterating an object's keys and values:\r\n\r\n```jade\r\nobj = { foo: 'bar' }\r\neach val, key in obj\r\n  li #{key}: #{val}\r\n```\r\n\r\nwould output `<li>foo: bar</li>`\r\n\r\nInternally Jade converts these statements to regular\r\nJavaScript loops such as `users.forEach(function(user){`,\r\nso lexical scope and nesting applies as it would with regular\r\nJavaScript:\r\n\r\n```jade\r\neach user in users\r\n  each role in user.roles\r\n    li= role\r\n```\r\n\r\n You may also use `for` if you prefer:\r\n\r\n```jade\r\nfor user in users\r\n  for role in user.roles\r\n    li= role\r\n```\r\n\r\n<a name=\"a10\"/>\r\n## Conditionals\r\n\r\n Jade conditionals are equivalent to those using the code (`-`) prefix,\r\n however allow you to ditch parenthesis to become more designer friendly,\r\n however keep in mind the expression given is _regular_ JavaScript:\r\n\r\n```jade\r\nfor user in users\r\n  if user.role == 'admin'\r\n    p #{user.name} is an admin\r\n  else\r\n    p= user.name\r\n```\r\n\r\n is equivalent to the following using vanilla JavaScript literals:\r\n\r\n```jade\r\nfor user in users\r\n  - if (user.role == 'admin')\r\n    p #{user.name} is an admin\r\n  - else\r\n    p= user.name\r\n```\r\n\r\n  Jade also provides `unless` which is equivalent to `if (!(expr))`:\r\n\r\n```jade\r\nfor user in users\r\n  unless user.isAnonymous\r\n    p\r\n      | Click to view\r\n      a(href='/users/' + user.id)= user.name\r\n```\r\n\r\n<a name=\"a11\"/>\r\n## Template inheritance\r\n\r\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\r\n\r\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\r\n\r\n```jade\r\nhtml\r\n  head\r\n    h1 My Site - #{title}\r\n    block scripts\r\n      script(src='/jquery.js')\r\n  body\r\n    block content\r\n    block foot\r\n      #footer\r\n        p some footer content\r\n```\r\n\r\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\r\n\r\n```jade\r\nextends layout\r\n\r\nblock scripts\r\n  script(src='/jquery.js')\r\n  script(src='/pets.js')\r\n\r\nblock content\r\n  h1= title\r\n  each pet in pets\r\n    include pet\r\n```\r\n\r\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\r\n\r\n```jade\r\nextends regular-layout\r\n\r\nblock content\r\n  .sidebar\r\n    block sidebar\r\n      p nothing\r\n  .primary\r\n    block primary\r\n      p nothing\r\n```\r\n\r\n<a name=\"a12\"/>\r\n## Block append / prepend\r\n\r\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\r\n\r\n```jade\r\nhtml\r\n  head\r\n    block head\r\n      script(src='/vendor/jquery.js')\r\n      script(src='/vendor/caustic.js')\r\n  body\r\n    block content\r\n```\r\n\r\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\r\n\r\n```jade\r\nextends layout\r\n\r\nblock append head\r\n  script(src='/vendor/three.js')\r\n  script(src='/game.js')\r\n```\r\n\r\n  When using `block append` or `block prepend` the `block` is optional:\r\n\r\n```jade\r\nextends layout\r\n\r\nappend head\r\n  script(src='/vendor/three.js')\r\n  script(src='/game.js')\r\n```\r\n\r\n<a name=\"a13\"/>\r\n## Includes\r\n\r\n Includes allow you to statically include chunks of Jade,\r\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\r\n\r\n    ./layout.jade\r\n    ./includes/\r\n      ./head.jade\r\n      ./foot.jade\r\n\r\nand the following _layout.jade_:\r\n\r\n```jade\r\nhtml\r\n  include includes/head\r\n  body\r\n    h1 My Site\r\n    p Welcome to my super amazing site.\r\n    include includes/foot\r\n```\r\n\r\nboth includes _includes/head_ and _includes/foot_ are\r\nread relative to the `filename` option given to _layout.jade_,\r\nwhich should be an absolute path to this file, however Express\r\ndoes this for you. Include then parses these files, and injects\r\nthe AST produced to render what you would expect:\r\n\r\n```html\r\n<html>\r\n  <head>\r\n    <title>My Site</title>\r\n    <script src=\"/javascripts/jquery.js\">\r\n    </script><script src=\"/javascripts/app.js\"></script>\r\n  </head>\r\n  <body>\r\n    <h1>My Site</h1>\r\n    <p>Welcome to my super lame site.</p>\r\n    <div id=\"footer\">\r\n      <p>Copyright>(c) foobar</p>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nAs mentioned `include` can be used to include other content\r\nsuch as html or css. By providing an extension, Jade will\r\nread that file in, apply any [filter](#a7) matching the file's\r\nextension, and insert that content into the output.\r\n\r\n```jade\r\nhtml\r\n  head\r\n    //- css and js have simple filters that wrap them in\r\n        <style> and <script> tags, respectively\r\n    include stylesheet.css\r\n    include script.js\r\n  body\r\n    //- \"markdown\" files will use the \"markdown\" filter\r\n        to convert Markdown to HTML\r\n    include introduction.markdown\r\n    //- html files have no filter and are included verbatim\r\n    include content.html\r\n```\r\n\r\n  Include directives may also accept a block, in which case the\r\n  the given block will be appended to the _last_ block defined\r\n  in the file. For example if `head.jade` contains:\r\n\r\n```jade\r\nhead\r\n  script(src='/jquery.js')\r\n```\r\n\r\n We may append values by providing a block to `include head`\r\n as shown below, adding the two scripts.\r\n\r\n```jade\r\nhtml\r\n  include head\r\n    script(src='/foo.js')\r\n    script(src='/bar.js')\r\n  body\r\n    h1 test\r\n```\r\n\r\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\r\n\r\n```jade\r\nhead\r\n  yield\r\n  script(src='/jquery.js')\r\n  script(src='/jquery.ui.js')\r\n```\r\n\r\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example suppose we have `user.jade` which utilizes a `user` variable.\r\n\r\n```jade\r\nh1= user.name\r\np= user.occupation\r\n```\r\n\r\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\r\n\r\n```jade\r\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\r\n\r\neach user in users\r\n  .user\r\n    include user\r\n```\r\n\r\nyielding:\r\n\r\n```html\r\n<div class=\"user\">\r\n  <h1>Tobi</h1>\r\n  <p>Ferret</p>\r\n</div>\r\n```\r\n\r\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\r\n\r\n```jade\r\neach person in users\r\n  .user\r\n    user = person\r\n    include user\r\n```\r\n\r\n<a name=\"a14\"/>\r\n## Mixins\r\n\r\n Mixins are converted to regular JavaScript functions in\r\n the compiled template that Jade constructs. Mixins may\r\n take arguments, though not required:\r\n\r\n```jade\r\nmixin list\r\n  ul\r\n    li foo\r\n    li bar\r\n    li baz\r\n```\r\n\r\n  Utilizing a mixin without args looks similar, just without a block:\r\n\r\n```jade\r\nh2 Groceries\r\nmixin list\r\n```\r\n\r\n  Mixins may take one or more arguments as well, the arguments\r\n  are regular javascripts expressions, so for example the following:\r\n\r\n```jade\r\nmixin pets(pets)\r\n  ul.pets\r\n    - each pet in pets\r\n      li= pet\r\n\r\nmixin profile(user)\r\n  .user\r\n    h2= user.name\r\n    mixin pets(user.pets)\r\n```\r\n\r\n   Would yield something similar to the following html:\r\n\r\n```html\r\n<div class=\"user\">\r\n  <h2>tj</h2>\r\n  <ul class=\"pets\">\r\n    <li>tobi</li>\r\n    <li>loki</li>\r\n    <li>jane</li>\r\n    <li>manny</li>\r\n  </ul>\r\n</div>\r\n```\r\n\r\n<a name=\"a15\"/>\r\n## Generated Output\r\n\r\n Suppose we have the following Jade:\r\n\r\n```jade\r\n- var title = 'yay'\r\nh1.title #{title}\r\np Just an example\r\n```\r\n\r\n When the `compileDebug` option is not explicitly `false`, Jade\r\n will compile the function instrumented with `__.lineno = n;`, which\r\n in the event of an exception is passed to `rethrow()` which constructs\r\n a useful message relative to the initial Jade input.\r\n\r\n```js\r\nfunction anonymous(locals) {\r\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\r\n  var rethrow = jade.rethrow;\r\n  try {\r\n    var attrs = jade.attrs, escape = jade.escape;\r\n    var buf = [];\r\n    with (locals || {}) {\r\n      var interp;\r\n      __.lineno = 1;\r\n       var title = 'yay'\r\n      __.lineno = 2;\r\n      buf.push('<h1');\r\n      buf.push(attrs({ \"class\": ('title') }));\r\n      buf.push('>');\r\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\r\n      buf.push('</h1>');\r\n      __.lineno = 3;\r\n      buf.push('<p>');\r\n      buf.push('Just an example');\r\n      buf.push('</p>');\r\n    }\r\n    return buf.join(\"\");\r\n  } catch (err) {\r\n    rethrow(err, __.input, __.filename, __.lineno);\r\n  }\r\n}\r\n```\r\n\r\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\r\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\r\nto toString() compiled templates and avoid running the entire Jade library on\r\nthe client, increasing performance, and decreasing the amount of JavaScript\r\nrequired.\r\n\r\n```js\r\nfunction anonymous(locals) {\r\n  var attrs = jade.attrs, escape = jade.escape;\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    var title = 'yay'\r\n    buf.push('<h1');\r\n    buf.push(attrs({ \"class\": ('title') }));\r\n    buf.push('>');\r\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\r\n    buf.push('</h1>');\r\n    buf.push('<p>');\r\n    buf.push('Just an example');\r\n    buf.push('</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n<a name=\"a16\"/>\r\n## Example Makefile\r\n\r\n  Below is an example Makefile used to compile _pages/*.jade_\r\n  into _pages/*.html_ files by simply executing `make`.\r\n\r\n_Note:_ If you try to run this snippet and `make` throws a `missing separator` error, you should make sure all indented lines use a tab for indentation instead of spaces. (For whatever reason, GitHub renders this code snippet with 4-space indentation although the actual README file uses tabs in this snippet.)\r\n\r\n```make\r\nJADE = $(shell find . -wholename './pages/*.jade')\r\nHTML = $(JADE:.jade=.html)\r\n\r\nall: $(HTML)\r\n\r\n%.html: %.jade\r\n\tjade < $< --path $< > $@\r\n\r\nclean:\r\n\trm -f $(HTML)\r\n\r\n.PHONY: clean\r\n```\r\n\r\nthis can be combined with the `watch(1)` command to produce\r\na watcher-like behaviour:\r\n\r\n```bash\r\n$ watch make\r\n```\r\n\r\nor you use the watch option below:\r\n\r\n<a name=\"a17\"/>\r\n## jade(1)\r\n\r\n```\r\n\r\nUsage: jade [options] [dir|file ...]\r\n\r\nOptions:\r\n\r\n  -h, --help         output usage information\r\n  -V, --version      output the version number\r\n  -O, --obj <str>    javascript options object\r\n  -o, --out <dir>    output the compiled html to <dir>\r\n  -p, --path <path>  filename used to resolve includes\r\n  -P, --pretty       compile pretty html output\r\n  -c, --client       compile function for client-side runtime.js\r\n  -D, --no-debug     compile without debugging (smaller functions)\r\n  -w, --watch        watch files for changes and automatically re-render\r\n\r\nExamples:\r\n\r\n  # translate jade the templates dir\r\n  $ jade templates\r\n\r\n  # create {foo,bar}.html\r\n  $ jade {foo,bar}.jade\r\n\r\n  # jade over stdio\r\n  $ jade < my.jade > my.html\r\n\r\n  # jade over stdio\r\n  $ echo \"h1 Jade!\" | jade\r\n\r\n  # foo, bar dirs rendering to /tmp\r\n  $ jade foo bar --out /tmp \r\n\r\n```\r\n\r\n<a name=\"a18\"/>\r\n## Tutorials\r\n\r\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\r\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\r\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\r\n\r\n<a name=\"a19\"/>\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","readmeFilename":"Readme.md","_id":"jade@0.31.0","dist":{"shasum":"ebe1f15dff3cf057efb5c920a757481db218a8b6","tarball":"http://registry.npmjs.org/jade/-/jade-0.31.0.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"0.31.1":{"name":"jade","description":"Jade template engine","version":"0.31.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"1.1.1","mkdirp":"0.3.x","transformers":"2.0.1","character-parser":"1.0.2","monocle":"0.1.48","with":"1.0.4"},"devDependencies":{"coffee-script":"*","mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*","browserify":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"test":"mocha -R spec","prepublish":"npm prune","build":"npm run compile","compile":"npm run compile-full && npm run compile-runtime","compile-full":"browserify ./lib/jade.js --standalone jade -x ./node_modules/transformers > jade.js","compile-runtime":"browserify ./lib/runtime.js --standalone jade > runtime.js"},"browser":{"./lib/filters.js":"./lib/filters-client.js"},"readme":"# Jade - template engine \r\n[![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\r\n[![Dependency Status](https://gemnasium.com/visionmedia/jade.png)](https://gemnasium.com/visionmedia/jade)\r\n[![NPM version](https://badge.fury.io/js/jade.png)](http://badge.fury.io/js/jade)\r\n\r\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\r\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\r\n\r\n## Anouncment\r\n\r\nJade version 0.31.0 deprecated implicit text only support for scripts and styles.  To fix this all you need to do is add a `.` character after the script or style tag.\r\n\r\nIt is hoped that this change will make jade easier for newcommers to learn without affecting the power of the language or leading to excessive verboseness.\r\n\r\nIf you have a lot of jade files that need fixing you can use [fix-jade](https://github.com/ForbesLindesay/fix-jade) to attempt to automate the process.\r\n\r\n## Test drive\r\n\r\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\r\n\r\n## README Contents\r\n\r\n- [Features](#a1)\r\n- [Implementations](#a2)\r\n- [Installation](#a3)\r\n- [Browser Support](#a4)\r\n- [Public API](#a5)\r\n- [Syntax](#a6)\r\n    - [Line Endings](#a6-1)\r\n    - [Tags](#a6-2)\r\n    - [Tag Text](#a6-3)\r\n    - [Comments](#a6-4)\r\n    - [Block Comments](#a6-5)\r\n    - [Nesting](#a6-6)\r\n    - [Block Expansion](#a6-7)\r\n    - [Case](#a6-8)\r\n    - [Attributes](#a6-9)\r\n    - [HTML](#a6-10)\r\n    - [Doctypes](#a6-11)\r\n- [Filters](#a7)\r\n- [Code](#a8)\r\n- [Iteration](#a9)\r\n- [Conditionals](#a10)\r\n- [Template inheritance](#a11)\r\n- [Block append / prepend](#a12)\r\n- [Includes](#a13)\r\n- [Mixins](#a14)\r\n- [Generated Output](#a15)\r\n- [Example Makefile](#a16)\r\n- [jade(1)](#a17)\r\n- [Tutorials](#a18)\r\n- [License](#a19)\r\n\r\n<a name=\"a1\"/>\r\n## Features\r\n\r\n  - client-side support\r\n  - great readability\r\n  - flexible indentation\r\n  - block-expansion\r\n  - mixins\r\n  - static includes\r\n  - attribute interpolation\r\n  - code is escaped by default for security\r\n  - contextual error reporting at compile &amp; run time\r\n  - executable for compiling jade templates via the command line\r\n  - html 5 mode (the default doctype)\r\n  - optional memory caching\r\n  - combine dynamic and static tag classes\r\n  - parse tree manipulation via _filters_\r\n  - template inheritance\r\n  - block append / prepend\r\n  - supports [Express JS](http://expressjs.com) out of the box\r\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\r\n  - block comments\r\n  - no tag prefix\r\n  - filters\r\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\r\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\r\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\r\n    - :cdata\r\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\r\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\r\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\r\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\r\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\r\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\r\n  - [html2jade](https://github.com/donpark/html2jade) converter\r\n\r\n<a name=\"a2\"/>\r\n## Implementations\r\n\r\n  - [php](http://github.com/everzet/jade.php)\r\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\r\n  - [ruby](https://github.com/slim-template/slim)\r\n  - [python](https://github.com/SyrusAkbary/pyjade)\r\n  - [java](https://github.com/neuland/jade4j)\r\n\r\n<a name=\"a3\"/>\r\n## Installation\r\n\r\nvia npm:\r\n\r\n```bash\r\n$ npm install jade\r\n```\r\n\r\n<a name=\"a4\"/>\r\n## Browser Support\r\n\r\n To compile jade to a single file compatible for client-side use simply execute:\r\n\r\n```bash\r\n$ make jade.js\r\n```\r\n\r\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\r\n\r\n```bash\r\n$ make jade.min.js\r\n```\r\n\r\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\r\n\r\n```jade\r\np Hello #{name}\r\n```\r\n\r\n Can then be as small as the following generated function:\r\n\r\n```js\r\nfunction anonymous(locals, attrs, escape, rethrow) {\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\r\n  via `jade.attrs`, `jade.escape` etc.\r\n\r\n```js\r\nfunction anonymous(locals, attrs, escape, rethrow) {\r\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n<a name=\"a5\"/>\r\n## Public API\r\n\r\n```js\r\nvar jade = require('jade');\r\n\r\n// Compile a function\r\nvar fn = jade.compile('string of jade', options);\r\nfn(locals);\r\n```\r\n\r\n### Options\r\n\r\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\r\n - `locals`    Local variable object\r\n - `filename`  Used in exceptions, and required when using includes\r\n - `debug`     Outputs tokens and function body generated\r\n - `compiler`  Compiler to replace jade's default\r\n - `compileDebug`  When `false` no debug instrumentation is compiled\r\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\r\n\r\n<a name=\"a6\"/>\r\n## Syntax\r\n\r\n<a name=\"a6-1\"/>\r\n### Line Endings\r\n\r\n**CRLF** and **CR** are converted to **LF** before parsing.\r\n\r\n<a name=\"a6-2\"/>\r\n### Tags\r\n\r\nA tag is simply a leading word:\r\n\r\n```jade\r\nhtml\r\n```\r\n\r\nfor example is converted to `<html></html>`\r\n\r\ntags can also have ids:\r\n\r\n```jade\r\ndiv#container\r\n```\r\n\r\nwhich would render `<div id=\"container\"></div>`\r\n\r\nhow about some classes?\r\n\r\n```jade\r\ndiv.user-details\r\n```\r\n\r\nrenders `<div class=\"user-details\"></div>`\r\n\r\nmultiple classes? _and_ an id? sure:\r\n\r\n```jade\r\ndiv#foo.bar.baz\r\n```\r\n\r\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\r\n\r\ndiv div div sure is annoying, how about:\r\n\r\n```jade\r\n#foo\r\n.bar\r\n```\r\n\r\nwhich is syntactic sugar for what we have already been doing, and outputs:\r\n\r\n```html\r\n<div id=\"foo\"></div><div class=\"bar\"></div>\r\n```\r\n\r\n<a name=\"a6-3\"/>\r\n### Tag Text\r\n\r\nSimply place some content after the tag:\r\n\r\n```jade\r\np wahoo!\r\n```\r\n\r\nrenders `<p>wahoo!</p>`.\r\n\r\nwell cool, but how about large bodies of text:\r\n\r\n```jade\r\np\r\n  | foo bar baz\r\n  | rawr rawr\r\n  | super cool\r\n  | go jade go\r\n```\r\n\r\nrenders `<p>foo bar baz rawr.....</p>`\r\n\r\ninterpolation? yup! both types of text can utilize interpolation,\r\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\r\n\r\n```jade\r\n#user #{name} &lt;#{email}&gt;\r\n```\r\n\r\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\r\n\r\nActually want `#{}` for some reason? escape it!\r\n\r\n```jade\r\np \\#{something}\r\n```\r\n\r\nnow we have `<p>#{something}</p>`\r\n\r\nWe can also utilize the unescaped variant `!{html}`, so the following\r\nwill result in a literal script tag:\r\n\r\n```jade\r\n- var html = \"<script></script>\"\r\n| !{html}\r\n```\r\n\r\nNested tags that also contain text can optionally use a text block:\r\n\r\n```jade\r\nlabel\r\n  | Username:\r\n  input(name='user[name]')\r\n```\r\n\r\nor immediate tag text:\r\n\r\n```jade\r\nlabel Username:\r\n  input(name='user[name]')\r\n```\r\n\r\nAs an alternative, we may use a trailing `.` to indicate a text block, for example:\r\n\r\n```jade\r\np.\r\n  foo asdf\r\n  asdf\r\n   asdfasdfaf\r\n   asdf\r\n  asd.\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<p>foo asdf\r\nasdf\r\n  asdfasdfaf\r\n  asdf\r\nasd.\r\n</p>\r\n```\r\n\r\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\r\n\r\n```jade\r\np .\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<p>.</p>\r\n```\r\n\r\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\r\n\r\n```html\r\n<p>foo\\bar</p>\r\n```\r\n\r\nuse:\r\n\r\n```jade\r\np.\r\n  foo\\\\bar\r\n```\r\n\r\n<a name=\"a6-4\"/>\r\n### Comments\r\n\r\nSingle line comments currently look the same as JavaScript comments,\r\naka `//` and must be placed on their own line:\r\n\r\n```jade\r\n// just some paragraphs\r\np foo\r\np bar\r\n```\r\n\r\nwould output\r\n\r\n```html\r\n<!-- just some paragraphs -->\r\n<p>foo</p>\r\n<p>bar</p>\r\n```\r\n\r\nJade also supports unbuffered comments, by simply adding a hyphen:\r\n\r\n```jade\r\n//- will not output within markup\r\np foo\r\np bar\r\n```\r\n\r\noutputting\r\n\r\n```html\r\n<p>foo</p>\r\n<p>bar</p>\r\n```\r\n\r\n<a name=\"a6-5\"/>\r\n### Block Comments\r\n\r\n A block comment is legal as well:\r\n\r\n```jade\r\nbody\r\n  //\r\n    #content\r\n      h1 Example\r\n```\r\n\r\noutputting\r\n\r\n```html\r\n<body>\r\n  <!--\r\n  <div id=\"content\">\r\n    <h1>Example</h1>\r\n  </div>\r\n  -->\r\n</body>\r\n```\r\n\r\nJade supports conditional-comments as well, for example:\r\n\r\n```jade\r\nhead\r\n  //if lt IE 8\r\n    script(src='/ie-sucks.js')\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<head>\r\n  <!--[if lt IE 8]>\r\n    <script src=\"/ie-sucks.js\"></script>\r\n  <![endif]-->\r\n</head>\r\n```\r\n\r\n<a name=\"a6-6\"/>\r\n### Nesting\r\n\r\n Jade supports nesting to define the tags in a natural way:\r\n\r\n```jade\r\nul\r\n  li.first\r\n    a(href='#') foo\r\n  li\r\n    a(href='#') bar\r\n  li.last\r\n    a(href='#') baz\r\n```\r\n\r\n<a name=\"a6-7\"/>\r\n### Block Expansion\r\n\r\n Block expansion allows you to create terse single-line nested tags,\r\n the following example is equivalent to the nesting example above.\r\n\r\n```jade\r\nul\r\n  li.first: a(href='#') foo\r\n  li: a(href='#') bar\r\n  li.last: a(href='#') baz\r\n```\r\n\r\n<a name=\"a6-8\"/>\r\n### Case\r\n\r\n The case statement takes the following form:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    friends = 10\r\n    case friends\r\n      when 0\r\n        p you have no friends\r\n      when 1\r\n        p you have a friend\r\n      default\r\n        p you have #{friends} friends\r\n```\r\n\r\n Block expansion may also be used:\r\n\r\n```jade\r\nfriends = 5\r\n\r\nhtml\r\n  body\r\n    case friends\r\n      when 0: p you have no friends\r\n      when 1: p you have a friend\r\n      default: p you have #{friends} friends\r\n```\r\n\r\n<a name=\"a6-9\"/>\r\n### Attributes\r\n\r\nJade currently supports `(` and `)` as attribute delimiters.\r\n\r\n```jade\r\na(href='/login', title='View login page') Login\r\n```\r\n\r\nWhen a value is `undefined` or `null` the attribute is _not_ added,\r\nso this is fine, it will not compile `something=\"null\"`.\r\n\r\n```jade\r\ndiv(something=null)\r\n```\r\n\r\nBoolean attributes are also supported:\r\n\r\n```jade\r\ninput(type=\"checkbox\", checked)\r\n```\r\n\r\nBoolean attributes with code will only output the attribute when `true`:\r\n\r\n```jade\r\ninput(type=\"checkbox\", checked=someValue)\r\n```\r\n\r\nMultiple lines work too:\r\n\r\n```jade\r\ninput(type='checkbox',\r\n  name='agreement',\r\n  checked)\r\n```\r\n\r\nMultiple lines without the comma work fine:\r\n\r\n```jade\r\ninput(type='checkbox'\r\n  name='agreement'\r\n  checked)\r\n```\r\n\r\nFunky whitespace? fine:\r\n\r\n```jade\r\ninput(\r\n  type='checkbox'\r\n  name='agreement'\r\n  checked)\r\n```\r\n\r\nColons work:\r\n\r\n```jade\r\nrss(xmlns:atom=\"atom\")\r\n```\r\n\r\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\r\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\r\nwe could use regular javascript concatenation:\r\n\r\n```jade\r\na(href='/user/' + user.id)= user.name\r\n```\r\n\r\nor we could use jade's interpolation, which I added because everyone\r\nusing Ruby or CoffeeScript seems to think this is legal js..:\r\n\r\n```jade\r\na(href='/user/#{user.id}')= user.name\r\n```\r\n\r\nThe `class` attribute is special-cased when an array is given,\r\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\r\n\r\n```jade\r\nbody(class=bodyClasses)\r\n```\r\n\r\n<a name=\"a6-10\"/>\r\n### HTML\r\n\r\n Inline html is fine, we can use the pipe syntax to\r\n write arbitrary text, in this case some html:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    | <h1>Title</h1>\r\n    | <p>foo bar baz</p>\r\n```\r\n\r\n Or we can use the trailing `.` to indicate to Jade that we\r\n only want text in this block, allowing us to omit the pipes:\r\n\r\n```jade\r\nhtml\r\n  body.\r\n    <h1>Title</h1>\r\n    <p>foo bar baz</p>\r\n```\r\n\r\n Both of these examples yield the same result:\r\n\r\n```html\r\n<html><body><h1>Title</h1>\r\n<p>foo bar baz</p>\r\n</body></html>\r\n```\r\n\r\n The same rule applies for anywhere you can have text\r\n in jade, raw html is fine:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    h1 User <em>#{name}</em>\r\n```\r\n\r\n<a name=\"a6-11\"/>\r\n### Doctypes\r\n\r\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\r\n\r\n```jade\r\n!!!\r\n```\r\n\r\nor\r\n\r\n```jade\r\ndoctype\r\n```\r\n\r\nWill output the _html 5_  doctype, however:\r\n\r\n```jade\r\n!!! transitional\r\n```\r\n\r\nWill output the _transitional_ doctype.\r\n\r\nDoctypes are case-insensitive, so the following are equivalent:\r\n\r\n```jade\r\ndoctype Basic\r\ndoctype basic\r\n```\r\n\r\nit's also possible to simply pass a doctype literal:\r\n\r\n```jade\r\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"\r\n```\r\n\r\nyielding:\r\n\r\n```html\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\">\r\n```\r\n\r\nBelow are the doctypes defined by default, which can easily be extended:\r\n\r\n```js\r\nvar doctypes = exports.doctypes = {\r\n  '5': '<!DOCTYPE html>',\r\n  'default': '<!DOCTYPE html>',\r\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\r\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\r\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\r\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\r\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\r\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\r\n};\r\n```\r\n\r\nTo alter the default simply change:\r\n\r\n```js\r\njade.doctypes.default = 'whatever you want';\r\n```\r\n\r\n<a name=\"a7\"/>\r\n## Filters\r\n\r\nFilters are prefixed with `:`, for example `:markdown` and\r\npass the following block of text to an arbitrary function for processing. View the _features_\r\nat the top of this document for available filters.\r\n\r\n```jade\r\nbody\r\n  :markdown\r\n    Woah! jade _and_ markdown, very **cool**\r\n    we can even link to [stuff](http://google.com)\r\n```\r\n\r\nRenders:\r\n\r\n```html\r\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\r\n```\r\n\r\n<a name=\"a8\"/>\r\n## Code\r\n\r\nJade currently supports three classifications of executable code. The first\r\nis prefixed by `-`, and is not buffered:\r\n\r\n```jade\r\n- var foo = 'bar';\r\n```\r\n\r\nThis can be used for conditionals, or iteration:\r\n\r\n```jade\r\n- for (var key in obj)\r\n  p= obj[key]\r\n```\r\n\r\nDue to Jade's buffering techniques the following is valid as well:\r\n\r\n```jade\r\n- if (foo)\r\n  ul\r\n    li yay\r\n    li foo\r\n    li worked\r\n- else\r\n  p oh no! didnt work\r\n```\r\n\r\nHell, even verbose iteration:\r\n\r\n```jade\r\n- if (items.length)\r\n  ul\r\n    - items.forEach(function(item){\r\n      li= item\r\n    - })\r\n```\r\n\r\nAnything you want!\r\n\r\nNext up we have _escaped_ buffered code, which is used to\r\nbuffer a return value, which is prefixed by `=`:\r\n\r\n```jade\r\n- var foo = 'bar'\r\n= foo\r\nh1= foo\r\n```\r\n\r\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\r\nby default for security, however to output unescaped return values\r\nyou may use `!=`:\r\n\r\n```jade\r\np!= aVarContainingMoreHTML\r\n```\r\n\r\n Jade also has designer-friendly variants, making the literal JavaScript\r\n more expressive and declarative. For example the following assignments\r\n are equivalent, and the expression is still regular javascript:\r\n\r\n```jade\r\n- var foo = 'foo ' + 'bar'\r\nfoo = 'foo ' + 'bar'\r\n```\r\n\r\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\r\n\r\n```jade\r\nif foo == 'bar'\r\n  ul\r\n    li yay\r\n    li foo\r\n    li worked\r\nelse\r\n  p oh no! didnt work\r\n```\r\n\r\n<a name=\"a9\"/>\r\n## Iteration\r\n\r\n Along with vanilla JavaScript Jade also supports a subset of\r\n constructs that allow you to create more designer-friendly templates,\r\n one of these constructs is `each`, taking the form:\r\n\r\n```jade\r\neach VAL[, KEY] in OBJ\r\n```\r\n\r\nAn example iterating over an array:\r\n\r\n```jade\r\n- var items = [\"one\", \"two\", \"three\"]\r\neach item in items\r\n  li= item\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<li>one</li>\r\n<li>two</li>\r\n<li>three</li>\r\n```\r\n\r\niterating an array with index:\r\n\r\n```jade\r\nitems = [\"one\", \"two\", \"three\"]\r\neach item, i in items\r\n  li #{item}: #{i}\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<li>one: 0</li>\r\n<li>two: 1</li>\r\n<li>three: 2</li>\r\n```\r\n\r\niterating an object's keys and values:\r\n\r\n```jade\r\nobj = { foo: 'bar' }\r\neach val, key in obj\r\n  li #{key}: #{val}\r\n```\r\n\r\nwould output `<li>foo: bar</li>`\r\n\r\nInternally Jade converts these statements to regular\r\nJavaScript loops such as `users.forEach(function(user){`,\r\nso lexical scope and nesting applies as it would with regular\r\nJavaScript:\r\n\r\n```jade\r\neach user in users\r\n  each role in user.roles\r\n    li= role\r\n```\r\n\r\n You may also use `for` if you prefer:\r\n\r\n```jade\r\nfor user in users\r\n  for role in user.roles\r\n    li= role\r\n```\r\n\r\n<a name=\"a10\"/>\r\n## Conditionals\r\n\r\n Jade conditionals are equivalent to those using the code (`-`) prefix,\r\n however allow you to ditch parenthesis to become more designer friendly,\r\n however keep in mind the expression given is _regular_ JavaScript:\r\n\r\n```jade\r\nfor user in users\r\n  if user.role == 'admin'\r\n    p #{user.name} is an admin\r\n  else\r\n    p= user.name\r\n```\r\n\r\n is equivalent to the following using vanilla JavaScript literals:\r\n\r\n```jade\r\nfor user in users\r\n  - if (user.role == 'admin')\r\n    p #{user.name} is an admin\r\n  - else\r\n    p= user.name\r\n```\r\n\r\n  Jade also provides `unless` which is equivalent to `if (!(expr))`:\r\n\r\n```jade\r\nfor user in users\r\n  unless user.isAnonymous\r\n    p\r\n      | Click to view\r\n      a(href='/users/' + user.id)= user.name\r\n```\r\n\r\n<a name=\"a11\"/>\r\n## Template inheritance\r\n\r\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\r\n\r\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\r\n\r\n```jade\r\nhtml\r\n  head\r\n    h1 My Site - #{title}\r\n    block scripts\r\n      script(src='/jquery.js')\r\n  body\r\n    block content\r\n    block foot\r\n      #footer\r\n        p some footer content\r\n```\r\n\r\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\r\n\r\n```jade\r\nextends layout\r\n\r\nblock scripts\r\n  script(src='/jquery.js')\r\n  script(src='/pets.js')\r\n\r\nblock content\r\n  h1= title\r\n  each pet in pets\r\n    include pet\r\n```\r\n\r\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\r\n\r\n```jade\r\nextends regular-layout\r\n\r\nblock content\r\n  .sidebar\r\n    block sidebar\r\n      p nothing\r\n  .primary\r\n    block primary\r\n      p nothing\r\n```\r\n\r\n<a name=\"a12\"/>\r\n## Block append / prepend\r\n\r\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\r\n\r\n```jade\r\nhtml\r\n  head\r\n    block head\r\n      script(src='/vendor/jquery.js')\r\n      script(src='/vendor/caustic.js')\r\n  body\r\n    block content\r\n```\r\n\r\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\r\n\r\n```jade\r\nextends layout\r\n\r\nblock append head\r\n  script(src='/vendor/three.js')\r\n  script(src='/game.js')\r\n```\r\n\r\n  When using `block append` or `block prepend` the `block` is optional:\r\n\r\n```jade\r\nextends layout\r\n\r\nappend head\r\n  script(src='/vendor/three.js')\r\n  script(src='/game.js')\r\n```\r\n\r\n<a name=\"a13\"/>\r\n## Includes\r\n\r\n Includes allow you to statically include chunks of Jade,\r\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\r\n\r\n    ./layout.jade\r\n    ./includes/\r\n      ./head.jade\r\n      ./foot.jade\r\n\r\nand the following _layout.jade_:\r\n\r\n```jade\r\nhtml\r\n  include includes/head\r\n  body\r\n    h1 My Site\r\n    p Welcome to my super amazing site.\r\n    include includes/foot\r\n```\r\n\r\nboth includes _includes/head_ and _includes/foot_ are\r\nread relative to the `filename` option given to _layout.jade_,\r\nwhich should be an absolute path to this file, however Express\r\ndoes this for you. Include then parses these files, and injects\r\nthe AST produced to render what you would expect:\r\n\r\n```html\r\n<html>\r\n  <head>\r\n    <title>My Site</title>\r\n    <script src=\"/javascripts/jquery.js\">\r\n    </script><script src=\"/javascripts/app.js\"></script>\r\n  </head>\r\n  <body>\r\n    <h1>My Site</h1>\r\n    <p>Welcome to my super lame site.</p>\r\n    <div id=\"footer\">\r\n      <p>Copyright>(c) foobar</p>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nAs mentioned `include` can be used to include other content\r\nsuch as html or css. By providing an extension, Jade will\r\nread that file in, apply any [filter](#a7) matching the file's\r\nextension, and insert that content into the output.\r\n\r\n```jade\r\nhtml\r\n  head\r\n    //- css and js have simple filters that wrap them in\r\n        <style> and <script> tags, respectively\r\n    include stylesheet.css\r\n    include script.js\r\n  body\r\n    //- \"markdown\" files will use the \"markdown\" filter\r\n        to convert Markdown to HTML\r\n    include introduction.markdown\r\n    //- html files have no filter and are included verbatim\r\n    include content.html\r\n```\r\n\r\n  Include directives may also accept a block, in which case the\r\n  the given block will be appended to the _last_ block defined\r\n  in the file. For example if `head.jade` contains:\r\n\r\n```jade\r\nhead\r\n  script(src='/jquery.js')\r\n```\r\n\r\n We may append values by providing a block to `include head`\r\n as shown below, adding the two scripts.\r\n\r\n```jade\r\nhtml\r\n  include head\r\n    script(src='/foo.js')\r\n    script(src='/bar.js')\r\n  body\r\n    h1 test\r\n```\r\n\r\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\r\n\r\n```jade\r\nhead\r\n  yield\r\n  script(src='/jquery.js')\r\n  script(src='/jquery.ui.js')\r\n```\r\n\r\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example suppose we have `user.jade` which utilizes a `user` variable.\r\n\r\n```jade\r\nh1= user.name\r\np= user.occupation\r\n```\r\n\r\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\r\n\r\n```jade\r\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\r\n\r\neach user in users\r\n  .user\r\n    include user\r\n```\r\n\r\nyielding:\r\n\r\n```html\r\n<div class=\"user\">\r\n  <h1>Tobi</h1>\r\n  <p>Ferret</p>\r\n</div>\r\n```\r\n\r\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\r\n\r\n```jade\r\neach person in users\r\n  .user\r\n    user = person\r\n    include user\r\n```\r\n\r\n<a name=\"a14\"/>\r\n## Mixins\r\n\r\n Mixins are converted to regular JavaScript functions in\r\n the compiled template that Jade constructs. Mixins may\r\n take arguments, though not required:\r\n\r\n```jade\r\nmixin list\r\n  ul\r\n    li foo\r\n    li bar\r\n    li baz\r\n```\r\n\r\n  Utilizing a mixin without args looks similar, just without a block:\r\n\r\n```jade\r\nh2 Groceries\r\nmixin list\r\n```\r\n\r\n  Mixins may take one or more arguments as well, the arguments\r\n  are regular javascripts expressions, so for example the following:\r\n\r\n```jade\r\nmixin pets(pets)\r\n  ul.pets\r\n    - each pet in pets\r\n      li= pet\r\n\r\nmixin profile(user)\r\n  .user\r\n    h2= user.name\r\n    mixin pets(user.pets)\r\n```\r\n\r\n   Would yield something similar to the following html:\r\n\r\n```html\r\n<div class=\"user\">\r\n  <h2>tj</h2>\r\n  <ul class=\"pets\">\r\n    <li>tobi</li>\r\n    <li>loki</li>\r\n    <li>jane</li>\r\n    <li>manny</li>\r\n  </ul>\r\n</div>\r\n```\r\n\r\n<a name=\"a15\"/>\r\n## Generated Output\r\n\r\n Suppose we have the following Jade:\r\n\r\n```jade\r\n- var title = 'yay'\r\nh1.title #{title}\r\np Just an example\r\n```\r\n\r\n When the `compileDebug` option is not explicitly `false`, Jade\r\n will compile the function instrumented with `__.lineno = n;`, which\r\n in the event of an exception is passed to `rethrow()` which constructs\r\n a useful message relative to the initial Jade input.\r\n\r\n```js\r\nfunction anonymous(locals) {\r\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\r\n  var rethrow = jade.rethrow;\r\n  try {\r\n    var attrs = jade.attrs, escape = jade.escape;\r\n    var buf = [];\r\n    with (locals || {}) {\r\n      var interp;\r\n      __.lineno = 1;\r\n       var title = 'yay'\r\n      __.lineno = 2;\r\n      buf.push('<h1');\r\n      buf.push(attrs({ \"class\": ('title') }));\r\n      buf.push('>');\r\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\r\n      buf.push('</h1>');\r\n      __.lineno = 3;\r\n      buf.push('<p>');\r\n      buf.push('Just an example');\r\n      buf.push('</p>');\r\n    }\r\n    return buf.join(\"\");\r\n  } catch (err) {\r\n    rethrow(err, __.input, __.filename, __.lineno);\r\n  }\r\n}\r\n```\r\n\r\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\r\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\r\nto toString() compiled templates and avoid running the entire Jade library on\r\nthe client, increasing performance, and decreasing the amount of JavaScript\r\nrequired.\r\n\r\n```js\r\nfunction anonymous(locals) {\r\n  var attrs = jade.attrs, escape = jade.escape;\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    var title = 'yay'\r\n    buf.push('<h1');\r\n    buf.push(attrs({ \"class\": ('title') }));\r\n    buf.push('>');\r\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\r\n    buf.push('</h1>');\r\n    buf.push('<p>');\r\n    buf.push('Just an example');\r\n    buf.push('</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n<a name=\"a16\"/>\r\n## Example Makefile\r\n\r\n  Below is an example Makefile used to compile _pages/*.jade_\r\n  into _pages/*.html_ files by simply executing `make`.\r\n\r\n_Note:_ If you try to run this snippet and `make` throws a `missing separator` error, you should make sure all indented lines use a tab for indentation instead of spaces. (For whatever reason, GitHub renders this code snippet with 4-space indentation although the actual README file uses tabs in this snippet.)\r\n\r\n```make\r\nJADE = $(shell find . -wholename './pages/*.jade')\r\nHTML = $(JADE:.jade=.html)\r\n\r\nall: $(HTML)\r\n\r\n%.html: %.jade\r\n\tjade < $< --path $< > $@\r\n\r\nclean:\r\n\trm -f $(HTML)\r\n\r\n.PHONY: clean\r\n```\r\n\r\nthis can be combined with the `watch(1)` command to produce\r\na watcher-like behaviour:\r\n\r\n```bash\r\n$ watch make\r\n```\r\n\r\nor you use the watch option below:\r\n\r\n<a name=\"a17\"/>\r\n## jade(1)\r\n\r\n```\r\n\r\nUsage: jade [options] [dir|file ...]\r\n\r\nOptions:\r\n\r\n  -h, --help         output usage information\r\n  -V, --version      output the version number\r\n  -O, --obj <str>    javascript options object\r\n  -o, --out <dir>    output the compiled html to <dir>\r\n  -p, --path <path>  filename used to resolve includes\r\n  -P, --pretty       compile pretty html output\r\n  -c, --client       compile function for client-side runtime.js\r\n  -D, --no-debug     compile without debugging (smaller functions)\r\n  -w, --watch        watch files for changes and automatically re-render\r\n\r\nExamples:\r\n\r\n  # translate jade the templates dir\r\n  $ jade templates\r\n\r\n  # create {foo,bar}.html\r\n  $ jade {foo,bar}.jade\r\n\r\n  # jade over stdio\r\n  $ jade < my.jade > my.html\r\n\r\n  # jade over stdio\r\n  $ echo \"h1 Jade!\" | jade\r\n\r\n  # foo, bar dirs rendering to /tmp\r\n  $ jade foo bar --out /tmp \r\n\r\n```\r\n\r\n<a name=\"a18\"/>\r\n## Tutorials\r\n\r\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\r\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\r\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\r\n\r\n<a name=\"a19\"/>\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","readmeFilename":"Readme.md","_id":"jade@0.31.1","dist":{"shasum":"d04062b44ae09af29d2182302d22076bf75bfa67","tarball":"http://registry.npmjs.org/jade/-/jade-0.31.1.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"0.31.2":{"name":"jade","description":"Jade template engine","version":"0.31.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"1.1.1","mkdirp":"0.3.x","transformers":"2.0.1","character-parser":"1.0.2","monocle":"0.1.48","with":"1.0.4"},"devDependencies":{"coffee-script":"*","mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*","browserify":"*","win-spawn":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"test":"mocha -R spec","prepublish":"npm prune && cd bin && win-line-endings && cd ..","build":"npm run compile","compile":"npm run compile-full && npm run compile-runtime","compile-full":"browserify ./lib/jade.js --standalone jade -x ./node_modules/transformers > jade.js","compile-runtime":"browserify ./lib/runtime.js --standalone jade > runtime.js"},"browser":{"./lib/filters.js":"./lib/filters-client.js"},"readme":"# Jade - template engine \r\n[![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)\r\n[![Dependency Status](https://gemnasium.com/visionmedia/jade.png)](https://gemnasium.com/visionmedia/jade)\r\n[![NPM version](https://badge.fury.io/js/jade.png)](http://badge.fury.io/js/jade)\r\n\r\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\r\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\r\n\r\n## Announcement\r\n\r\nJade version 0.31.0 deprecated implicit text only support for scripts and styles.  To fix this all you need to do is add a `.` character after the script or style tag.\r\n\r\nIt is hoped that this change will make Jade easier for newcomers to learn without affecting the power of the language or leading to excessive verboseness.\r\n\r\nIf you have a lot of Jade files that need fixing you can use [fix-jade](https://github.com/ForbesLindesay/fix-jade) to attempt to automate the process.\r\n\r\n## Test drive\r\n\r\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\r\n\r\n## README Contents\r\n\r\n- [Features](#a1)\r\n- [Implementations](#a2)\r\n- [Installation](#a3)\r\n- [Browser Support](#a4)\r\n- [Public API](#a5)\r\n- [Syntax](#a6)\r\n    - [Line Endings](#a6-1)\r\n    - [Tags](#a6-2)\r\n    - [Tag Text](#a6-3)\r\n    - [Comments](#a6-4)\r\n    - [Block Comments](#a6-5)\r\n    - [Nesting](#a6-6)\r\n    - [Block Expansion](#a6-7)\r\n    - [Case](#a6-8)\r\n    - [Attributes](#a6-9)\r\n    - [HTML](#a6-10)\r\n    - [Doctypes](#a6-11)\r\n- [Filters](#a7)\r\n- [Code](#a8)\r\n- [Iteration](#a9)\r\n- [Conditionals](#a10)\r\n- [Template inheritance](#a11)\r\n- [Block append / prepend](#a12)\r\n- [Includes](#a13)\r\n- [Mixins](#a14)\r\n- [Generated Output](#a15)\r\n- [Example Makefile](#a16)\r\n- [jade(1)](#a17)\r\n- [Tutorials](#a18)\r\n- [License](#a19)\r\n\r\n<a name=\"a1\"/>\r\n## Features\r\n\r\n  - client-side support\r\n  - great readability\r\n  - flexible indentation\r\n  - block-expansion\r\n  - mixins\r\n  - static includes\r\n  - attribute interpolation\r\n  - code is escaped by default for security\r\n  - contextual error reporting at compile &amp; run time\r\n  - executable for compiling jade templates via the command line\r\n  - html 5 mode (the default doctype)\r\n  - optional memory caching\r\n  - combine dynamic and static tag classes\r\n  - parse tree manipulation via _filters_\r\n  - template inheritance\r\n  - block append / prepend\r\n  - supports [Express JS](http://expressjs.com) out of the box\r\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\r\n  - block comments\r\n  - no tag prefix\r\n  - filters\r\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\r\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\r\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\r\n    - :cdata\r\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\r\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\r\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\r\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\r\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\r\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\r\n  - [html2jade](https://github.com/donpark/html2jade) converter\r\n\r\n<a name=\"a2\"/>\r\n## Implementations\r\n\r\n  - [php](http://github.com/everzet/jade.php)\r\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\r\n  - [ruby](https://github.com/slim-template/slim)\r\n  - [python](https://github.com/SyrusAkbary/pyjade)\r\n  - [java](https://github.com/neuland/jade4j)\r\n\r\n<a name=\"a3\"/>\r\n## Installation\r\n\r\nvia npm:\r\n\r\n```bash\r\n$ npm install jade\r\n```\r\n\r\n<a name=\"a4\"/>\r\n## Browser Support\r\n\r\n To compile jade to a single file compatible for client-side use simply execute:\r\n\r\n```bash\r\n$ make jade.js\r\n```\r\n\r\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\r\n\r\n```bash\r\n$ make jade.min.js\r\n```\r\n\r\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\r\n\r\n```jade\r\np Hello #{name}\r\n```\r\n\r\n Can then be as small as the following generated function:\r\n\r\n```js\r\nfunction anonymous(locals, attrs, escape, rethrow) {\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\r\n  via `jade.attrs`, `jade.escape` etc.\r\n\r\n```js\r\nfunction anonymous(locals, attrs, escape, rethrow) {\r\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n<a name=\"a5\"/>\r\n## Public API\r\n\r\n```js\r\nvar jade = require('jade');\r\n\r\n// Compile a function\r\nvar fn = jade.compile('string of jade', options);\r\nfn(locals);\r\n```\r\n\r\n### Options\r\n\r\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\r\n - `locals`    Local variable object\r\n - `filename`  Used in exceptions, and required when using includes\r\n - `debug`     Outputs tokens and function body generated\r\n - `compiler`  Compiler to replace jade's default\r\n - `compileDebug`  When `false` no debug instrumentation is compiled\r\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\r\n\r\n<a name=\"a6\"/>\r\n## Syntax\r\n\r\n<a name=\"a6-1\"/>\r\n### Line Endings\r\n\r\n**CRLF** and **CR** are converted to **LF** before parsing.\r\n\r\n<a name=\"a6-2\"/>\r\n### Tags\r\n\r\nA tag is simply a leading word:\r\n\r\n```jade\r\nhtml\r\n```\r\n\r\nfor example is converted to `<html></html>`\r\n\r\ntags can also have ids:\r\n\r\n```jade\r\ndiv#container\r\n```\r\n\r\nwhich would render `<div id=\"container\"></div>`\r\n\r\nhow about some classes?\r\n\r\n```jade\r\ndiv.user-details\r\n```\r\n\r\nrenders `<div class=\"user-details\"></div>`\r\n\r\nmultiple classes? _and_ an id? sure:\r\n\r\n```jade\r\ndiv#foo.bar.baz\r\n```\r\n\r\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\r\n\r\ndiv div div sure is annoying, how about:\r\n\r\n```jade\r\n#foo\r\n.bar\r\n```\r\n\r\nwhich is syntactic sugar for what we have already been doing, and outputs:\r\n\r\n```html\r\n<div id=\"foo\"></div><div class=\"bar\"></div>\r\n```\r\n\r\n<a name=\"a6-3\"/>\r\n### Tag Text\r\n\r\nSimply place some content after the tag:\r\n\r\n```jade\r\np wahoo!\r\n```\r\n\r\nrenders `<p>wahoo!</p>`.\r\n\r\nwell cool, but how about large bodies of text:\r\n\r\n```jade\r\np\r\n  | foo bar baz\r\n  | rawr rawr\r\n  | super cool\r\n  | go jade go\r\n```\r\n\r\nrenders `<p>foo bar baz rawr.....</p>`\r\n\r\ninterpolation? yup! both types of text can utilize interpolation,\r\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\r\n\r\n```jade\r\n#user #{name} &lt;#{email}&gt;\r\n```\r\n\r\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\r\n\r\nActually want `#{}` for some reason? escape it!\r\n\r\n```jade\r\np \\#{something}\r\n```\r\n\r\nnow we have `<p>#{something}</p>`\r\n\r\nWe can also utilize the unescaped variant `!{html}`, so the following\r\nwill result in a literal script tag:\r\n\r\n```jade\r\n- var html = \"<script></script>\"\r\n| !{html}\r\n```\r\n\r\nNested tags that also contain text can optionally use a text block:\r\n\r\n```jade\r\nlabel\r\n  | Username:\r\n  input(name='user[name]')\r\n```\r\n\r\nor immediate tag text:\r\n\r\n```jade\r\nlabel Username:\r\n  input(name='user[name]')\r\n```\r\n\r\nAs an alternative, we may use a trailing `.` to indicate a text block, for example:\r\n\r\n```jade\r\np.\r\n  foo asdf\r\n  asdf\r\n   asdfasdfaf\r\n   asdf\r\n  asd.\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<p>foo asdf\r\nasdf\r\n  asdfasdfaf\r\n  asdf\r\nasd.\r\n</p>\r\n```\r\n\r\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\r\n\r\n```jade\r\np .\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<p>.</p>\r\n```\r\n\r\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\r\n\r\n```html\r\n<p>foo\\bar</p>\r\n```\r\n\r\nuse:\r\n\r\n```jade\r\np.\r\n  foo\\\\bar\r\n```\r\n\r\n<a name=\"a6-4\"/>\r\n### Comments\r\n\r\nSingle line comments currently look the same as JavaScript comments,\r\naka `//` and must be placed on their own line:\r\n\r\n```jade\r\n// just some paragraphs\r\np foo\r\np bar\r\n```\r\n\r\nwould output\r\n\r\n```html\r\n<!-- just some paragraphs -->\r\n<p>foo</p>\r\n<p>bar</p>\r\n```\r\n\r\nJade also supports unbuffered comments, by simply adding a hyphen:\r\n\r\n```jade\r\n//- will not output within markup\r\np foo\r\np bar\r\n```\r\n\r\noutputting\r\n\r\n```html\r\n<p>foo</p>\r\n<p>bar</p>\r\n```\r\n\r\n<a name=\"a6-5\"/>\r\n### Block Comments\r\n\r\n A block comment is legal as well:\r\n\r\n```jade\r\nbody\r\n  //\r\n    #content\r\n      h1 Example\r\n```\r\n\r\noutputting\r\n\r\n```html\r\n<body>\r\n  <!--\r\n  <div id=\"content\">\r\n    <h1>Example</h1>\r\n  </div>\r\n  -->\r\n</body>\r\n```\r\n\r\nJade supports conditional-comments as well, for example:\r\n\r\n```jade\r\nhead\r\n  //if lt IE 8\r\n    script(src='/ie-sucks.js')\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<head>\r\n  <!--[if lt IE 8]>\r\n    <script src=\"/ie-sucks.js\"></script>\r\n  <![endif]-->\r\n</head>\r\n```\r\n\r\n<a name=\"a6-6\"/>\r\n### Nesting\r\n\r\n Jade supports nesting to define the tags in a natural way:\r\n\r\n```jade\r\nul\r\n  li.first\r\n    a(href='#') foo\r\n  li\r\n    a(href='#') bar\r\n  li.last\r\n    a(href='#') baz\r\n```\r\n\r\n<a name=\"a6-7\"/>\r\n### Block Expansion\r\n\r\n Block expansion allows you to create terse single-line nested tags,\r\n the following example is equivalent to the nesting example above.\r\n\r\n```jade\r\nul\r\n  li.first: a(href='#') foo\r\n  li: a(href='#') bar\r\n  li.last: a(href='#') baz\r\n```\r\n\r\n<a name=\"a6-8\"/>\r\n### Case\r\n\r\n The case statement takes the following form:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    friends = 10\r\n    case friends\r\n      when 0\r\n        p you have no friends\r\n      when 1\r\n        p you have a friend\r\n      default\r\n        p you have #{friends} friends\r\n```\r\n\r\n Block expansion may also be used:\r\n\r\n```jade\r\nfriends = 5\r\n\r\nhtml\r\n  body\r\n    case friends\r\n      when 0: p you have no friends\r\n      when 1: p you have a friend\r\n      default: p you have #{friends} friends\r\n```\r\n\r\n<a name=\"a6-9\"/>\r\n### Attributes\r\n\r\nJade currently supports `(` and `)` as attribute delimiters.\r\n\r\n```jade\r\na(href='/login', title='View login page') Login\r\n```\r\n\r\nWhen a value is `undefined` or `null` the attribute is _not_ added,\r\nso this is fine, it will not compile `something=\"null\"`.\r\n\r\n```jade\r\ndiv(something=null)\r\n```\r\n\r\nBoolean attributes are also supported:\r\n\r\n```jade\r\ninput(type=\"checkbox\", checked)\r\n```\r\n\r\nBoolean attributes with code will only output the attribute when `true`:\r\n\r\n```jade\r\ninput(type=\"checkbox\", checked=someValue)\r\n```\r\n\r\nMultiple lines work too:\r\n\r\n```jade\r\ninput(type='checkbox',\r\n  name='agreement',\r\n  checked)\r\n```\r\n\r\nMultiple lines without the comma work fine:\r\n\r\n```jade\r\ninput(type='checkbox'\r\n  name='agreement'\r\n  checked)\r\n```\r\n\r\nFunky whitespace? fine:\r\n\r\n```jade\r\ninput(\r\n  type='checkbox'\r\n  name='agreement'\r\n  checked)\r\n```\r\n\r\nColons work:\r\n\r\n```jade\r\nrss(xmlns:atom=\"atom\")\r\n```\r\n\r\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\r\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\r\nwe could use regular javascript concatenation:\r\n\r\n```jade\r\na(href='/user/' + user.id)= user.name\r\n```\r\n\r\nor we could use jade's interpolation, which I added because everyone\r\nusing Ruby or CoffeeScript seems to think this is legal js..:\r\n\r\n```jade\r\na(href='/user/#{user.id}')= user.name\r\n```\r\n\r\nThe `class` attribute is special-cased when an array is given,\r\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\r\n\r\n```jade\r\nbody(class=bodyClasses)\r\n```\r\n\r\n<a name=\"a6-10\"/>\r\n### HTML\r\n\r\n Inline html is fine, we can use the pipe syntax to\r\n write arbitrary text, in this case some html:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    | <h1>Title</h1>\r\n    | <p>foo bar baz</p>\r\n```\r\n\r\n Or we can use the trailing `.` to indicate to Jade that we\r\n only want text in this block, allowing us to omit the pipes:\r\n\r\n```jade\r\nhtml\r\n  body.\r\n    <h1>Title</h1>\r\n    <p>foo bar baz</p>\r\n```\r\n\r\n Both of these examples yield the same result:\r\n\r\n```html\r\n<html><body><h1>Title</h1>\r\n<p>foo bar baz</p>\r\n</body></html>\r\n```\r\n\r\n The same rule applies for anywhere you can have text\r\n in jade, raw html is fine:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    h1 User <em>#{name}</em>\r\n```\r\n\r\n<a name=\"a6-11\"/>\r\n### Doctypes\r\n\r\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\r\n\r\n```jade\r\n!!!\r\n```\r\n\r\nor\r\n\r\n```jade\r\ndoctype\r\n```\r\n\r\nWill output the _html 5_  doctype, however:\r\n\r\n```jade\r\n!!! transitional\r\n```\r\n\r\nWill output the _transitional_ doctype.\r\n\r\nDoctypes are case-insensitive, so the following are equivalent:\r\n\r\n```jade\r\ndoctype Basic\r\ndoctype basic\r\n```\r\n\r\nit's also possible to simply pass a doctype literal:\r\n\r\n```jade\r\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"\r\n```\r\n\r\nyielding:\r\n\r\n```html\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\">\r\n```\r\n\r\nBelow are the doctypes defined by default, which can easily be extended:\r\n\r\n```js\r\nvar doctypes = exports.doctypes = {\r\n  '5': '<!DOCTYPE html>',\r\n  'default': '<!DOCTYPE html>',\r\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\r\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\r\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\r\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\r\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\r\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\r\n};\r\n```\r\n\r\nTo alter the default simply change:\r\n\r\n```js\r\njade.doctypes.default = 'whatever you want';\r\n```\r\n\r\n<a name=\"a7\"/>\r\n## Filters\r\n\r\nFilters are prefixed with `:`, for example `:markdown` and\r\npass the following block of text to an arbitrary function for processing. View the _features_\r\nat the top of this document for available filters.\r\n\r\n```jade\r\nbody\r\n  :markdown\r\n    Woah! jade _and_ markdown, very **cool**\r\n    we can even link to [stuff](http://google.com)\r\n```\r\n\r\nRenders:\r\n\r\n```html\r\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\r\n```\r\n\r\n<a name=\"a8\"/>\r\n## Code\r\n\r\nJade currently supports three classifications of executable code. The first\r\nis prefixed by `-`, and is not buffered:\r\n\r\n```jade\r\n- var foo = 'bar';\r\n```\r\n\r\nThis can be used for conditionals, or iteration:\r\n\r\n```jade\r\n- for (var key in obj)\r\n  p= obj[key]\r\n```\r\n\r\nDue to Jade's buffering techniques the following is valid as well:\r\n\r\n```jade\r\n- if (foo)\r\n  ul\r\n    li yay\r\n    li foo\r\n    li worked\r\n- else\r\n  p oh no! didnt work\r\n```\r\n\r\nHell, even verbose iteration:\r\n\r\n```jade\r\n- if (items.length)\r\n  ul\r\n    - items.forEach(function(item){\r\n      li= item\r\n    - })\r\n```\r\n\r\nAnything you want!\r\n\r\nNext up we have _escaped_ buffered code, which is used to\r\nbuffer a return value, which is prefixed by `=`:\r\n\r\n```jade\r\n- var foo = 'bar'\r\n= foo\r\nh1= foo\r\n```\r\n\r\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\r\nby default for security, however to output unescaped return values\r\nyou may use `!=`:\r\n\r\n```jade\r\np!= aVarContainingMoreHTML\r\n```\r\n\r\n Jade also has designer-friendly variants, making the literal JavaScript\r\n more expressive and declarative. For example the following assignments\r\n are equivalent, and the expression is still regular javascript:\r\n\r\n```jade\r\n- var foo = 'foo ' + 'bar'\r\nfoo = 'foo ' + 'bar'\r\n```\r\n\r\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\r\n\r\n```jade\r\nif foo == 'bar'\r\n  ul\r\n    li yay\r\n    li foo\r\n    li worked\r\nelse\r\n  p oh no! didnt work\r\n```\r\n\r\n<a name=\"a9\"/>\r\n## Iteration\r\n\r\n Along with vanilla JavaScript Jade also supports a subset of\r\n constructs that allow you to create more designer-friendly templates,\r\n one of these constructs is `each`, taking the form:\r\n\r\n```jade\r\neach VAL[, KEY] in OBJ\r\n```\r\n\r\nAn example iterating over an array:\r\n\r\n```jade\r\n- var items = [\"one\", \"two\", \"three\"]\r\neach item in items\r\n  li= item\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<li>one</li>\r\n<li>two</li>\r\n<li>three</li>\r\n```\r\n\r\niterating an array with index:\r\n\r\n```jade\r\nitems = [\"one\", \"two\", \"three\"]\r\neach item, i in items\r\n  li #{item}: #{i}\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<li>one: 0</li>\r\n<li>two: 1</li>\r\n<li>three: 2</li>\r\n```\r\n\r\niterating an object's keys and values:\r\n\r\n```jade\r\nobj = { foo: 'bar' }\r\neach val, key in obj\r\n  li #{key}: #{val}\r\n```\r\n\r\nwould output `<li>foo: bar</li>`\r\n\r\nInternally Jade converts these statements to regular\r\nJavaScript loops such as `users.forEach(function(user){`,\r\nso lexical scope and nesting applies as it would with regular\r\nJavaScript:\r\n\r\n```jade\r\neach user in users\r\n  each role in user.roles\r\n    li= role\r\n```\r\n\r\n You may also use `for` if you prefer:\r\n\r\n```jade\r\nfor user in users\r\n  for role in user.roles\r\n    li= role\r\n```\r\n\r\n<a name=\"a10\"/>\r\n## Conditionals\r\n\r\n Jade conditionals are equivalent to those using the code (`-`) prefix,\r\n however allow you to ditch parenthesis to become more designer friendly,\r\n however keep in mind the expression given is _regular_ JavaScript:\r\n\r\n```jade\r\nfor user in users\r\n  if user.role == 'admin'\r\n    p #{user.name} is an admin\r\n  else\r\n    p= user.name\r\n```\r\n\r\n is equivalent to the following using vanilla JavaScript literals:\r\n\r\n```jade\r\nfor user in users\r\n  - if (user.role == 'admin')\r\n    p #{user.name} is an admin\r\n  - else\r\n    p= user.name\r\n```\r\n\r\n  Jade also provides `unless` which is equivalent to `if (!(expr))`:\r\n\r\n```jade\r\nfor user in users\r\n  unless user.isAnonymous\r\n    p\r\n      | Click to view\r\n      a(href='/users/' + user.id)= user.name\r\n```\r\n\r\n<a name=\"a11\"/>\r\n## Template inheritance\r\n\r\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\r\n\r\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\r\n\r\n```jade\r\nhtml\r\n  head\r\n    h1 My Site - #{title}\r\n    block scripts\r\n      script(src='/jquery.js')\r\n  body\r\n    block content\r\n    block foot\r\n      #footer\r\n        p some footer content\r\n```\r\n\r\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\r\n\r\n```jade\r\nextends layout\r\n\r\nblock scripts\r\n  script(src='/jquery.js')\r\n  script(src='/pets.js')\r\n\r\nblock content\r\n  h1= title\r\n  each pet in pets\r\n    include pet\r\n```\r\n\r\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\r\n\r\n```jade\r\nextends regular-layout\r\n\r\nblock content\r\n  .sidebar\r\n    block sidebar\r\n      p nothing\r\n  .primary\r\n    block primary\r\n      p nothing\r\n```\r\n\r\n<a name=\"a12\"/>\r\n## Block append / prepend\r\n\r\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\r\n\r\n```jade\r\nhtml\r\n  head\r\n    block head\r\n      script(src='/vendor/jquery.js')\r\n      script(src='/vendor/caustic.js')\r\n  body\r\n    block content\r\n```\r\n\r\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\r\n\r\n```jade\r\nextends layout\r\n\r\nblock append head\r\n  script(src='/vendor/three.js')\r\n  script(src='/game.js')\r\n```\r\n\r\n  When using `block append` or `block prepend` the `block` is optional:\r\n\r\n```jade\r\nextends layout\r\n\r\nappend head\r\n  script(src='/vendor/three.js')\r\n  script(src='/game.js')\r\n```\r\n\r\n<a name=\"a13\"/>\r\n## Includes\r\n\r\n Includes allow you to statically include chunks of Jade,\r\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\r\n\r\n    ./layout.jade\r\n    ./includes/\r\n      ./head.jade\r\n      ./foot.jade\r\n\r\nand the following _layout.jade_:\r\n\r\n```jade\r\nhtml\r\n  include includes/head\r\n  body\r\n    h1 My Site\r\n    p Welcome to my super amazing site.\r\n    include includes/foot\r\n```\r\n\r\nboth includes _includes/head_ and _includes/foot_ are\r\nread relative to the `filename` option given to _layout.jade_,\r\nwhich should be an absolute path to this file, however Express\r\ndoes this for you. Include then parses these files, and injects\r\nthe AST produced to render what you would expect:\r\n\r\n```html\r\n<html>\r\n  <head>\r\n    <title>My Site</title>\r\n    <script src=\"/javascripts/jquery.js\">\r\n    </script><script src=\"/javascripts/app.js\"></script>\r\n  </head>\r\n  <body>\r\n    <h1>My Site</h1>\r\n    <p>Welcome to my super lame site.</p>\r\n    <div id=\"footer\">\r\n      <p>Copyright>(c) foobar</p>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nAs mentioned `include` can be used to include other content\r\nsuch as html or css. By providing an extension, Jade will\r\nread that file in, apply any [filter](#a7) matching the file's\r\nextension, and insert that content into the output.\r\n\r\n```jade\r\nhtml\r\n  head\r\n    //- css and js have simple filters that wrap them in\r\n        <style> and <script> tags, respectively\r\n    include stylesheet.css\r\n    include script.js\r\n  body\r\n    //- \"markdown\" files will use the \"markdown\" filter\r\n        to convert Markdown to HTML\r\n    include introduction.markdown\r\n    //- html files have no filter and are included verbatim\r\n    include content.html\r\n```\r\n\r\n  Include directives may also accept a block, in which case the\r\n  the given block will be appended to the _last_ block defined\r\n  in the file. For example if `head.jade` contains:\r\n\r\n```jade\r\nhead\r\n  script(src='/jquery.js')\r\n```\r\n\r\n We may append values by providing a block to `include head`\r\n as shown below, adding the two scripts.\r\n\r\n```jade\r\nhtml\r\n  include head\r\n    script(src='/foo.js')\r\n    script(src='/bar.js')\r\n  body\r\n    h1 test\r\n```\r\n\r\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\r\n\r\n```jade\r\nhead\r\n  yield\r\n  script(src='/jquery.js')\r\n  script(src='/jquery.ui.js')\r\n```\r\n\r\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example suppose we have `user.jade` which utilizes a `user` variable.\r\n\r\n```jade\r\nh1= user.name\r\np= user.occupation\r\n```\r\n\r\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\r\n\r\n```jade\r\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\r\n\r\neach user in users\r\n  .user\r\n    include user\r\n```\r\n\r\nyielding:\r\n\r\n```html\r\n<div class=\"user\">\r\n  <h1>Tobi</h1>\r\n  <p>Ferret</p>\r\n</div>\r\n```\r\n\r\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\r\n\r\n```jade\r\neach person in users\r\n  .user\r\n    user = person\r\n    include user\r\n```\r\n\r\n<a name=\"a14\"/>\r\n## Mixins\r\n\r\n Mixins are converted to regular JavaScript functions in\r\n the compiled template that Jade constructs. Mixins may\r\n take arguments, though not required:\r\n\r\n```jade\r\nmixin list\r\n  ul\r\n    li foo\r\n    li bar\r\n    li baz\r\n```\r\n\r\n  Utilizing a mixin without args looks similar, just without a block:\r\n\r\n```jade\r\nh2 Groceries\r\nmixin list\r\n```\r\n\r\n  Mixins may take one or more arguments as well, the arguments\r\n  are regular javascripts expressions, so for example the following:\r\n\r\n```jade\r\nmixin pets(pets)\r\n  ul.pets\r\n    - each pet in pets\r\n      li= pet\r\n\r\nmixin profile(user)\r\n  .user\r\n    h2= user.name\r\n    mixin pets(user.pets)\r\n```\r\n\r\n   Would yield something similar to the following html:\r\n\r\n```html\r\n<div class=\"user\">\r\n  <h2>tj</h2>\r\n  <ul class=\"pets\">\r\n    <li>tobi</li>\r\n    <li>loki</li>\r\n    <li>jane</li>\r\n    <li>manny</li>\r\n  </ul>\r\n</div>\r\n```\r\n\r\n<a name=\"a15\"/>\r\n## Generated Output\r\n\r\n Suppose we have the following Jade:\r\n\r\n```jade\r\n- var title = 'yay'\r\nh1.title #{title}\r\np Just an example\r\n```\r\n\r\n When the `compileDebug` option is not explicitly `false`, Jade\r\n will compile the function instrumented with `__.lineno = n;`, which\r\n in the event of an exception is passed to `rethrow()` which constructs\r\n a useful message relative to the initial Jade input.\r\n\r\n```js\r\nfunction anonymous(locals) {\r\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\r\n  var rethrow = jade.rethrow;\r\n  try {\r\n    var attrs = jade.attrs, escape = jade.escape;\r\n    var buf = [];\r\n    with (locals || {}) {\r\n      var interp;\r\n      __.lineno = 1;\r\n       var title = 'yay'\r\n      __.lineno = 2;\r\n      buf.push('<h1');\r\n      buf.push(attrs({ \"class\": ('title') }));\r\n      buf.push('>');\r\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\r\n      buf.push('</h1>');\r\n      __.lineno = 3;\r\n      buf.push('<p>');\r\n      buf.push('Just an example');\r\n      buf.push('</p>');\r\n    }\r\n    return buf.join(\"\");\r\n  } catch (err) {\r\n    rethrow(err, __.input, __.filename, __.lineno);\r\n  }\r\n}\r\n```\r\n\r\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\r\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\r\nto toString() compiled templates and avoid running the entire Jade library on\r\nthe client, increasing performance, and decreasing the amount of JavaScript\r\nrequired.\r\n\r\n```js\r\nfunction anonymous(locals) {\r\n  var attrs = jade.attrs, escape = jade.escape;\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    var title = 'yay'\r\n    buf.push('<h1');\r\n    buf.push(attrs({ \"class\": ('title') }));\r\n    buf.push('>');\r\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\r\n    buf.push('</h1>');\r\n    buf.push('<p>');\r\n    buf.push('Just an example');\r\n    buf.push('</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n<a name=\"a16\"/>\r\n## Example Makefile\r\n\r\n  Below is an example Makefile used to compile _pages/*.jade_\r\n  into _pages/*.html_ files by simply executing `make`.\r\n\r\n_Note:_ If you try to run this snippet and `make` throws a `missing separator` error, you should make sure all indented lines use a tab for indentation instead of spaces. (For whatever reason, GitHub renders this code snippet with 4-space indentation although the actual README file uses tabs in this snippet.)\r\n\r\n```make\r\nJADE = $(shell find . -wholename './pages/*.jade')\r\nHTML = $(JADE:.jade=.html)\r\n\r\nall: $(HTML)\r\n\r\n%.html: %.jade\r\n\tjade < $< --path $< > $@\r\n\r\nclean:\r\n\trm -f $(HTML)\r\n\r\n.PHONY: clean\r\n```\r\n\r\nthis can be combined with the `watch(1)` command to produce\r\na watcher-like behaviour:\r\n\r\n```bash\r\n$ watch make\r\n```\r\n\r\nor you use the watch option below:\r\n\r\n<a name=\"a17\"/>\r\n## jade(1)\r\n\r\n```\r\n\r\nUsage: jade [options] [dir|file ...]\r\n\r\nOptions:\r\n\r\n  -h, --help         output usage information\r\n  -V, --version      output the version number\r\n  -O, --obj <str>    javascript options object\r\n  -o, --out <dir>    output the compiled html to <dir>\r\n  -p, --path <path>  filename used to resolve includes\r\n  -P, --pretty       compile pretty html output\r\n  -c, --client       compile function for client-side runtime.js\r\n  -D, --no-debug     compile without debugging (smaller functions)\r\n  -w, --watch        watch files for changes and automatically re-render\r\n\r\nExamples:\r\n\r\n  # translate jade the templates dir\r\n  $ jade templates\r\n\r\n  # create {foo,bar}.html\r\n  $ jade {foo,bar}.jade\r\n\r\n  # jade over stdio\r\n  $ jade < my.jade > my.html\r\n\r\n  # jade over stdio\r\n  $ echo \"h1 Jade!\" | jade\r\n\r\n  # foo, bar dirs rendering to /tmp\r\n  $ jade foo bar --out /tmp \r\n\r\n```\r\n\r\n<a name=\"a18\"/>\r\n## Tutorials\r\n\r\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\r\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\r\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\r\n\r\n<a name=\"a19\"/>\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","readmeFilename":"Readme.md","_id":"jade@0.31.2","dist":{"shasum":"cdc8ad8120a8bc58ee8cd975e19fdc5552f8492a","tarball":"http://registry.npmjs.org/jade/-/jade-0.31.2.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"0.32.0":{"name":"jade","description":"Jade template engine","version":"0.32.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"1.2.0","mkdirp":"0.3.x","transformers":"2.0.1","character-parser":"1.0.2","monocle":"0.1.48","with":"~1.1.0","constantinople":"~1.0.1"},"devDependencies":{"coffee-script":"*","mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*","browserify":"*","linify":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"test":"mocha -R spec","prepublish":"npm prune && linify transform bin","build":"npm run compile","compile":"npm run compile-full && npm run compile-runtime","compile-full":"browserify ./lib/jade.js --standalone jade -x ./node_modules/transformers > jade.js","compile-runtime":"browserify ./lib/runtime.js --standalone jade > runtime.js"},"browser":{"./lib/filters.js":"./lib/filters-client.js"},"readme":"# Jade - template engine \r\n[![Build Status](https://travis-ci.org/visionmedia/jade.png?branch=master)](https://travis-ci.org/visionmedia/jade)\r\n[![Dependency Status](https://gemnasium.com/visionmedia/jade.png)](https://gemnasium.com/visionmedia/jade)\r\n[![NPM version](https://badge.fury.io/js/jade.png)](http://badge.fury.io/js/jade)\r\n\r\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\r\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\r\n\r\n## Announcement\r\n\r\nJade version 0.31.0 deprecated implicit text only support for scripts and styles.  To fix this all you need to do is add a `.` character after the script or style tag.\r\n\r\nIt is hoped that this change will make Jade easier for newcomers to learn without affecting the power of the language or leading to excessive verboseness.\r\n\r\nIf you have a lot of Jade files that need fixing you can use [fix-jade](https://github.com/ForbesLindesay/fix-jade) to attempt to automate the process.\r\n\r\n## Test drive\r\n\r\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\r\n\r\n## README Contents\r\n\r\n- [Features](#a1)\r\n- [Implementations](#a2)\r\n- [Installation](#a3)\r\n- [Browser Support](#a4)\r\n- [Public API](#a5)\r\n- [Syntax](#a6)\r\n    - [Line Endings](#a6-1)\r\n    - [Tags](#a6-2)\r\n    - [Tag Text](#a6-3)\r\n    - [Comments](#a6-4)\r\n    - [Block Comments](#a6-5)\r\n    - [Nesting](#a6-6)\r\n    - [Block Expansion](#a6-7)\r\n    - [Case](#a6-8)\r\n    - [Attributes](#a6-9)\r\n    - [HTML](#a6-10)\r\n    - [Doctypes](#a6-11)\r\n- [Filters](#a7)\r\n- [Code](#a8)\r\n- [Iteration](#a9)\r\n- [Conditionals](#a10)\r\n- [Template inheritance](#a11)\r\n- [Block append / prepend](#a12)\r\n- [Includes](#a13)\r\n- [Mixins](#a14)\r\n- [Generated Output](#a15)\r\n- [Example Makefile](#a16)\r\n- [jade(1)](#a17)\r\n- [Tutorials](#a18)\r\n- [License](#a19)\r\n\r\n<a name=\"a1\"/>\r\n## Features\r\n\r\n  - client-side support\r\n  - great readability\r\n  - flexible indentation\r\n  - block-expansion\r\n  - mixins\r\n  - static includes\r\n  - attribute interpolation\r\n  - code is escaped by default for security\r\n  - contextual error reporting at compile &amp; run time\r\n  - executable for compiling jade templates via the command line\r\n  - html 5 mode (the default doctype)\r\n  - optional memory caching\r\n  - combine dynamic and static tag classes\r\n  - parse tree manipulation via _filters_\r\n  - template inheritance\r\n  - block append / prepend\r\n  - supports [Express JS](http://expressjs.com) out of the box\r\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\r\n  - block comments\r\n  - no tag prefix\r\n  - filters\r\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\r\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\r\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\r\n    - :cdata\r\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\r\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\r\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\r\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\r\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\r\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\r\n  - [html2jade](https://github.com/donpark/html2jade) converter\r\n\r\n<a name=\"a2\"/>\r\n## Implementations\r\n\r\n  - [php](http://github.com/everzet/jade.php)\r\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\r\n  - [ruby](https://github.com/slim-template/slim)\r\n  - [python](https://github.com/SyrusAkbary/pyjade)\r\n  - [java](https://github.com/neuland/jade4j)\r\n\r\n<a name=\"a3\"/>\r\n## Installation\r\n\r\nvia npm:\r\n\r\n```bash\r\n$ npm install jade\r\n```\r\n\r\n<a name=\"a4\"/>\r\n## Browser Support\r\n\r\n To compile jade to a single file compatible for client-side use simply execute:\r\n\r\n```bash\r\n$ make jade.js\r\n```\r\n\r\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\r\n\r\n```bash\r\n$ make jade.min.js\r\n```\r\n\r\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\r\n\r\n```jade\r\np Hello #{name}\r\n```\r\n\r\n Can then be as small as the following generated function:\r\n\r\n```js\r\nfunction anonymous(locals, attrs, escape, rethrow) {\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\r\n  via `jade.attrs`, `jade.escape` etc.\r\n\r\n```js\r\nfunction anonymous(locals, attrs, escape, rethrow) {\r\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n<a name=\"a5\"/>\r\n## Public API\r\n\r\n```js\r\nvar jade = require('jade');\r\n\r\n// Compile a function\r\nvar fn = jade.compile('string of jade', options);\r\nfn(locals);\r\n```\r\n\r\n### Options\r\n\r\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\r\n - `locals`    Local variable object\r\n - `filename`  Used in exceptions, and required when using includes\r\n - `debug`     Outputs tokens and function body generated\r\n - `compiler`  Compiler to replace jade's default\r\n - `compileDebug`  When `false` no debug instrumentation is compiled\r\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\r\n\r\n<a name=\"a6\"/>\r\n## Syntax\r\n\r\n<a name=\"a6-1\"/>\r\n### Line Endings\r\n\r\n**CRLF** and **CR** are converted to **LF** before parsing.\r\n\r\n<a name=\"a6-2\"/>\r\n### Tags\r\n\r\nA tag is simply a leading word:\r\n\r\n```jade\r\nhtml\r\n```\r\n\r\nfor example is converted to `<html></html>`\r\n\r\ntags can also have ids:\r\n\r\n```jade\r\ndiv#container\r\n```\r\n\r\nwhich would render `<div id=\"container\"></div>`\r\n\r\nhow about some classes?\r\n\r\n```jade\r\ndiv.user-details\r\n```\r\n\r\nrenders `<div class=\"user-details\"></div>`\r\n\r\nmultiple classes? _and_ an id? sure:\r\n\r\n```jade\r\ndiv#foo.bar.baz\r\n```\r\n\r\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\r\n\r\ndiv div div sure is annoying, how about:\r\n\r\n```jade\r\n#foo\r\n.bar\r\n```\r\n\r\nwhich is syntactic sugar for what we have already been doing, and outputs:\r\n\r\n```html\r\n<div id=\"foo\"></div><div class=\"bar\"></div>\r\n```\r\n\r\n<a name=\"a6-3\"/>\r\n### Tag Text\r\n\r\nSimply place some content after the tag:\r\n\r\n```jade\r\np wahoo!\r\n```\r\n\r\nrenders `<p>wahoo!</p>`.\r\n\r\nwell cool, but how about large bodies of text:\r\n\r\n```jade\r\np\r\n  | foo bar baz\r\n  | rawr rawr\r\n  | super cool\r\n  | go jade go\r\n```\r\n\r\nrenders `<p>foo bar baz rawr.....</p>`\r\n\r\ninterpolation? yup! both types of text can utilize interpolation,\r\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\r\n\r\n```jade\r\n#user #{name} &lt;#{email}&gt;\r\n```\r\n\r\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\r\n\r\nActually want `#{}` for some reason? escape it!\r\n\r\n```jade\r\np \\#{something}\r\n```\r\n\r\nnow we have `<p>#{something}</p>`\r\n\r\nWe can also utilize the unescaped variant `!{html}`, so the following\r\nwill result in a literal script tag:\r\n\r\n```jade\r\n- var html = \"<script></script>\"\r\n| !{html}\r\n```\r\n\r\nNested tags that also contain text can optionally use a text block:\r\n\r\n```jade\r\nlabel\r\n  | Username:\r\n  input(name='user[name]')\r\n```\r\n\r\nor immediate tag text:\r\n\r\n```jade\r\nlabel Username:\r\n  input(name='user[name]')\r\n```\r\n\r\nAs an alternative, we may use a trailing `.` to indicate a text block, for example:\r\n\r\n```jade\r\np.\r\n  foo asdf\r\n  asdf\r\n   asdfasdfaf\r\n   asdf\r\n  asd.\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<p>foo asdf\r\nasdf\r\n  asdfasdfaf\r\n  asdf\r\nasd.\r\n</p>\r\n```\r\n\r\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\r\n\r\n```jade\r\np .\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<p>.</p>\r\n```\r\n\r\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\r\n\r\n```html\r\n<p>foo\\bar</p>\r\n```\r\n\r\nuse:\r\n\r\n```jade\r\np.\r\n  foo\\\\bar\r\n```\r\n\r\n<a name=\"a6-4\"/>\r\n### Comments\r\n\r\nSingle line comments currently look the same as JavaScript comments,\r\naka `//` and must be placed on their own line:\r\n\r\n```jade\r\n// just some paragraphs\r\np foo\r\np bar\r\n```\r\n\r\nwould output\r\n\r\n```html\r\n<!-- just some paragraphs -->\r\n<p>foo</p>\r\n<p>bar</p>\r\n```\r\n\r\nJade also supports unbuffered comments, by simply adding a hyphen:\r\n\r\n```jade\r\n//- will not output within markup\r\np foo\r\np bar\r\n```\r\n\r\noutputting\r\n\r\n```html\r\n<p>foo</p>\r\n<p>bar</p>\r\n```\r\n\r\n<a name=\"a6-5\"/>\r\n### Block Comments\r\n\r\n A block comment is legal as well:\r\n\r\n```jade\r\nbody\r\n  //\r\n    #content\r\n      h1 Example\r\n```\r\n\r\noutputting\r\n\r\n```html\r\n<body>\r\n  <!--\r\n  <div id=\"content\">\r\n    <h1>Example</h1>\r\n  </div>\r\n  -->\r\n</body>\r\n```\r\n\r\nJade supports conditional-comments as well, for example:\r\n\r\n```jade\r\nhead\r\n  //if lt IE 8\r\n    script(src='/ie-sucks.js')\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<head>\r\n  <!--[if lt IE 8]>\r\n    <script src=\"/ie-sucks.js\"></script>\r\n  <![endif]-->\r\n</head>\r\n```\r\n\r\n<a name=\"a6-6\"/>\r\n### Nesting\r\n\r\n Jade supports nesting to define the tags in a natural way:\r\n\r\n```jade\r\nul\r\n  li.first\r\n    a(href='#') foo\r\n  li\r\n    a(href='#') bar\r\n  li.last\r\n    a(href='#') baz\r\n```\r\n\r\n<a name=\"a6-7\"/>\r\n### Block Expansion\r\n\r\n Block expansion allows you to create terse single-line nested tags,\r\n the following example is equivalent to the nesting example above.\r\n\r\n```jade\r\nul\r\n  li.first: a(href='#') foo\r\n  li: a(href='#') bar\r\n  li.last: a(href='#') baz\r\n```\r\n\r\n<a name=\"a6-8\"/>\r\n### Case\r\n\r\n The case statement takes the following form:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    friends = 10\r\n    case friends\r\n      when 0\r\n        p you have no friends\r\n      when 1\r\n        p you have a friend\r\n      default\r\n        p you have #{friends} friends\r\n```\r\n\r\n Block expansion may also be used:\r\n\r\n```jade\r\nfriends = 5\r\n\r\nhtml\r\n  body\r\n    case friends\r\n      when 0: p you have no friends\r\n      when 1: p you have a friend\r\n      default: p you have #{friends} friends\r\n```\r\n\r\n<a name=\"a6-9\"/>\r\n### Attributes\r\n\r\nJade currently supports `(` and `)` as attribute delimiters.\r\n\r\n```jade\r\na(href='/login', title='View login page') Login\r\n```\r\n\r\nWhen a value is `undefined` or `null` the attribute is _not_ added,\r\nso this is fine, it will not compile `something=\"null\"`.\r\n\r\n```jade\r\ndiv(something=null)\r\n```\r\n\r\nBoolean attributes are also supported:\r\n\r\n```jade\r\ninput(type=\"checkbox\", checked)\r\n```\r\n\r\nBoolean attributes with code will only output the attribute when `true`:\r\n\r\n```jade\r\ninput(type=\"checkbox\", checked=someValue)\r\n```\r\n\r\nMultiple lines work too:\r\n\r\n```jade\r\ninput(type='checkbox',\r\n  name='agreement',\r\n  checked)\r\n```\r\n\r\nMultiple lines without the comma work fine:\r\n\r\n```jade\r\ninput(type='checkbox'\r\n  name='agreement'\r\n  checked)\r\n```\r\n\r\nFunky whitespace? fine:\r\n\r\n```jade\r\ninput(\r\n  type='checkbox'\r\n  name='agreement'\r\n  checked)\r\n```\r\n\r\nColons work:\r\n\r\n```jade\r\nrss(xmlns:atom=\"atom\")\r\n```\r\n\r\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\r\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\r\nwe could use regular javascript concatenation:\r\n\r\n```jade\r\na(href='/user/' + user.id)= user.name\r\n```\r\n\r\nor we could use jade's interpolation, which I added because everyone\r\nusing Ruby or CoffeeScript seems to think this is legal js..:\r\n\r\n```jade\r\na(href='/user/#{user.id}')= user.name\r\n```\r\n\r\nThe `class` attribute is special-cased when an array is given,\r\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\r\n\r\n```jade\r\nbody(class=bodyClasses)\r\n```\r\n\r\n<a name=\"a6-10\"/>\r\n### HTML\r\n\r\n Inline html is fine, we can use the pipe syntax to\r\n write arbitrary text, in this case some html:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    | <h1>Title</h1>\r\n    | <p>foo bar baz</p>\r\n```\r\n\r\n Or we can use the trailing `.` to indicate to Jade that we\r\n only want text in this block, allowing us to omit the pipes:\r\n\r\n```jade\r\nhtml\r\n  body.\r\n    <h1>Title</h1>\r\n    <p>foo bar baz</p>\r\n```\r\n\r\n Both of these examples yield the same result:\r\n\r\n```html\r\n<html><body><h1>Title</h1>\r\n<p>foo bar baz</p>\r\n</body></html>\r\n```\r\n\r\n The same rule applies for anywhere you can have text\r\n in jade, raw html is fine:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    h1 User <em>#{name}</em>\r\n```\r\n\r\n<a name=\"a6-11\"/>\r\n### Doctypes\r\n\r\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\r\n\r\n```jade\r\n!!!\r\n```\r\n\r\nor\r\n\r\n```jade\r\ndoctype\r\n```\r\n\r\nWill output the _html 5_  doctype, however:\r\n\r\n```jade\r\n!!! transitional\r\n```\r\n\r\nWill output the _transitional_ doctype.\r\n\r\nDoctypes are case-insensitive, so the following are equivalent:\r\n\r\n```jade\r\ndoctype Basic\r\ndoctype basic\r\n```\r\n\r\nit's also possible to simply pass a doctype literal:\r\n\r\n```jade\r\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"\r\n```\r\n\r\nyielding:\r\n\r\n```html\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\">\r\n```\r\n\r\nBelow are the doctypes defined by default, which can easily be extended:\r\n\r\n```js\r\nvar doctypes = exports.doctypes = {\r\n  '5': '<!DOCTYPE html>',\r\n  'default': '<!DOCTYPE html>',\r\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\r\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\r\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\r\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\r\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\r\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\r\n};\r\n```\r\n\r\nTo alter the default simply change:\r\n\r\n```js\r\njade.doctypes.default = 'whatever you want';\r\n```\r\n\r\n<a name=\"a7\"/>\r\n## Filters\r\n\r\nFilters are prefixed with `:`, for example `:markdown` and\r\npass the following block of text to an arbitrary function for processing. View the _features_\r\nat the top of this document for available filters.\r\n\r\n```jade\r\nbody\r\n  :markdown\r\n    Woah! jade _and_ markdown, very **cool**\r\n    we can even link to [stuff](http://google.com)\r\n```\r\n\r\nRenders:\r\n\r\n```html\r\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\r\n```\r\n\r\n<a name=\"a8\"/>\r\n## Code\r\n\r\nJade currently supports three classifications of executable code. The first\r\nis prefixed by `-`, and is not buffered:\r\n\r\n```jade\r\n- var foo = 'bar';\r\n```\r\n\r\nThis can be used for conditionals, or iteration:\r\n\r\n```jade\r\n- for (var key in obj)\r\n  p= obj[key]\r\n```\r\n\r\nDue to Jade's buffering techniques the following is valid as well:\r\n\r\n```jade\r\n- if (foo)\r\n  ul\r\n    li yay\r\n    li foo\r\n    li worked\r\n- else\r\n  p oh no! didnt work\r\n```\r\n\r\nHell, even verbose iteration:\r\n\r\n```jade\r\n- if (items.length)\r\n  ul\r\n    - items.forEach(function(item){\r\n      li= item\r\n    - })\r\n```\r\n\r\nAnything you want!\r\n\r\nNext up we have _escaped_ buffered code, which is used to\r\nbuffer a return value, which is prefixed by `=`:\r\n\r\n```jade\r\n- var foo = 'bar'\r\n= foo\r\nh1= foo\r\n```\r\n\r\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\r\nby default for security, however to output unescaped return values\r\nyou may use `!=`:\r\n\r\n```jade\r\np!= aVarContainingMoreHTML\r\n```\r\n\r\n Jade also has designer-friendly variants, making the literal JavaScript\r\n more expressive and declarative. For example the following assignments\r\n are equivalent, and the expression is still regular javascript:\r\n\r\n```jade\r\n- var foo = 'foo ' + 'bar'\r\nfoo = 'foo ' + 'bar'\r\n```\r\n\r\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\r\n\r\n```jade\r\nif foo == 'bar'\r\n  ul\r\n    li yay\r\n    li foo\r\n    li worked\r\nelse\r\n  p oh no! didnt work\r\n```\r\n\r\n<a name=\"a9\"/>\r\n## Iteration\r\n\r\n Along with vanilla JavaScript Jade also supports a subset of\r\n constructs that allow you to create more designer-friendly templates,\r\n one of these constructs is `each`, taking the form:\r\n\r\n```jade\r\neach VAL[, KEY] in OBJ\r\n```\r\n\r\nAn example iterating over an array:\r\n\r\n```jade\r\n- var items = [\"one\", \"two\", \"three\"]\r\neach item in items\r\n  li= item\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<li>one</li>\r\n<li>two</li>\r\n<li>three</li>\r\n```\r\n\r\niterating an array with index:\r\n\r\n```jade\r\nitems = [\"one\", \"two\", \"three\"]\r\neach item, i in items\r\n  li #{item}: #{i}\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<li>one: 0</li>\r\n<li>two: 1</li>\r\n<li>three: 2</li>\r\n```\r\n\r\niterating an object's keys and values:\r\n\r\n```jade\r\nobj = { foo: 'bar' }\r\neach val, key in obj\r\n  li #{key}: #{val}\r\n```\r\n\r\nwould output `<li>foo: bar</li>`\r\n\r\nInternally Jade converts these statements to regular\r\nJavaScript loops such as `users.forEach(function(user){`,\r\nso lexical scope and nesting applies as it would with regular\r\nJavaScript:\r\n\r\n```jade\r\neach user in users\r\n  each role in user.roles\r\n    li= role\r\n```\r\n\r\n You may also use `for` if you prefer:\r\n\r\n```jade\r\nfor user in users\r\n  for role in user.roles\r\n    li= role\r\n```\r\n\r\n<a name=\"a10\"/>\r\n## Conditionals\r\n\r\n Jade conditionals are equivalent to those using the code (`-`) prefix,\r\n however allow you to ditch parenthesis to become more designer friendly,\r\n however keep in mind the expression given is _regular_ JavaScript:\r\n\r\n```jade\r\nfor user in users\r\n  if user.role == 'admin'\r\n    p #{user.name} is an admin\r\n  else\r\n    p= user.name\r\n```\r\n\r\n is equivalent to the following using vanilla JavaScript literals:\r\n\r\n```jade\r\nfor user in users\r\n  - if (user.role == 'admin')\r\n    p #{user.name} is an admin\r\n  - else\r\n    p= user.name\r\n```\r\n\r\n  Jade also provides `unless` which is equivalent to `if (!(expr))`:\r\n\r\n```jade\r\nfor user in users\r\n  unless user.isAnonymous\r\n    p\r\n      | Click to view\r\n      a(href='/users/' + user.id)= user.name\r\n```\r\n\r\n<a name=\"a11\"/>\r\n## Template inheritance\r\n\r\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\r\n\r\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\r\n\r\n```jade\r\nhtml\r\n  head\r\n    title My Site - #{title}\r\n    block scripts\r\n      script(src='/jquery.js')\r\n  body\r\n    block content\r\n    block foot\r\n      #footer\r\n        p some footer content\r\n```\r\n\r\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\r\n\r\n```jade\r\nextends layout\r\n\r\nblock scripts\r\n  script(src='/jquery.js')\r\n  script(src='/pets.js')\r\n\r\nblock content\r\n  h1= title\r\n  each pet in pets\r\n    include pet\r\n```\r\n\r\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\r\n\r\n```jade\r\nextends regular-layout\r\n\r\nblock content\r\n  .sidebar\r\n    block sidebar\r\n      p nothing\r\n  .primary\r\n    block primary\r\n      p nothing\r\n```\r\n\r\n<a name=\"a12\"/>\r\n## Block append / prepend\r\n\r\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\r\n\r\n```jade\r\nhtml\r\n  head\r\n    block head\r\n      script(src='/vendor/jquery.js')\r\n      script(src='/vendor/caustic.js')\r\n  body\r\n    block content\r\n```\r\n\r\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\r\n\r\n```jade\r\nextends layout\r\n\r\nblock append head\r\n  script(src='/vendor/three.js')\r\n  script(src='/game.js')\r\n```\r\n\r\n  When using `block append` or `block prepend` the `block` is optional:\r\n\r\n```jade\r\nextends layout\r\n\r\nappend head\r\n  script(src='/vendor/three.js')\r\n  script(src='/game.js')\r\n```\r\n\r\n<a name=\"a13\"/>\r\n## Includes\r\n\r\n Includes allow you to statically include chunks of Jade,\r\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\r\n\r\n    ./layout.jade\r\n    ./includes/\r\n      ./head.jade\r\n      ./foot.jade\r\n\r\nand the following _layout.jade_:\r\n\r\n```jade\r\nhtml\r\n  include includes/head\r\n  body\r\n    h1 My Site\r\n    p Welcome to my super amazing site.\r\n    include includes/foot\r\n```\r\n\r\nboth includes _includes/head_ and _includes/foot_ are\r\nread relative to the `filename` option given to _layout.jade_,\r\nwhich should be an absolute path to this file, however Express\r\ndoes this for you. Include then parses these files, and injects\r\nthe AST produced to render what you would expect:\r\n\r\n```html\r\n<html>\r\n  <head>\r\n    <title>My Site</title>\r\n    <script src=\"/javascripts/jquery.js\">\r\n    </script><script src=\"/javascripts/app.js\"></script>\r\n  </head>\r\n  <body>\r\n    <h1>My Site</h1>\r\n    <p>Welcome to my super lame site.</p>\r\n    <div id=\"footer\">\r\n      <p>Copyright>(c) foobar</p>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nAs mentioned `include` can be used to include other content\r\nsuch as html or css. By providing an extension, Jade will\r\nread that file in, apply any [filter](#a7) matching the file's\r\nextension, and insert that content into the output.\r\n\r\n```jade\r\nhtml\r\n  head\r\n    //- css and js have simple filters that wrap them in\r\n        <style> and <script> tags, respectively\r\n    include stylesheet.css\r\n    include script.js\r\n  body\r\n    //- \"markdown\" files will use the \"markdown\" filter\r\n        to convert Markdown to HTML\r\n    include introduction.markdown\r\n    //- html files have no filter and are included verbatim\r\n    include content.html\r\n```\r\n\r\n  Include directives may also accept a block, in which case the\r\n  the given block will be appended to the _last_ block defined\r\n  in the file. For example if `head.jade` contains:\r\n\r\n```jade\r\nhead\r\n  script(src='/jquery.js')\r\n```\r\n\r\n We may append values by providing a block to `include head`\r\n as shown below, adding the two scripts.\r\n\r\n```jade\r\nhtml\r\n  include head\r\n    script(src='/foo.js')\r\n    script(src='/bar.js')\r\n  body\r\n    h1 test\r\n```\r\n\r\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\r\n\r\n```jade\r\nhead\r\n  yield\r\n  script(src='/jquery.js')\r\n  script(src='/jquery.ui.js')\r\n```\r\n\r\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example suppose we have `user.jade` which utilizes a `user` variable.\r\n\r\n```jade\r\nh1= user.name\r\np= user.occupation\r\n```\r\n\r\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\r\n\r\n```jade\r\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\r\n\r\neach user in users\r\n  .user\r\n    include user\r\n```\r\n\r\nyielding:\r\n\r\n```html\r\n<div class=\"user\">\r\n  <h1>Tobi</h1>\r\n  <p>Ferret</p>\r\n</div>\r\n```\r\n\r\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\r\n\r\n```jade\r\neach person in users\r\n  .user\r\n    user = person\r\n    include user\r\n```\r\n\r\n<a name=\"a14\"/>\r\n## Mixins\r\n\r\n Mixins are converted to regular JavaScript functions in\r\n the compiled template that Jade constructs. Mixins may\r\n take arguments, though not required:\r\n\r\n```jade\r\nmixin list\r\n  ul\r\n    li foo\r\n    li bar\r\n    li baz\r\n```\r\n\r\n  Utilizing a mixin without args looks similar, just without a block:\r\n\r\n```jade\r\nh2 Groceries\r\nmixin list\r\n```\r\n\r\n  Mixins may take one or more arguments as well, the arguments\r\n  are regular javascripts expressions, so for example the following:\r\n\r\n```jade\r\nmixin pets(pets)\r\n  ul.pets\r\n    - each pet in pets\r\n      li= pet\r\n\r\nmixin profile(user)\r\n  .user\r\n    h2= user.name\r\n    mixin pets(user.pets)\r\n```\r\n\r\n   Would yield something similar to the following html:\r\n\r\n```html\r\n<div class=\"user\">\r\n  <h2>tj</h2>\r\n  <ul class=\"pets\">\r\n    <li>tobi</li>\r\n    <li>loki</li>\r\n    <li>jane</li>\r\n    <li>manny</li>\r\n  </ul>\r\n</div>\r\n```\r\n\r\n<a name=\"a15\"/>\r\n## Generated Output\r\n\r\n Suppose we have the following Jade:\r\n\r\n```jade\r\n- var title = 'yay'\r\nh1.title #{title}\r\np Just an example\r\n```\r\n\r\n When the `compileDebug` option is not explicitly `false`, Jade\r\n will compile the function instrumented with `__.lineno = n;`, which\r\n in the event of an exception is passed to `rethrow()` which constructs\r\n a useful message relative to the initial Jade input.\r\n\r\n```js\r\nfunction anonymous(locals) {\r\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\r\n  var rethrow = jade.rethrow;\r\n  try {\r\n    var attrs = jade.attrs, escape = jade.escape;\r\n    var buf = [];\r\n    with (locals || {}) {\r\n      var interp;\r\n      __.lineno = 1;\r\n       var title = 'yay'\r\n      __.lineno = 2;\r\n      buf.push('<h1');\r\n      buf.push(attrs({ \"class\": ('title') }));\r\n      buf.push('>');\r\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\r\n      buf.push('</h1>');\r\n      __.lineno = 3;\r\n      buf.push('<p>');\r\n      buf.push('Just an example');\r\n      buf.push('</p>');\r\n    }\r\n    return buf.join(\"\");\r\n  } catch (err) {\r\n    rethrow(err, __.input, __.filename, __.lineno);\r\n  }\r\n}\r\n```\r\n\r\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\r\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\r\nto toString() compiled templates and avoid running the entire Jade library on\r\nthe client, increasing performance, and decreasing the amount of JavaScript\r\nrequired.\r\n\r\n```js\r\nfunction anonymous(locals) {\r\n  var attrs = jade.attrs, escape = jade.escape;\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    var title = 'yay'\r\n    buf.push('<h1');\r\n    buf.push(attrs({ \"class\": ('title') }));\r\n    buf.push('>');\r\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\r\n    buf.push('</h1>');\r\n    buf.push('<p>');\r\n    buf.push('Just an example');\r\n    buf.push('</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n<a name=\"a16\"/>\r\n## Example Makefile\r\n\r\n  Below is an example Makefile used to compile _pages/*.jade_\r\n  into _pages/*.html_ files by simply executing `make`.\r\n\r\n_Note:_ If you try to run this snippet and `make` throws a `missing separator` error, you should make sure all indented lines use a tab for indentation instead of spaces. (For whatever reason, GitHub renders this code snippet with 4-space indentation although the actual README file uses tabs in this snippet.)\r\n\r\n```make\r\nJADE = $(shell find . -wholename './pages/*.jade')\r\nHTML = $(JADE:.jade=.html)\r\n\r\nall: $(HTML)\r\n\r\n%.html: %.jade\r\n\tjade < $< --path $< > $@\r\n\r\nclean:\r\n\trm -f $(HTML)\r\n\r\n.PHONY: clean\r\n```\r\n\r\nthis can be combined with the `watch(1)` command to produce\r\na watcher-like behaviour:\r\n\r\n```bash\r\n$ watch make\r\n```\r\n\r\nor you use the watch option below:\r\n\r\n<a name=\"a17\"/>\r\n## jade(1)\r\n\r\n```\r\n\r\nUsage: jade [options] [dir|file ...]\r\n\r\nOptions:\r\n\r\n  -h, --help         output usage information\r\n  -V, --version      output the version number\r\n  -o, --out <dir>    output the compiled html to <dir>\r\n  -O, --obj <str>    javascript options object\r\n  -p, --path <path>  filename used to resolve includes\r\n  -P, --pretty       compile pretty html output\r\n  -c, --client       compile function for client-side runtime.js\r\n  -D, --no-debug     compile without debugging (smaller functions)\r\n  -w, --watch        watch files for changes and automatically re-render\r\n\r\nExamples:\r\n\r\n  # translate jade the templates dir\r\n  $ jade templates\r\n\r\n  # create {foo,bar}.html\r\n  $ jade {foo,bar}.jade\r\n\r\n  # jade over stdio\r\n  $ jade < my.jade > my.html\r\n\r\n  # jade over stdio\r\n  $ echo \"h1 Jade!\" | jade\r\n\r\n  # foo, bar dirs rendering to /tmp\r\n  $ jade foo bar --out /tmp \r\n\r\n```\r\n\r\n*Notice: since `v0.31.0`, `-o` is preferred for `--out` where we used `-O` before.*\r\n\r\n<a name=\"a18\"/>\r\n## Tutorials\r\n\r\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\r\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\r\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\r\n\r\n<a name=\"a19\"/>\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/visionmedia/jade/issues"},"_id":"jade@0.32.0","dist":{"shasum":"9cc483eb1fd95a0e8f96c3e510e57fccf871fe6f","tarball":"http://registry.npmjs.org/jade/-/jade-0.32.0.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"0.33.0":{"name":"jade","description":"Jade template engine","version":"0.33.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"1.2.0","mkdirp":"0.3.x","transformers":"2.0.1","character-parser":"1.0.2","monocle":"0.1.48","with":"~1.1.0","constantinople":"~1.0.1"},"devDependencies":{"coffee-script":"*","mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*","browserify":"*","linify":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"test":"mocha -R spec","prepublish":"npm prune && linify transform bin && npm run build","build":"npm run compile","compile":"npm run compile-full && npm run compile-runtime","compile-full":"browserify ./lib/jade.js --standalone jade -x ./node_modules/transformers > jade.js","compile-runtime":"browserify ./lib/runtime.js --standalone jade > runtime.js"},"browser":{"./lib/filters.js":"./lib/filters-client.js"},"readme":"# Jade - template engine \r\n[![Build Status](https://travis-ci.org/visionmedia/jade.png?branch=master)](https://travis-ci.org/visionmedia/jade)\r\n[![Dependency Status](https://gemnasium.com/visionmedia/jade.png)](https://gemnasium.com/visionmedia/jade)\r\n[![NPM version](https://badge.fury.io/js/jade.png)](http://badge.fury.io/js/jade)\r\n\r\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\r\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\r\n\r\n## Announcement\r\n\r\nJade version 0.31.0 deprecated implicit text only support for scripts and styles.  To fix this all you need to do is add a `.` character after the script or style tag.\r\n\r\nIt is hoped that this change will make Jade easier for newcomers to learn without affecting the power of the language or leading to excessive verboseness.\r\n\r\nIf you have a lot of Jade files that need fixing you can use [fix-jade](https://github.com/ForbesLindesay/fix-jade) to attempt to automate the process.\r\n\r\n## Test drive\r\n\r\n  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\r\n\r\n## README Contents\r\n\r\n- [Features](#a1)\r\n- [Implementations](#a2)\r\n- [Installation](#a3)\r\n- [Browser Support](#a4)\r\n- [Public API](#a5)\r\n- [Syntax](#a6)\r\n    - [Line Endings](#a6-1)\r\n    - [Tags](#a6-2)\r\n    - [Tag Text](#a6-3)\r\n    - [Comments](#a6-4)\r\n    - [Block Comments](#a6-5)\r\n    - [Nesting](#a6-6)\r\n    - [Block Expansion](#a6-7)\r\n    - [Case](#a6-8)\r\n    - [Attributes](#a6-9)\r\n    - [HTML](#a6-10)\r\n    - [Doctypes](#a6-11)\r\n- [Filters](#a7)\r\n- [Code](#a8)\r\n- [Iteration](#a9)\r\n- [Conditionals](#a10)\r\n- [Template inheritance](#a11)\r\n- [Block append / prepend](#a12)\r\n- [Includes](#a13)\r\n- [Mixins](#a14)\r\n- [Generated Output](#a15)\r\n- [Example Makefile](#a16)\r\n- [jade(1)](#a17)\r\n- [Tutorials](#a18)\r\n- [License](#a19)\r\n\r\n<a name=\"a1\"/>\r\n## Features\r\n\r\n  - client-side support\r\n  - great readability\r\n  - flexible indentation\r\n  - block-expansion\r\n  - mixins\r\n  - static includes\r\n  - attribute interpolation\r\n  - code is escaped by default for security\r\n  - contextual error reporting at compile &amp; run time\r\n  - executable for compiling jade templates via the command line\r\n  - html 5 mode (the default doctype)\r\n  - optional memory caching\r\n  - combine dynamic and static tag classes\r\n  - parse tree manipulation via _filters_\r\n  - template inheritance\r\n  - block append / prepend\r\n  - supports [Express JS](http://expressjs.com) out of the box\r\n  - transparent iteration over objects, arrays, and even non-enumerables via `each`\r\n  - block comments\r\n  - no tag prefix\r\n  - filters\r\n    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed\r\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\r\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed\r\n    - :cdata\r\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\r\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\r\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\r\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\r\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\r\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\r\n  - [html2jade](https://github.com/donpark/html2jade) converter\r\n\r\n<a name=\"a2\"/>\r\n## Implementations\r\n\r\n  - [php](http://github.com/everzet/jade.php)\r\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\r\n  - [ruby](https://github.com/slim-template/slim)\r\n  - [python](https://github.com/SyrusAkbary/pyjade)\r\n  - [java](https://github.com/neuland/jade4j)\r\n\r\n<a name=\"a3\"/>\r\n## Installation\r\n\r\nvia npm:\r\n\r\n```bash\r\n$ npm install jade\r\n```\r\n\r\n<a name=\"a4\"/>\r\n## Browser Support\r\n\r\n To compile jade to a single file compatible for client-side use simply execute:\r\n\r\n```bash\r\n$ make jade.js\r\n```\r\n\r\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.\r\n\r\n```bash\r\n$ make jade.min.js\r\n```\r\n\r\n  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template\r\n\r\n```jade\r\np Hello #{name}\r\n```\r\n\r\n Can then be as small as the following generated function:\r\n\r\n```js\r\nfunction anonymous(locals, attrs, escape, rethrow) {\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions\r\n  via `jade.attrs`, `jade.escape` etc.\r\n\r\n```js\r\nfunction anonymous(locals, attrs, escape, rethrow) {\r\n  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    buf.push('\\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\\n</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n<a name=\"a5\"/>\r\n## Public API\r\n\r\n```js\r\nvar jade = require('jade');\r\n\r\n// Compile a function\r\nvar fn = jade.compile('string of jade', options);\r\nfn(locals);\r\n```\r\n\r\n### Options\r\n\r\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\r\n - `locals`    Local variable object\r\n - `filename`  Used in exceptions, and required when using includes\r\n - `debug`     Outputs tokens and function body generated\r\n - `compiler`  Compiler to replace jade's default\r\n - `compileDebug`  When `false` no debug instrumentation is compiled\r\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\r\n\r\n<a name=\"a6\"/>\r\n## Syntax\r\n\r\n<a name=\"a6-1\"/>\r\n### Line Endings\r\n\r\n**CRLF** and **CR** are converted to **LF** before parsing.\r\n\r\n<a name=\"a6-2\"/>\r\n### Tags\r\n\r\nA tag is simply a leading word:\r\n\r\n```jade\r\nhtml\r\n```\r\n\r\nfor example is converted to `<html></html>`\r\n\r\ntags can also have ids:\r\n\r\n```jade\r\ndiv#container\r\n```\r\n\r\nwhich would render `<div id=\"container\"></div>`\r\n\r\nhow about some classes?\r\n\r\n```jade\r\ndiv.user-details\r\n```\r\n\r\nrenders `<div class=\"user-details\"></div>`\r\n\r\nmultiple classes? _and_ an id? sure:\r\n\r\n```jade\r\ndiv#foo.bar.baz\r\n```\r\n\r\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\r\n\r\ndiv div div sure is annoying, how about:\r\n\r\n```jade\r\n#foo\r\n.bar\r\n```\r\n\r\nwhich is syntactic sugar for what we have already been doing, and outputs:\r\n\r\n```html\r\n<div id=\"foo\"></div><div class=\"bar\"></div>\r\n```\r\n\r\n<a name=\"a6-3\"/>\r\n### Tag Text\r\n\r\nSimply place some content after the tag:\r\n\r\n```jade\r\np wahoo!\r\n```\r\n\r\nrenders `<p>wahoo!</p>`.\r\n\r\nwell cool, but how about large bodies of text:\r\n\r\n```jade\r\np\r\n  | foo bar baz\r\n  | rawr rawr\r\n  | super cool\r\n  | go jade go\r\n```\r\n\r\nrenders `<p>foo bar baz rawr.....</p>`\r\n\r\ninterpolation? yup! both types of text can utilize interpolation,\r\nif we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:\r\n\r\n```jade\r\n#user #{name} &lt;#{email}&gt;\r\n```\r\n\r\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\r\n\r\nActually want `#{}` for some reason? escape it!\r\n\r\n```jade\r\np \\#{something}\r\n```\r\n\r\nnow we have `<p>#{something}</p>`\r\n\r\nWe can also utilize the unescaped variant `!{html}`, so the following\r\nwill result in a literal script tag:\r\n\r\n```jade\r\n- var html = \"<script></script>\"\r\n| !{html}\r\n```\r\n\r\nNested tags that also contain text can optionally use a text block:\r\n\r\n```jade\r\nlabel\r\n  | Username:\r\n  input(name='user[name]')\r\n```\r\n\r\nor immediate tag text:\r\n\r\n```jade\r\nlabel Username:\r\n  input(name='user[name]')\r\n```\r\n\r\nAs an alternative, we may use a trailing `.` to indicate a text block, for example:\r\n\r\n```jade\r\np.\r\n  foo asdf\r\n  asdf\r\n   asdfasdfaf\r\n   asdf\r\n  asd.\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<p>foo asdf\r\nasdf\r\n  asdfasdfaf\r\n  asdf\r\nasd.\r\n</p>\r\n```\r\n\r\nThis however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\r\n\r\n```jade\r\np .\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<p>.</p>\r\n```\r\n\r\nIt should be noted that text blocks should be doubled escaped.  For example if you desire the following output.\r\n\r\n```html\r\n<p>foo\\bar</p>\r\n```\r\n\r\nuse:\r\n\r\n```jade\r\np.\r\n  foo\\\\bar\r\n```\r\n\r\n<a name=\"a6-4\"/>\r\n### Comments\r\n\r\nSingle line comments currently look the same as JavaScript comments,\r\naka `//` and must be placed on their own line:\r\n\r\n```jade\r\n// just some paragraphs\r\np foo\r\np bar\r\n```\r\n\r\nwould output\r\n\r\n```html\r\n<!-- just some paragraphs -->\r\n<p>foo</p>\r\n<p>bar</p>\r\n```\r\n\r\nJade also supports unbuffered comments, by simply adding a hyphen:\r\n\r\n```jade\r\n//- will not output within markup\r\np foo\r\np bar\r\n```\r\n\r\noutputting\r\n\r\n```html\r\n<p>foo</p>\r\n<p>bar</p>\r\n```\r\n\r\n<a name=\"a6-5\"/>\r\n### Block Comments\r\n\r\n A block comment is legal as well:\r\n\r\n```jade\r\nbody\r\n  //\r\n    #content\r\n      h1 Example\r\n```\r\n\r\noutputting\r\n\r\n```html\r\n<body>\r\n  <!--\r\n  <div id=\"content\">\r\n    <h1>Example</h1>\r\n  </div>\r\n  -->\r\n</body>\r\n```\r\n\r\nJade supports conditional-comments as well, for example:\r\n\r\n```jade\r\nhead\r\n  //if lt IE 8\r\n    script(src='/ie-sucks.js')\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<head>\r\n  <!--[if lt IE 8]>\r\n    <script src=\"/ie-sucks.js\"></script>\r\n  <![endif]-->\r\n</head>\r\n```\r\n\r\n<a name=\"a6-6\"/>\r\n### Nesting\r\n\r\n Jade supports nesting to define the tags in a natural way:\r\n\r\n```jade\r\nul\r\n  li.first\r\n    a(href='#') foo\r\n  li\r\n    a(href='#') bar\r\n  li.last\r\n    a(href='#') baz\r\n```\r\n\r\n<a name=\"a6-7\"/>\r\n### Block Expansion\r\n\r\n Block expansion allows you to create terse single-line nested tags,\r\n the following example is equivalent to the nesting example above.\r\n\r\n```jade\r\nul\r\n  li.first: a(href='#') foo\r\n  li: a(href='#') bar\r\n  li.last: a(href='#') baz\r\n```\r\n\r\n<a name=\"a6-8\"/>\r\n### Case\r\n\r\n The case statement takes the following form:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    friends = 10\r\n    case friends\r\n      when 0\r\n        p you have no friends\r\n      when 1\r\n        p you have a friend\r\n      default\r\n        p you have #{friends} friends\r\n```\r\n\r\n Block expansion may also be used:\r\n\r\n```jade\r\nfriends = 5\r\n\r\nhtml\r\n  body\r\n    case friends\r\n      when 0: p you have no friends\r\n      when 1: p you have a friend\r\n      default: p you have #{friends} friends\r\n```\r\n\r\n<a name=\"a6-9\"/>\r\n### Attributes\r\n\r\nJade currently supports `(` and `)` as attribute delimiters.\r\n\r\n```jade\r\na(href='/login', title='View login page') Login\r\n```\r\n\r\nWhen a value is `undefined` or `null` the attribute is _not_ added,\r\nso this is fine, it will not compile `something=\"null\"`.\r\n\r\n```jade\r\ndiv(something=null)\r\n```\r\n\r\nBoolean attributes are also supported:\r\n\r\n```jade\r\ninput(type=\"checkbox\", checked)\r\n```\r\n\r\nBoolean attributes with code will only output the attribute when `true`:\r\n\r\n```jade\r\ninput(type=\"checkbox\", checked=someValue)\r\n```\r\n\r\nMultiple lines work too:\r\n\r\n```jade\r\ninput(type='checkbox',\r\n  name='agreement',\r\n  checked)\r\n```\r\n\r\nMultiple lines without the comma work fine:\r\n\r\n```jade\r\ninput(type='checkbox'\r\n  name='agreement'\r\n  checked)\r\n```\r\n\r\nFunky whitespace? fine:\r\n\r\n```jade\r\ninput(\r\n  type='checkbox'\r\n  name='agreement'\r\n  checked)\r\n```\r\n\r\nColons work:\r\n\r\n```jade\r\nrss(xmlns:atom=\"atom\")\r\n```\r\n\r\nSuppose we have the `user` local `{ id: 12, name: 'tobi' }`\r\nand we wish to create an anchor tag with `href` pointing to \"/user/12\"\r\nwe could use regular javascript concatenation:\r\n\r\n```jade\r\na(href='/user/' + user.id)= user.name\r\n```\r\n\r\nor we could use jade's interpolation, which I added because everyone\r\nusing Ruby or CoffeeScript seems to think this is legal js..:\r\n\r\n```jade\r\na(href='/user/#{user.id}')= user.name\r\n```\r\n\r\nThe `class` attribute is special-cased when an array is given,\r\nallowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:\r\n\r\n```jade\r\nbody(class=bodyClasses)\r\n```\r\n\r\n<a name=\"a6-10\"/>\r\n### HTML\r\n\r\n Inline html is fine, we can use the pipe syntax to\r\n write arbitrary text, in this case some html:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    | <h1>Title</h1>\r\n    | <p>foo bar baz</p>\r\n```\r\n\r\n Or we can use the trailing `.` to indicate to Jade that we\r\n only want text in this block, allowing us to omit the pipes:\r\n\r\n```jade\r\nhtml\r\n  body.\r\n    <h1>Title</h1>\r\n    <p>foo bar baz</p>\r\n```\r\n\r\n Both of these examples yield the same result:\r\n\r\n```html\r\n<html><body><h1>Title</h1>\r\n<p>foo bar baz</p>\r\n</body></html>\r\n```\r\n\r\n The same rule applies for anywhere you can have text\r\n in jade, raw html is fine:\r\n\r\n```jade\r\nhtml\r\n  body\r\n    h1 User <em>#{name}</em>\r\n```\r\n\r\n<a name=\"a6-11\"/>\r\n### Doctypes\r\n\r\nTo add a doctype simply use `!!!`, or `doctype` followed by an optional value:\r\n\r\n```jade\r\n!!!\r\n```\r\n\r\nor\r\n\r\n```jade\r\ndoctype\r\n```\r\n\r\nWill output the _html 5_  doctype, however:\r\n\r\n```jade\r\n!!! transitional\r\n```\r\n\r\nWill output the _transitional_ doctype.\r\n\r\nDoctypes are case-insensitive, so the following are equivalent:\r\n\r\n```jade\r\ndoctype Basic\r\ndoctype basic\r\n```\r\n\r\nit's also possible to simply pass a doctype literal:\r\n\r\n```jade\r\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"\r\n```\r\n\r\nyielding:\r\n\r\n```html\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\">\r\n```\r\n\r\nBelow are the doctypes defined by default, which can easily be extended:\r\n\r\n```js\r\nvar doctypes = exports.doctypes = {\r\n  '5': '<!DOCTYPE html>',\r\n  'default': '<!DOCTYPE html>',\r\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n  'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\r\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\r\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\r\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\r\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\r\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\r\n};\r\n```\r\n\r\nTo alter the default simply change:\r\n\r\n```js\r\njade.doctypes.default = 'whatever you want';\r\n```\r\n\r\n<a name=\"a7\"/>\r\n## Filters\r\n\r\nFilters are prefixed with `:`, for example `:markdown` and\r\npass the following block of text to an arbitrary function for processing. View the _features_\r\nat the top of this document for available filters.\r\n\r\n```jade\r\nbody\r\n  :markdown\r\n    Woah! jade _and_ markdown, very **cool**\r\n    we can even link to [stuff](http://google.com)\r\n```\r\n\r\nRenders:\r\n\r\n```html\r\n<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\r\n```\r\n\r\n<a name=\"a8\"/>\r\n## Code\r\n\r\nJade currently supports three classifications of executable code. The first\r\nis prefixed by `-`, and is not buffered:\r\n\r\n```jade\r\n- var foo = 'bar';\r\n```\r\n\r\nThis can be used for conditionals, or iteration:\r\n\r\n```jade\r\n- for (var key in obj)\r\n  p= obj[key]\r\n```\r\n\r\nDue to Jade's buffering techniques the following is valid as well:\r\n\r\n```jade\r\n- if (foo)\r\n  ul\r\n    li yay\r\n    li foo\r\n    li worked\r\n- else\r\n  p oh no! didnt work\r\n```\r\n\r\nHell, even verbose iteration:\r\n\r\n```jade\r\n- if (items.length)\r\n  ul\r\n    - items.forEach(function(item){\r\n      li= item\r\n    - })\r\n```\r\n\r\nAnything you want!\r\n\r\nNext up we have _escaped_ buffered code, which is used to\r\nbuffer a return value, which is prefixed by `=`:\r\n\r\n```jade\r\n- var foo = 'bar'\r\n= foo\r\nh1= foo\r\n```\r\n\r\nWhich outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped\r\nby default for security, however to output unescaped return values\r\nyou may use `!=`:\r\n\r\n```jade\r\np!= aVarContainingMoreHTML\r\n```\r\n\r\n Jade also has designer-friendly variants, making the literal JavaScript\r\n more expressive and declarative. For example the following assignments\r\n are equivalent, and the expression is still regular javascript:\r\n\r\n```jade\r\n- var foo = 'foo ' + 'bar'\r\nfoo = 'foo ' + 'bar'\r\n```\r\n\r\n  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:\r\n\r\n```jade\r\nif foo == 'bar'\r\n  ul\r\n    li yay\r\n    li foo\r\n    li worked\r\nelse\r\n  p oh no! didnt work\r\n```\r\n\r\n<a name=\"a9\"/>\r\n## Iteration\r\n\r\n Along with vanilla JavaScript Jade also supports a subset of\r\n constructs that allow you to create more designer-friendly templates,\r\n one of these constructs is `each`, taking the form:\r\n\r\n```jade\r\neach VAL[, KEY] in OBJ\r\n```\r\n\r\nAn example iterating over an array:\r\n\r\n```jade\r\n- var items = [\"one\", \"two\", \"three\"]\r\neach item in items\r\n  li= item\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<li>one</li>\r\n<li>two</li>\r\n<li>three</li>\r\n```\r\n\r\niterating an array with index:\r\n\r\n```jade\r\nitems = [\"one\", \"two\", \"three\"]\r\neach item, i in items\r\n  li #{item}: #{i}\r\n```\r\n\r\noutputs:\r\n\r\n```html\r\n<li>one: 0</li>\r\n<li>two: 1</li>\r\n<li>three: 2</li>\r\n```\r\n\r\niterating an object's keys and values:\r\n\r\n```jade\r\nobj = { foo: 'bar' }\r\neach val, key in obj\r\n  li #{key}: #{val}\r\n```\r\n\r\nwould output `<li>foo: bar</li>`\r\n\r\nInternally Jade converts these statements to regular\r\nJavaScript loops such as `users.forEach(function(user){`,\r\nso lexical scope and nesting applies as it would with regular\r\nJavaScript:\r\n\r\n```jade\r\neach user in users\r\n  each role in user.roles\r\n    li= role\r\n```\r\n\r\n You may also use `for` if you prefer:\r\n\r\n```jade\r\nfor user in users\r\n  for role in user.roles\r\n    li= role\r\n```\r\n\r\n<a name=\"a10\"/>\r\n## Conditionals\r\n\r\n Jade conditionals are equivalent to those using the code (`-`) prefix,\r\n however allow you to ditch parenthesis to become more designer friendly,\r\n however keep in mind the expression given is _regular_ JavaScript:\r\n\r\n```jade\r\nfor user in users\r\n  if user.role == 'admin'\r\n    p #{user.name} is an admin\r\n  else\r\n    p= user.name\r\n```\r\n\r\n is equivalent to the following using vanilla JavaScript literals:\r\n\r\n```jade\r\nfor user in users\r\n  - if (user.role == 'admin')\r\n    p #{user.name} is an admin\r\n  - else\r\n    p= user.name\r\n```\r\n\r\n  Jade also provides `unless` which is equivalent to `if (!(expr))`:\r\n\r\n```jade\r\nfor user in users\r\n  unless user.isAnonymous\r\n    p\r\n      | Click to view\r\n      a(href='/users/' + user.id)= user.name\r\n```\r\n\r\n<a name=\"a11\"/>\r\n## Template inheritance\r\n\r\n  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a \"block\" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.\r\n\r\n  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.\r\n\r\n```jade\r\nhtml\r\n  head\r\n    title My Site - #{title}\r\n    block scripts\r\n      script(src='/jquery.js')\r\n  body\r\n    block content\r\n    block foot\r\n      #footer\r\n        p some footer content\r\n```\r\n\r\n  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output \"some footer content\".\r\n\r\n```jade\r\nextends layout\r\n\r\nblock scripts\r\n  script(src='/jquery.js')\r\n  script(src='/pets.js')\r\n\r\nblock content\r\n  h1= title\r\n  each pet in pets\r\n    include pet\r\n```\r\n\r\n  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.\r\n\r\n```jade\r\nextends regular-layout\r\n\r\nblock content\r\n  .sidebar\r\n    block sidebar\r\n      p nothing\r\n  .primary\r\n    block primary\r\n      p nothing\r\n```\r\n\r\n<a name=\"a12\"/>\r\n## Block append / prepend\r\n\r\n Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a \"head\" block that you wish to utilize on _every_ page, you might do this:\r\n\r\n```jade\r\nhtml\r\n  head\r\n    block head\r\n      script(src='/vendor/jquery.js')\r\n      script(src='/vendor/caustic.js')\r\n  body\r\n    block content\r\n```\r\n\r\n Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:\r\n\r\n```jade\r\nextends layout\r\n\r\nblock append head\r\n  script(src='/vendor/three.js')\r\n  script(src='/game.js')\r\n```\r\n\r\n  When using `block append` or `block prepend` the `block` is optional:\r\n\r\n```jade\r\nextends layout\r\n\r\nappend head\r\n  script(src='/vendor/three.js')\r\n  script(src='/game.js')\r\n```\r\n\r\n<a name=\"a13\"/>\r\n## Includes\r\n\r\n Includes allow you to statically include chunks of Jade,\r\n or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:\r\n\r\n    ./layout.jade\r\n    ./includes/\r\n      ./head.jade\r\n      ./foot.jade\r\n\r\nand the following _layout.jade_:\r\n\r\n```jade\r\nhtml\r\n  include includes/head\r\n  body\r\n    h1 My Site\r\n    p Welcome to my super amazing site.\r\n    include includes/foot\r\n```\r\n\r\nboth includes _includes/head_ and _includes/foot_ are\r\nread relative to the `filename` option given to _layout.jade_,\r\nwhich should be an absolute path to this file, however Express\r\ndoes this for you. Include then parses these files, and injects\r\nthe AST produced to render what you would expect:\r\n\r\n```html\r\n<html>\r\n  <head>\r\n    <title>My Site</title>\r\n    <script src=\"/javascripts/jquery.js\">\r\n    </script><script src=\"/javascripts/app.js\"></script>\r\n  </head>\r\n  <body>\r\n    <h1>My Site</h1>\r\n    <p>Welcome to my super lame site.</p>\r\n    <div id=\"footer\">\r\n      <p>Copyright>(c) foobar</p>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nAs mentioned `include` can be used to include other content\r\nsuch as html or css. By providing an extension, Jade will\r\nread that file in, apply any [filter](#a7) matching the file's\r\nextension, and insert that content into the output.\r\n\r\n```jade\r\nhtml\r\n  head\r\n    //- css and js have simple filters that wrap them in\r\n        <style> and <script> tags, respectively\r\n    include stylesheet.css\r\n    include script.js\r\n  body\r\n    //- \"markdown\" files will use the \"markdown\" filter\r\n        to convert Markdown to HTML\r\n    include introduction.markdown\r\n    //- html files have no filter and are included verbatim\r\n    include content.html\r\n```\r\n\r\n  Include directives may also accept a block, in which case the\r\n  the given block will be appended to the _last_ block defined\r\n  in the file. For example if `head.jade` contains:\r\n\r\n```jade\r\nhead\r\n  script(src='/jquery.js')\r\n```\r\n\r\n We may append values by providing a block to `include head`\r\n as shown below, adding the two scripts.\r\n\r\n```jade\r\nhtml\r\n  include head\r\n    script(src='/foo.js')\r\n    script(src='/bar.js')\r\n  body\r\n    h1 test\r\n```\r\n\r\n You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:\r\n\r\n```jade\r\nhead\r\n  yield\r\n  script(src='/jquery.js')\r\n  script(src='/jquery.ui.js')\r\n```\r\n\r\n Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example suppose we have `user.jade` which utilizes a `user` variable.\r\n\r\n```jade\r\nh1= user.name\r\np= user.occupation\r\n```\r\n\r\nWe could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.\r\n\r\n```jade\r\nusers = [{ name: 'Tobi', occupation: 'Ferret' }]\r\n\r\neach user in users\r\n  .user\r\n    include user\r\n```\r\n\r\nyielding:\r\n\r\n```html\r\n<div class=\"user\">\r\n  <h1>Tobi</h1>\r\n  <p>Ferret</p>\r\n</div>\r\n```\r\n\r\nIf we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:\r\n\r\n```jade\r\neach person in users\r\n  .user\r\n    user = person\r\n    include user\r\n```\r\n\r\n<a name=\"a14\"/>\r\n## Mixins\r\n\r\n Mixins are converted to regular JavaScript functions in\r\n the compiled template that Jade constructs. Mixins may\r\n take arguments, though not required:\r\n\r\n```jade\r\nmixin list\r\n  ul\r\n    li foo\r\n    li bar\r\n    li baz\r\n```\r\n\r\n  Utilizing a mixin without args looks similar, just without a block:\r\n\r\n```jade\r\nh2 Groceries\r\nmixin list\r\n```\r\n\r\n  Mixins may take one or more arguments as well, the arguments\r\n  are regular javascripts expressions, so for example the following:\r\n\r\n```jade\r\nmixin pets(pets)\r\n  ul.pets\r\n    - each pet in pets\r\n      li= pet\r\n\r\nmixin profile(user)\r\n  .user\r\n    h2= user.name\r\n    mixin pets(user.pets)\r\n```\r\n\r\n   Would yield something similar to the following html:\r\n\r\n```html\r\n<div class=\"user\">\r\n  <h2>tj</h2>\r\n  <ul class=\"pets\">\r\n    <li>tobi</li>\r\n    <li>loki</li>\r\n    <li>jane</li>\r\n    <li>manny</li>\r\n  </ul>\r\n</div>\r\n```\r\n\r\n<a name=\"a15\"/>\r\n## Generated Output\r\n\r\n Suppose we have the following Jade:\r\n\r\n```jade\r\n- var title = 'yay'\r\nh1.title #{title}\r\np Just an example\r\n```\r\n\r\n When the `compileDebug` option is not explicitly `false`, Jade\r\n will compile the function instrumented with `__.lineno = n;`, which\r\n in the event of an exception is passed to `rethrow()` which constructs\r\n a useful message relative to the initial Jade input.\r\n\r\n```js\r\nfunction anonymous(locals) {\r\n  var __ = { lineno: 1, input: \"- var title = 'yay'\\nh1.title #{title}\\np Just an example\", filename: \"testing/test.js\" };\r\n  var rethrow = jade.rethrow;\r\n  try {\r\n    var attrs = jade.attrs, escape = jade.escape;\r\n    var buf = [];\r\n    with (locals || {}) {\r\n      var interp;\r\n      __.lineno = 1;\r\n       var title = 'yay'\r\n      __.lineno = 2;\r\n      buf.push('<h1');\r\n      buf.push(attrs({ \"class\": ('title') }));\r\n      buf.push('>');\r\n      buf.push('' + escape((interp = title) == null ? '' : interp) + '');\r\n      buf.push('</h1>');\r\n      __.lineno = 3;\r\n      buf.push('<p>');\r\n      buf.push('Just an example');\r\n      buf.push('</p>');\r\n    }\r\n    return buf.join(\"\");\r\n  } catch (err) {\r\n    rethrow(err, __.input, __.filename, __.lineno);\r\n  }\r\n}\r\n```\r\n\r\nWhen the `compileDebug` option _is_ explicitly `false`, this instrumentation\r\nis stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you\r\nto toString() compiled templates and avoid running the entire Jade library on\r\nthe client, increasing performance, and decreasing the amount of JavaScript\r\nrequired.\r\n\r\n```js\r\nfunction anonymous(locals) {\r\n  var attrs = jade.attrs, escape = jade.escape;\r\n  var buf = [];\r\n  with (locals || {}) {\r\n    var interp;\r\n    var title = 'yay'\r\n    buf.push('<h1');\r\n    buf.push(attrs({ \"class\": ('title') }));\r\n    buf.push('>');\r\n    buf.push('' + escape((interp = title) == null ? '' : interp) + '');\r\n    buf.push('</h1>');\r\n    buf.push('<p>');\r\n    buf.push('Just an example');\r\n    buf.push('</p>');\r\n  }\r\n  return buf.join(\"\");\r\n}\r\n```\r\n\r\n<a name=\"a16\"/>\r\n## Example Makefile\r\n\r\n  Below is an example Makefile used to compile _pages/*.jade_\r\n  into _pages/*.html_ files by simply executing `make`.\r\n\r\n_Note:_ If you try to run this snippet and `make` throws a `missing separator` error, you should make sure all indented lines use a tab for indentation instead of spaces. (For whatever reason, GitHub renders this code snippet with 4-space indentation although the actual README file uses tabs in this snippet.)\r\n\r\n```make\r\nJADE = $(shell find . -wholename './pages/*.jade')\r\nHTML = $(JADE:.jade=.html)\r\n\r\nall: $(HTML)\r\n\r\n%.html: %.jade\r\n\tjade < $< --path $< > $@\r\n\r\nclean:\r\n\trm -f $(HTML)\r\n\r\n.PHONY: clean\r\n```\r\n\r\nthis can be combined with the `watch(1)` command to produce\r\na watcher-like behaviour:\r\n\r\n```bash\r\n$ watch make\r\n```\r\n\r\nor you use the watch option below:\r\n\r\n<a name=\"a17\"/>\r\n## jade(1)\r\n\r\n```\r\n\r\nUsage: jade [options] [dir|file ...]\r\n\r\nOptions:\r\n\r\n  -h, --help         output usage information\r\n  -V, --version      output the version number\r\n  -o, --out <dir>    output the compiled html to <dir>\r\n  -O, --obj <str>    javascript options object\r\n  -p, --path <path>  filename used to resolve includes\r\n  -P, --pretty       compile pretty html output\r\n  -c, --client       compile function for client-side runtime.js\r\n  -D, --no-debug     compile without debugging (smaller functions)\r\n  -w, --watch        watch files for changes and automatically re-render\r\n\r\nExamples:\r\n\r\n  # translate jade the templates dir\r\n  $ jade templates\r\n\r\n  # create {foo,bar}.html\r\n  $ jade {foo,bar}.jade\r\n\r\n  # jade over stdio\r\n  $ jade < my.jade > my.html\r\n\r\n  # jade over stdio\r\n  $ echo \"h1 Jade!\" | jade\r\n\r\n  # foo, bar dirs rendering to /tmp\r\n  $ jade foo bar --out /tmp \r\n\r\n```\r\n\r\n*Notice: since `v0.31.0`, `-o` is preferred for `--out` where we used `-O` before.*\r\n\r\n<a name=\"a18\"/>\r\n## Tutorials\r\n\r\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\r\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\r\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\r\n\r\n<a name=\"a19\"/>\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","readmeFilename":"Readme.md","_id":"jade@0.33.0","dist":{"shasum":"1b0bb45f9dd4ce57723605177713d80bccd4e429","tarball":"http://registry.npmjs.org/jade/-/jade-0.33.0.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"0.34.0":{"name":"jade","description":"Jade template engine","version":"0.34.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"1.3.2","mkdirp":"0.3.x","transformers":"2.1.0","character-parser":"1.0.2","monocle":"0.1.50","with":"~1.1.0","constantinople":"~1.0.1"},"devDependencies":{"coffee-script":"*","mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*","browserify":"*","linify":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"test":"mocha -R spec","prepublish":"npm prune && linify transform bin && npm run build","build":"npm run compile","compile":"npm run compile-full && npm run compile-runtime","compile-full":"browserify ./lib/jade.js --standalone jade -x ./node_modules/transformers > jade.js","compile-runtime":"browserify ./lib/runtime.js --standalone jade > runtime.js"},"browser":{"./lib/filters.js":"./lib/filters-client.js"},"readme":"# [![Jade - template engine ](http://i.imgur.com/5zf2aVt.png)](http://jade-lang.com/)\r\n\r\nFull documentation is at [jade-lang.com](http://jade-lang.com/)\r\n\r\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\r\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\r\n\r\n You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\r\n\r\n [![Build Status](https://travis-ci.org/visionmedia/jade.png?branch=master)](https://travis-ci.org/visionmedia/jade)\r\n [![Dependency Status](https://gemnasium.com/visionmedia/jade.png)](https://gemnasium.com/visionmedia/jade)\r\n [![NPM version](https://badge.fury.io/js/jade.png)](http://badge.fury.io/js/jade)\r\n\r\n## Announcements\r\n\r\n**Deprecation of implicit script/style text-only:**\r\n\r\n Jade version 0.31.0 deprecated implicit text only support for scripts and styles.  To fix this all you need to do is add a `.` character after the script or style tag.\r\n\r\n It is hoped that this change will make Jade easier for newcomers to learn without affecting the power of the language or leading to excessive verboseness.\r\n\r\n If you have a lot of Jade files that need fixing you can use [fix-jade](https://github.com/ForbesLindesay/fix-jade) to attempt to automate the process.\r\n\r\n**Command line option change:**\r\n\r\nsince `v0.31.0`, `-o` is preferred for `--out` where we used `-O` before.\r\n\r\n## Installation\r\n\r\nvia npm:\r\n\r\n```bash\r\n$ npm install jade\r\n```\r\n\r\n## Syntax\r\n\r\nJade is a clean, whitespace sensitive syntax for writing html.  Here is a simple example:\r\n\r\n```jade\r\ndoctype 5\r\nhtml(lang=\"en\")\r\n  head\r\n    title= pageTitle\r\n    script(type='text/javascript').\r\n      if (foo) bar(1 + 5)\r\n  body\r\n    h1 Jade - node template engine\r\n    #container.col\r\n      if youAreUsingJade\r\n        p You are amazing\r\n      else\r\n        p Get on it!\r\n      p.\r\n        Jade is a terse and simple templating language with a\r\n        strong focus on performance and powerful features.\r\n```\r\n\r\nbecomes\r\n\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <title>Jade</title>\r\n    <script type=\"text/javascript\">\r\n      if (foo) bar(1 + 5)\r\n    </script>\r\n  </head>\r\n  <body>\r\n    <h1>Jade - node template engine</h1>\r\n    <div id=\"container\" class=\"col\">\r\n      <p>You are amazing</p>\r\n      <p>Jade is a terse and simple templating language with a strong focus on performance and powerful features.</p>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThe official [jade tutorial](http://jade-lang.com/tutorial/) is a great place to start.  While that (and the syntax documentation) is being finished, you can view some of the old documentation [here](https://github.com/visionmedia/jade/blob/master/jade.md) and [here](https://github.com/visionmedia/jade/blob/master/jade-language.md)\r\n\r\n## API\r\n\r\nFor full API, see [jade-lang.com/api](http://jade-lang.com/api/)\r\n\r\n```js\r\nvar jade = require('jade');\r\n\r\n// compile\r\nvar fn = jade.compile('string of jade', options);\r\nvar html = fn(locals);\r\n\r\n// render\r\nvar html = jade.render('string of jade', merge(options, locals));\r\n\r\n// renderFile\r\nvar html = jade.renderFile('filename.jade', merge(options, locals));\r\n```\r\n\r\n### Options\r\n\r\n - `filename`  Used in exceptions, and required when using includes\r\n - `compileDebug`  When `false` no debug instrumentation is compiled\r\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\r\n\r\n## Browser Support\r\n\r\n The latest version of jade can be download for the browser in standalone form from [here](https://github.com/visionmedia/jade/raw/master/jade.js).  It only supports the very latest browsers though, and is a large file.  It is recommended that you pre-compile your jade templates to JavaScript and then just use the [runtime.js](https://github.com/visionmedia/jade/raw/master/runtime.js) library on the client.\r\n\r\n To compile a template for use on the client using the command line, do:\r\n\r\n```console\r\n$ jade --client --no-debug filename.jade\r\n```\r\n\r\nwhich will produce `filename.js` containing the compiled template.\r\n\r\n## Command Line\r\n\r\nAfter installing the latest version of [node](http://nodejs.org/), install with:\r\n\r\n```console\r\n$ npm install jade -g\r\n```\r\n\r\nand run with\r\n\r\n```console\r\n$ jade --help\r\n```\r\n\r\n## Additional Resources\r\n\r\nTutorials:\r\n\r\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\r\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\r\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\r\n\r\n\r\nImplementations in other languages:\r\n\r\n  - [php](http://github.com/everzet/jade.php)\r\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\r\n  - [ruby](https://github.com/slim-template/slim)\r\n  - [python](https://github.com/SyrusAkbary/pyjade)\r\n  - [java](https://github.com/neuland/jade4j)\r\n\r\nOther:\r\n\r\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\r\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\r\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\r\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\r\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\r\n  - [html2jade](https://github.com/donpark/html2jade) converter\r\n\r\n## License\r\n\r\nMIT\r\n","readmeFilename":"Readme.md","_id":"jade@0.34.0","dist":{"shasum":"29ad06f4ef9b748cbf38b37334248445342a9b7f","tarball":"http://registry.npmjs.org/jade/-/jade-0.34.0.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"0.34.1":{"name":"jade","description":"Jade template engine","version":"0.34.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"1.3.2","mkdirp":"0.3.x","transformers":"2.1.0","character-parser":"1.0.2","monocle":"0.1.50","with":"~1.1.0","constantinople":"~1.0.1"},"devDependencies":{"coffee-script":"*","mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*","browserify":"*","linify":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"test":"mocha -R spec","prepublish":"npm prune && linify transform bin && npm run build","build":"npm run compile","compile":"npm run compile-full && npm run compile-runtime","compile-full":"browserify ./lib/jade.js --standalone jade -x ./node_modules/transformers > jade.js","compile-runtime":"browserify ./lib/runtime.js --standalone jade > runtime.js"},"browser":{"./lib/filters.js":"./lib/filters-client.js"},"readme":"# [![Jade - template engine ](http://i.imgur.com/5zf2aVt.png)](http://jade-lang.com/)\r\n\r\nFull documentation is at [jade-lang.com](http://jade-lang.com/)\r\n\r\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\r\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\r\n\r\n You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\r\n\r\n [![Build Status](https://travis-ci.org/visionmedia/jade.png?branch=master)](https://travis-ci.org/visionmedia/jade)\r\n [![Dependency Status](https://gemnasium.com/visionmedia/jade.png)](https://gemnasium.com/visionmedia/jade)\r\n [![NPM version](https://badge.fury.io/js/jade.png)](http://badge.fury.io/js/jade)\r\n\r\n## Announcements\r\n\r\n**Deprecation of implicit script/style text-only:**\r\n\r\n Jade version 0.31.0 deprecated implicit text only support for scripts and styles.  To fix this all you need to do is add a `.` character after the script or style tag.\r\n\r\n It is hoped that this change will make Jade easier for newcomers to learn without affecting the power of the language or leading to excessive verboseness.\r\n\r\n If you have a lot of Jade files that need fixing you can use [fix-jade](https://github.com/ForbesLindesay/fix-jade) to attempt to automate the process.\r\n\r\n**Command line option change:**\r\n\r\nsince `v0.31.0`, `-o` is preferred for `--out` where we used `-O` before.\r\n\r\n## Installation\r\n\r\nvia npm:\r\n\r\n```bash\r\n$ npm install jade\r\n```\r\n\r\n## Syntax\r\n\r\nJade is a clean, whitespace sensitive syntax for writing html.  Here is a simple example:\r\n\r\n```jade\r\ndoctype 5\r\nhtml(lang=\"en\")\r\n  head\r\n    title= pageTitle\r\n    script(type='text/javascript').\r\n      if (foo) bar(1 + 5)\r\n  body\r\n    h1 Jade - node template engine\r\n    #container.col\r\n      if youAreUsingJade\r\n        p You are amazing\r\n      else\r\n        p Get on it!\r\n      p.\r\n        Jade is a terse and simple templating language with a\r\n        strong focus on performance and powerful features.\r\n```\r\n\r\nbecomes\r\n\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <title>Jade</title>\r\n    <script type=\"text/javascript\">\r\n      if (foo) bar(1 + 5)\r\n    </script>\r\n  </head>\r\n  <body>\r\n    <h1>Jade - node template engine</h1>\r\n    <div id=\"container\" class=\"col\">\r\n      <p>You are amazing</p>\r\n      <p>Jade is a terse and simple templating language with a strong focus on performance and powerful features.</p>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThe official [jade tutorial](http://jade-lang.com/tutorial/) is a great place to start.  While that (and the syntax documentation) is being finished, you can view some of the old documentation [here](https://github.com/visionmedia/jade/blob/master/jade.md) and [here](https://github.com/visionmedia/jade/blob/master/jade-language.md)\r\n\r\n## API\r\n\r\nFor full API, see [jade-lang.com/api](http://jade-lang.com/api/)\r\n\r\n```js\r\nvar jade = require('jade');\r\n\r\n// compile\r\nvar fn = jade.compile('string of jade', options);\r\nvar html = fn(locals);\r\n\r\n// render\r\nvar html = jade.render('string of jade', merge(options, locals));\r\n\r\n// renderFile\r\nvar html = jade.renderFile('filename.jade', merge(options, locals));\r\n```\r\n\r\n### Options\r\n\r\n - `filename`  Used in exceptions, and required when using includes\r\n - `compileDebug`  When `false` no debug instrumentation is compiled\r\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\r\n\r\n## Browser Support\r\n\r\n The latest version of jade can be download for the browser in standalone form from [here](https://github.com/visionmedia/jade/raw/master/jade.js).  It only supports the very latest browsers though, and is a large file.  It is recommended that you pre-compile your jade templates to JavaScript and then just use the [runtime.js](https://github.com/visionmedia/jade/raw/master/runtime.js) library on the client.\r\n\r\n To compile a template for use on the client using the command line, do:\r\n\r\n```console\r\n$ jade --client --no-debug filename.jade\r\n```\r\n\r\nwhich will produce `filename.js` containing the compiled template.\r\n\r\n## Command Line\r\n\r\nAfter installing the latest version of [node](http://nodejs.org/), install with:\r\n\r\n```console\r\n$ npm install jade -g\r\n```\r\n\r\nand run with\r\n\r\n```console\r\n$ jade --help\r\n```\r\n\r\n## Additional Resources\r\n\r\nTutorials:\r\n\r\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\r\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\r\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\r\n\r\n\r\nImplementations in other languages:\r\n\r\n  - [php](http://github.com/everzet/jade.php)\r\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\r\n  - [ruby](https://github.com/slim-template/slim)\r\n  - [python](https://github.com/SyrusAkbary/pyjade)\r\n  - [java](https://github.com/neuland/jade4j)\r\n\r\nOther:\r\n\r\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\r\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\r\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\r\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\r\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\r\n  - [html2jade](https://github.com/donpark/html2jade) converter\r\n\r\n## License\r\n\r\nMIT\r\n","readmeFilename":"Readme.md","_id":"jade@0.34.1","dist":{"shasum":"6cb1f0928adfe9be7323d0b57e507e5c3c70f650","tarball":"http://registry.npmjs.org/jade/-/jade-0.34.1.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}},"0.35.0":{"name":"jade","description":"Jade template engine","version":"0.35.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"main":"./index.js","bin":{"jade":"./bin/jade"},"man":["./jade.1"],"dependencies":{"commander":"2.0.0","mkdirp":"0.3.x","transformers":"2.1.0","character-parser":"1.2.0","monocle":"1.1.50","with":"~1.1.0","constantinople":"~1.0.1"},"devDependencies":{"coffee-script":"*","mocha":"*","markdown":"*","stylus":"*","uubench":"*","should":"*","less":"*","uglify-js":"*","browserify":"*","linify":"*"},"component":{"scripts":{"jade":"runtime.js"}},"scripts":{"test":"mocha -R spec","prepublish":"npm prune && linify transform bin && npm run build","build":"npm run compile","compile":"npm run compile-full && npm run compile-runtime","compile-full":"browserify ./lib/jade.js --standalone jade -x ./node_modules/transformers > jade.js","compile-runtime":"browserify ./lib/runtime.js --standalone jade > runtime.js"},"browser":{"./lib/filters.js":"./lib/filters-client.js"},"readme":"# [![Jade - template engine ](http://i.imgur.com/5zf2aVt.png)](http://jade-lang.com/)\r\n\r\nFull documentation is at [jade-lang.com](http://jade-lang.com/)\r\n\r\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\r\n and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).\r\n\r\n You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).\r\n\r\n [![Build Status](https://travis-ci.org/visionmedia/jade.png?branch=master)](https://travis-ci.org/visionmedia/jade)\r\n [![Dependency Status](https://gemnasium.com/visionmedia/jade.png)](https://gemnasium.com/visionmedia/jade)\r\n [![NPM version](https://badge.fury.io/js/jade.png)](http://badge.fury.io/js/jade)\r\n\r\n## Announcements\r\n\r\n**Deprecation of implicit script/style text-only:**\r\n\r\n Jade version 0.31.0 deprecated implicit text only support for scripts and styles.  To fix this all you need to do is add a `.` character after the script or style tag.\r\n\r\n It is hoped that this change will make Jade easier for newcomers to learn without affecting the power of the language or leading to excessive verboseness.\r\n\r\n If you have a lot of Jade files that need fixing you can use [fix-jade](https://github.com/ForbesLindesay/fix-jade) to attempt to automate the process.\r\n\r\n**Command line option change:**\r\n\r\nsince `v0.31.0`, `-o` is preferred for `--out` where we used `-O` before.\r\n\r\n## Installation\r\n\r\nvia npm:\r\n\r\n```bash\r\n$ npm install jade\r\n```\r\n\r\n## Syntax\r\n\r\nJade is a clean, whitespace sensitive syntax for writing html.  Here is a simple example:\r\n\r\n```jade\r\ndoctype 5\r\nhtml(lang=\"en\")\r\n  head\r\n    title= pageTitle\r\n    script(type='text/javascript').\r\n      if (foo) bar(1 + 5)\r\n  body\r\n    h1 Jade - node template engine\r\n    #container.col\r\n      if youAreUsingJade\r\n        p You are amazing\r\n      else\r\n        p Get on it!\r\n      p.\r\n        Jade is a terse and simple templating language with a\r\n        strong focus on performance and powerful features.\r\n```\r\n\r\nbecomes\r\n\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <title>Jade</title>\r\n    <script type=\"text/javascript\">\r\n      if (foo) bar(1 + 5)\r\n    </script>\r\n  </head>\r\n  <body>\r\n    <h1>Jade - node template engine</h1>\r\n    <div id=\"container\" class=\"col\">\r\n      <p>You are amazing</p>\r\n      <p>Jade is a terse and simple templating language with a strong focus on performance and powerful features.</p>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThe official [jade tutorial](http://jade-lang.com/tutorial/) is a great place to start.  While that (and the syntax documentation) is being finished, you can view some of the old documentation [here](https://github.com/visionmedia/jade/blob/master/jade.md) and [here](https://github.com/visionmedia/jade/blob/master/jade-language.md)\r\n\r\n## API\r\n\r\nFor full API, see [jade-lang.com/api](http://jade-lang.com/api/)\r\n\r\n```js\r\nvar jade = require('jade');\r\n\r\n// compile\r\nvar fn = jade.compile('string of jade', options);\r\nvar html = fn(locals);\r\n\r\n// render\r\nvar html = jade.render('string of jade', merge(options, locals));\r\n\r\n// renderFile\r\nvar html = jade.renderFile('filename.jade', merge(options, locals));\r\n```\r\n\r\n### Options\r\n\r\n - `filename`  Used in exceptions, and required when using includes\r\n - `compileDebug`  When `false` no debug instrumentation is compiled\r\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\r\n\r\n## Browser Support\r\n\r\n The latest version of jade can be download for the browser in standalone form from [here](https://github.com/visionmedia/jade/raw/master/jade.js).  It only supports the very latest browsers though, and is a large file.  It is recommended that you pre-compile your jade templates to JavaScript and then just use the [runtime.js](https://github.com/visionmedia/jade/raw/master/runtime.js) library on the client.\r\n\r\n To compile a template for use on the client using the command line, do:\r\n\r\n```console\r\n$ jade --client --no-debug filename.jade\r\n```\r\n\r\nwhich will produce `filename.js` containing the compiled template.\r\n\r\n## Command Line\r\n\r\nAfter installing the latest version of [node](http://nodejs.org/), install with:\r\n\r\n```console\r\n$ npm install jade -g\r\n```\r\n\r\nand run with\r\n\r\n```console\r\n$ jade --help\r\n```\r\n\r\n## Additional Resources\r\n\r\nTutorials:\r\n\r\n  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)\r\n  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)\r\n  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)\r\n\r\n\r\nImplementations in other languages:\r\n\r\n  - [php](http://github.com/everzet/jade.php)\r\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\r\n  - [ruby](https://github.com/slim-template/slim)\r\n  - [python](https://github.com/SyrusAkbary/pyjade)\r\n  - [java](https://github.com/neuland/jade4j)\r\n\r\nOther:\r\n\r\n  - [Emacs Mode](https://github.com/brianc/jade-mode)\r\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\r\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\r\n  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)\r\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\r\n  - [html2jade](https://github.com/donpark/html2jade) converter\r\n\r\n## License\r\n\r\nMIT\r\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/visionmedia/jade/issues"},"_id":"jade@0.35.0","dist":{"shasum":"75ec1d966a1203733613e8c180e2aa8685c16da9","tarball":"http://registry.npmjs.org/jade/-/jade-0.35.0.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"directories":{}}},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"forbeslindesay","email":"forbes@lindesay.co.uk"}],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"time":{"0.0.1":"2010-12-19T22:37:03.716Z","0.0.2":"2010-12-19T22:37:03.716Z","0.1.0":"2010-12-19T22:37:03.716Z","0.2.0":"2010-12-19T22:37:03.716Z","0.2.1":"2010-12-19T22:37:03.716Z","0.2.2":"2010-12-19T22:37:03.716Z","0.2.3":"2010-12-19T22:37:03.716Z","0.2.4":"2010-12-19T22:37:03.716Z","0.3.0":"2010-12-19T22:37:03.716Z","0.4.0":"2010-12-19T22:37:03.716Z","0.4.1":"2010-12-19T22:37:03.716Z","0.5.0":"2010-12-19T22:37:03.716Z","0.5.1":"2010-12-19T22:37:03.716Z","0.5.2":"2010-12-19T22:37:03.716Z","0.5.3":"2010-12-19T22:37:03.716Z","0.5.4":"2010-12-19T22:37:03.716Z","0.5.5":"2010-12-19T22:37:03.716Z","0.5.6":"2010-12-19T22:37:03.716Z","0.5.7":"2010-12-19T22:37:03.716Z","0.6.0":"2010-12-19T22:37:03.716Z","0.6.1":"2010-12-28T12:59:03.712Z","0.6.3":"2011-02-02T17:41:37.230Z","0.7.0":"2011-03-05T01:49:13.872Z","0.7.1":"2011-03-05T02:00:11.570Z","0.8.0":"2011-03-05T02:33:15.139Z","0.8.1":"2011-03-05T02:46:53.386Z","0.8.2":"2011-03-07T16:37:26.514Z","0.8.3":"2011-03-07T17:06:03.665Z","0.8.4":"2011-03-08T17:01:21.022Z","0.8.5":"2011-03-09T17:46:09.287Z","0.8.6":"2011-03-12T00:03:31.591Z","0.8.7":"2011-03-14T22:43:03.916Z","0.8.8":"2011-03-14T22:50:01.256Z","0.8.9":"2011-03-15T19:30:47.303Z","0.9.0":"2011-03-16T16:18:20.967Z","0.9.1":"2011-03-16T17:22:49.418Z","0.9.2":"2011-03-23T17:39:00.658Z","0.9.3":"2011-03-24T19:45:08.584Z","0.10.0":"2011-03-25T16:22:58.395Z","0.10.1":"2011-03-28T20:35:37.906Z","0.10.2":"2011-03-30T18:23:26.075Z","0.10.3":"2011-03-30T22:30:42.549Z","0.10.4":"2011-04-05T09:49:47.670Z","0.10.5":"2011-04-26T15:22:25.976Z","0.10.6":"2011-04-29T15:46:27.441Z","0.10.7":"2011-05-04T17:40:51.455Z","0.11.0":"2011-05-14T18:53:07.746Z","0.11.1":"2011-06-01T17:05:28.737Z","0.12.0":"2011-06-03T20:23:57.555Z","0.12.1":"2011-06-04T18:28:36.138Z","0.12.2":"2011-06-16T17:41:40.421Z","0.12.3":"2011-06-21T18:55:34.290Z","0.12.4":"2011-06-23T20:40:33.517Z","0.13.0":"2011-07-13T23:03:50.378Z","0.14.0":"2011-08-11T15:16:59.109Z","0.14.1":"2011-08-14T17:58:16.244Z","0.14.2":"2011-08-16T16:15:11.359Z","0.15.0":"2011-08-26T18:32:58.076Z","0.15.1":"2011-08-26T20:55:06.558Z","0.15.2":"2011-08-26T21:50:56.217Z","0.15.3":"2011-08-30T16:04:44.783Z","0.15.4":"2011-09-05T18:15:33.479Z","0.16.0":"2011-09-26T18:32:12.395Z","0.16.1":"2011-09-30T00:42:48.512Z","0.16.2":"2011-09-30T16:48:46.788Z","0.16.3":"2011-10-24T15:59:43.902Z","0.16.4":"2011-10-24T23:15:28.457Z","0.17.0":"2011-11-10T21:54:15.185Z","0.18.0":"2011-11-24T16:22:55.301Z","0.19.0":"2011-12-02T23:20:33.882Z","0.20.0":"2011-12-28T21:05:20.967Z","0.20.1":"2012-02-02T21:17:51.718Z","0.20.2":"2012-02-16T20:04:11.085Z","0.20.3":"2012-02-16T21:46:00.061Z","0.21.0":"2012-03-10T20:31:25.557Z","0.22.0":"2012-03-22T15:57:59.211Z","0.22.1":"2012-04-04T15:27:32.531Z","0.23.0":"2012-04-11T19:27:25.225Z","0.24.0":"2012-04-12T14:32:53.092Z","0.25.0":"2012-04-18T22:40:01.162Z","0.26.0":"2012-05-04T21:10:17.459Z","0.26.1":"2012-05-27T19:18:47.744Z","0.26.2":"2012-06-22T15:28:07.608Z","0.26.3":"2012-06-25T16:41:15.480Z","0.27.0":"2012-07-26T16:01:07.561Z","0.27.1":"2012-08-06T21:32:31.718Z","0.27.2":"2012-08-07T15:49:15.527Z","0.27.3":"2012-09-18T18:27:18.779Z","0.27.4":"2012-09-18T22:02:05.786Z","0.27.5":"2012-09-24T18:59:55.603Z","0.27.6":"2012-10-05T21:31:05.933Z","0.27.7":"2012-11-06T01:52:47.616Z","0.28.0":"2013-01-09T01:07:37.720Z","0.28.1":"2013-01-10T20:46:42.205Z","0.28.2":"2013-03-04T17:50:31.585Z","0.29.0":"2013-04-16T19:52:48.424Z","0.30.0":"2013-04-25T19:13:31.491Z","0.31.0":"2013-05-30T19:06:17.427Z","0.31.1":"2013-05-31T16:19:05.393Z","0.31.2":"2013-06-07T21:12:19.654Z","0.32.0":"2013-06-28T16:39:14.033Z","0.33.0":"2013-07-12T01:12:49.209Z","0.34.0":"2013-07-26T02:27:05.575Z","0.34.1":"2013-07-26T03:38:28.103Z","0.35.0":"2013-08-21T13:41:53.652Z"},"repository":{"type":"git","url":"git://github.com/visionmedia/jade"},"users":{"coverslide":true,"vesln":true,"deedubs":true,"pid":true,"mikl":true,"broofa":true,"langpavel":true,"yazgazan":true,"nornalbion":true,"dolphin278":true,"sjonnet":true,"tellnes":true,"vincent":true,"coiscir":true,"fgribreau":true,"aaron":true,"sjonnet19":true,"gillesruppert":true,"jgoodall":true,"jswartwood":true,"drudge":true,"m42am":true,"fibo":true,"vincentmac":true,"ivanvotti":true,"chevex":true,"hortinstein":true,"evanlucas":true,"dbrockman":true,"ruzz311":true,"maxmaximov":true,"meryn":true,"sadjow":true,"devoidfury":true,"bigluck":true,"shanewholloway":true,"kennethkl":true,"inca":true,"victorquinn":true,"gableroux":true,"denisix":true,"paazmaya":true,"ioncreature":true,"sharpie":true,"pana":true},"_attachments":{"jade-0.35.0.tgz":{"content_type":"application/octet-stream","revpos":298,"digest":"md5-j3ExtZlwOBJ087K0utgypA==","length":144715,"stub":true},"jade-0.34.1.tgz":{"content_type":"application/octet-stream","revpos":296,"digest":"md5-scwrZO5En5VMqxMkT7J4GA==","length":89637,"stub":true},"jade-0.34.0.tgz":{"content_type":"application/octet-stream","revpos":294,"digest":"md5-rzkn5YcvB3rc6QPvEGTghA==","length":89661,"stub":true},"jade-0.33.0.tgz":{"content_type":"application/octet-stream","revpos":291,"digest":"md5-lu6h5U0TIy1gLVGCbusspA==","length":86640,"stub":true},"jade-0.32.0.tgz":{"content_type":"application/octet-stream","revpos":286,"digest":"md5-trwUYCA3rOsXyBgu7t+ZVQ==","length":86344,"stub":true},"jade-0.31.2.tgz":{"content_type":"application/octet-stream","revpos":285,"digest":"md5-8oV7cKotJ5lQwyiduxn78A==","length":86391,"stub":true},"jade-0.31.1.tgz":{"content_type":"application/octet-stream","revpos":282,"digest":"md5-yfjCa6WQbuu/WLRq50n1Og==","length":86376,"stub":true},"jade-0.31.0.tgz":{"content_type":"application/octet-stream","revpos":280,"digest":"md5-N/CZIu71bFrV5sIY/QnQUw==","length":86201,"stub":true},"jade-0.30.0.tgz":{"content_type":"application/octet-stream","revpos":274,"digest":"md5-wc0wqnpXC2T1ba8Tj/IE6g==","length":70289,"stub":true},"jade-0.29.0.tgz":{"content_type":"application/octet-stream","revpos":271,"digest":"md5-ig2mf2ZubrHIMq8+qNKX1g==","length":69689,"stub":true},"jade-0.28.2.tgz":{"content_type":"application/octet-stream","revpos":265,"digest":"md5-rBp+1WfWYMfKKDZ8yTu45g==","length":69503,"stub":true},"jade-0.28.1.tgz":{"content_type":"application/octet-stream","revpos":261,"digest":"md5-Lebc1/sdPxvrSOWcDgLTkA==","length":69299,"stub":true},"jade-0.28.0.tgz":{"content_type":"application/octet-stream","revpos":259,"digest":"md5-Ss+5PKE185aoEeBu6or8YQ==","length":69293,"stub":true},"jade-0.27.7.tgz":{"content_type":"application/octet-stream","revpos":253,"digest":"md5-06cYnj0VsgVii2aIWAti2g==","length":61222,"stub":true},"jade-0.27.6.tgz":{"content_type":"application/octet-stream","revpos":246,"digest":"md5-cE1AP6/nJdkicUj7lVCNsw==","length":62383,"stub":true},"jade-0.27.5.tgz":{"content_type":"application/octet-stream","revpos":243,"digest":"md5-JSp8rLJVZ5Jvszs840udRQ==","length":62340,"stub":true},"jade-0.27.4.tgz":{"content_type":"application/octet-stream","revpos":241,"digest":"md5-H6D08jBz+z8c3TfIa92wMA==","length":62319,"stub":true},"jade-0.27.3.tgz":{"content_type":"application/octet-stream","revpos":239,"digest":"md5-G3Tg42rSpXYK+/VM74p+dQ==","length":62291,"stub":true},"jade-0.27.2.tgz":{"content_type":"application/octet-stream","revpos":231,"digest":"md5-e4uHNxchwrFtBEXrw4dwOw==","length":52465,"stub":true},"jade-0.27.1.tgz":{"content_type":"application/octet-stream","revpos":229,"digest":"md5-ldzGEt9z1bxniWXfNHJYQQ==","length":52415,"stub":true},"jade-0.27.0.tgz":{"content_type":"application/octet-stream","revpos":218,"digest":"md5-N5UY7gZEetuAJcIUkNxpUQ==","length":52464,"stub":true},"jade-0.26.3.tgz":{"content_type":"application/octet-stream","revpos":215,"digest":"md5-GSxPvT+ZgnhnymH/jAKAlg==","length":52221,"stub":true},"jade-0.26.2.tgz":{"content_type":"application/octet-stream","revpos":208,"digest":"md5-J3UcE8CXK2z0P+6QfY8cyw==","length":52259,"stub":true},"jade-0.26.1.tgz":{"content_type":"application/octet-stream","revpos":206,"digest":"md5-WA9Y7b+L1l3X3qxkEMOW5w==","length":51960,"stub":true},"jade-0.26.0.tgz":{"content_type":"application/octet-stream","revpos":203,"digest":"md5-83ERwqR0bUQ2+EroSFawAQ==","length":48846,"stub":true},"jade-0.25.0.tgz":{"content_type":"application/octet-stream","revpos":201,"digest":"md5-qrMhGw+pUvFlE328Ks8+xg==","length":48418,"stub":true},"jade-0.24.0.tgz":{"content_type":"application/octet-stream","revpos":198,"digest":"md5-wId/wA/AWnFyo8rQzaxu1w==","length":45062,"stub":true},"jade-0.23.0.tgz":{"content_type":"application/octet-stream","revpos":192,"digest":"md5-YI7IR+cMh5DY924fVy5KSQ==","length":44982,"stub":true},"jade-0.22.1.tgz":{"content_type":"application/octet-stream","revpos":190,"digest":"md5-e3Wa819cUGI3TiC+rGytrw==","length":46986,"stub":true},"jade-0.22.0.tgz":{"content_type":"application/octet-stream","revpos":187,"digest":"md5-JCrZCQXo3au5ycCEjPHaNg==","length":46990,"stub":true},"jade-0.21.0.tgz":{"content_type":"application/octet-stream","revpos":185,"digest":"md5-ubdRu8p4kRcaQ/AZRubL0g==","length":71680,"stub":true},"jade-0.20.3.tgz":{"content_type":"application/octet-stream","revpos":183,"digest":"md5-gCvltgCx1NmEjNOls2nv1g==","length":40960,"stub":true},"jade-0.20.2.tgz":{"content_type":"application/octet-stream","revpos":181,"digest":"md5-9ye5h8dhaEvMbqBMXWsfrQ==","length":40960,"stub":true},"jade-0.20.1.tgz":{"content_type":"application/octet-stream","revpos":179,"digest":"md5-Fg/Aqa7FrYn//kZ8nKJv/A==","length":81920,"stub":true},"jade-0.20.0.tgz":{"content_type":"application/octet-stream","revpos":176,"digest":"md5-WApzNvIBdtSK1Il7Uhf4VA==","length":71680,"stub":true},"jade-0.19.0.tgz":{"content_type":"application/octet-stream","revpos":172,"digest":"md5-v8mivxDiCviU2OnwcmcgsA==","length":71680,"stub":true},"jade-0.18.0.tgz":{"content_type":"application/octet-stream","revpos":170,"digest":"md5-ueG4IuBD6YEESt1ymDhewA==","length":768000,"stub":true},"jade-0.17.0.tgz":{"content_type":"application/octet-stream","revpos":162,"digest":"md5-tV454LLDdU1hir/dJZKGvw==","length":768000,"stub":true},"jade-0.16.4.tgz":{"content_type":"application/octet-stream","revpos":159,"digest":"md5-hMBBfZUMAybPZH7baq6K4w==","length":766131,"stub":true},"jade-0.16.3.tgz":{"content_type":"application/octet-stream","revpos":153,"digest":"md5-IlQCNN0AoN4i9mNOkpBmaA==","length":766096,"stub":true},"jade-0.16.2.tgz":{"content_type":"application/octet-stream","revpos":150,"digest":"md5-3qyv3/dauOuhPsrrVXMg2g==","length":765045,"stub":true},"jade-0.16.1.tgz":{"content_type":"application/octet-stream","revpos":148,"digest":"md5-+GiUkLYU1NwyH6ekahPstw==","length":763867,"stub":true},"jade-0.16.0.tgz":{"content_type":"application/octet-stream","revpos":146,"digest":"md5-DZVl71FLoctJ8404cVNjOw==","length":765468,"stub":true},"jade-0.15.4.tgz":{"content_type":"application/octet-stream","revpos":144,"digest":"md5-vI895Cj/nkACdoeW9KrmzA==","length":761436,"stub":true},"jade-0.15.3.tgz":{"content_type":"application/octet-stream","revpos":142,"digest":"md5-2K7ZHnED7JugXikd+CwkvQ==","length":763638,"stub":true},"jade-0.15.2.tgz":{"content_type":"application/octet-stream","revpos":140,"digest":"md5-JNWY8BARxLVJ+actq2OzeQ==","length":759023,"stub":true},"jade-0.15.1.tgz":{"content_type":"application/octet-stream","revpos":138,"digest":"md5-hZ+QMa38rXm+JnC+DQR+CA==","length":760702,"stub":true},"jade-0.15.0.tgz":{"content_type":"application/octet-stream","revpos":136,"digest":"md5-WEluclfwPcQCv1SuXVMy6w==","length":759133,"stub":true},"jade-0.14.2.tgz":{"content_type":"application/octet-stream","revpos":131,"digest":"md5-RQUJ3MN695a481oJGo1xKg==","length":821490,"stub":true},"jade-0.14.1.tgz":{"content_type":"application/octet-stream","revpos":129,"digest":"md5-/6/rIFocL1qFEPpIbzvuLg==","length":820076,"stub":true},"jade-0.14.0.tgz":{"content_type":"application/octet-stream","revpos":127,"digest":"md5-cNLda1m1q/cXcLxxstUhpA==","length":820882,"stub":true},"jade-0.13.0.tgz":{"content_type":"application/octet-stream","revpos":125,"digest":"md5-VuBwlPh404aRuA9CM4gqSQ==","length":815619,"stub":true},"jade-0.12.4.tgz":{"content_type":"application/octet-stream","revpos":123,"digest":"md5-DOT7zcTXFjurulEHetyPJA==","length":813280,"stub":true},"jade-0.12.3.tgz":{"content_type":"application/octet-stream","revpos":121,"digest":"md5-QQcMZcBJJaxFXiRUq5+IDQ==","length":40773,"stub":true},"jade-0.12.2.tgz":{"content_type":"application/octet-stream","revpos":119,"digest":"md5-RjRBf03Y//ASO7Bd6aWvNA==","length":40702,"stub":true},"jade-0.12.1.tgz":{"content_type":"application/octet-stream","revpos":117,"digest":"md5-4Ojw8VNvpePViEKdzjA8uQ==","length":40963,"stub":true},"jade-0.12.0.tgz":{"content_type":"application/octet-stream","revpos":115,"digest":"md5-t/UoP97NmZN0h9Get6O4QQ==","length":40666,"stub":true},"jade-0.11.1.tgz":{"content_type":"application/octet-stream","revpos":113,"digest":"md5-wW57D7UEOVbKt7yawmFJFw==","length":40205,"stub":true},"jade-0.11.0.tgz":{"content_type":"application/octet-stream","revpos":111,"digest":"md5-KLUQvfkOvmf/YqVUnelvyg==","length":39938,"stub":true},"jade-0.10.7.tgz":{"content_type":"application/octet-stream","revpos":109,"digest":"md5-UmDBBFO0KA5Zdm6Qw+gDQA==","length":39332,"stub":true},"jade-0.10.6.tgz":{"content_type":"application/octet-stream","revpos":107,"digest":"md5-DZSwJSSM8+hAV481jhDMCQ==","length":39808,"stub":true},"jade-0.10.5.tgz":{"content_type":"application/octet-stream","revpos":101,"digest":"md5-i9jyBR3wepI4yNv1degAtQ==","length":39749,"stub":true},"jade-0.10.4.tgz":{"content_type":"application/octet-stream","revpos":99,"digest":"md5-EjaZuNsNtHhPhYQ0gviFvA==","length":39150,"stub":true},"jade-0.10.3.tgz":{"content_type":"application/octet-stream","revpos":97,"digest":"md5-sHYT727JsxHt+Okme4jXpQ==","length":39105,"stub":true},"jade-0.10.2.tgz":{"content_type":"application/octet-stream","revpos":95,"digest":"md5-tP0ixc6UC7u2/UL3v1VLuQ==","length":39039,"stub":true},"jade-0.10.1.tgz":{"content_type":"application/octet-stream","revpos":93,"digest":"md5-t9pnreIm1GBQQhuleeBDSA==","length":39029,"stub":true},"jade-0.10.0.tgz":{"content_type":"application/octet-stream","revpos":91,"digest":"md5-PTO/Nb3y/hOEWHhctvFMLw==","length":38774,"stub":true},"jade-0.9.3.tgz":{"content_type":"application/octet-stream","revpos":85,"digest":"md5-EJ7kIwq3DFEG/1QHq3cemg==","length":38049,"stub":true},"jade-0.9.2.tgz":{"content_type":"application/octet-stream","revpos":83,"digest":"md5-I207hqOSHAs9TJM/wLdzvQ==","length":32028,"stub":true},"jade-0.9.1.tgz":{"content_type":"application/octet-stream","revpos":81,"digest":"md5-JwP6gXIqw8AIieWLKJzKZA==","length":32044,"stub":true},"jade-0.9.0.tgz":{"content_type":"application/octet-stream","revpos":79,"digest":"md5-BMWrmn/1KYLqcVItLf9kkA==","length":32011,"stub":true},"jade-0.8.9.tgz":{"content_type":"application/octet-stream","revpos":77,"digest":"md5-M8oh5Dq6MwWaES+iVQ6RTg==","length":20904,"stub":true},"jade-0.8.8.tgz":{"content_type":"application/octet-stream","revpos":75,"digest":"md5-dIVxyv6IGKZGANU6ttmJBw==","length":20855,"stub":true},"jade-0.8.7.tgz":{"content_type":"application/octet-stream","revpos":73,"digest":"md5-CLhh2dCrwg4ecSArpM5VUg==","length":20851,"stub":true},"jade-0.8.6.tgz":{"content_type":"application/octet-stream","revpos":71,"digest":"md5-j4w96CRUwJiYBRppiGdCRA==","length":19417,"stub":true},"jade-0.8.5.tgz":{"content_type":"application/octet-stream","revpos":69,"digest":"md5-MIlQGmfKyPOITvl84cxjAQ==","length":19307,"stub":true},"jade-0.8.4.tgz":{"content_type":"application/octet-stream","revpos":67,"digest":"md5-WIEtl0F2D+xsASXuKr2OpQ==","length":19047,"stub":true},"jade-0.8.3.tgz":{"content_type":"application/octet-stream","revpos":65,"digest":"md5-E3GHAGtDmLu0VBboc0QSyg==","length":18984,"stub":true},"jade-0.8.2.tgz":{"content_type":"application/octet-stream","revpos":63,"digest":"md5-G4XgHA+fQgmU3Scbk1Y2OA==","length":19132,"stub":true},"jade-0.8.1.tgz":{"content_type":"application/octet-stream","revpos":61,"digest":"md5-5hN/UkiSHz0DvS96BR+2tQ==","length":18836,"stub":true},"jade-0.8.0.tgz":{"content_type":"application/octet-stream","revpos":59,"digest":"md5-MFaO0xe6acifjhDR617l4g==","length":18762,"stub":true},"jade-0.7.1.tgz":{"content_type":"application/octet-stream","revpos":57,"digest":"md5-YZ++aGYEfbC6HSc8Xge1Sg==","length":18692,"stub":true},"jade-0.7.0.tgz":{"content_type":"application/octet-stream","revpos":55,"digest":"md5-rt53srkw99e9dQDyZWss+A==","length":18651,"stub":true},"jade-0.6.3.tgz":{"content_type":"application/octet-stream","revpos":53,"digest":"md5-C8DMiyQxDKQYiTDEBhd8MA==","length":25599,"stub":true},"jade-0.6.1.tgz":{"content_type":"application/octet-stream","revpos":51,"digest":"md5-JL1arID6k06CwdTfx65CWw==","length":25521,"stub":true},"jade-0.6.0.tgz":{"content_type":"application/octet-stream","revpos":44,"digest":"md5-jgmVHGeOIsGzGPoAX0ww/Q==","length":25504,"stub":true},"jade-0.5.7.tgz":{"content_type":"application/octet-stream","revpos":42,"digest":"md5-GeAKWUtHt+gsXgn3ytXRsQ==","length":597805,"stub":true},"jade-0.5.6.tgz":{"content_type":"application/octet-stream","revpos":40,"digest":"md5-CzT2s7FzBxqc1DCsD8aNhg==","length":597793,"stub":true},"jade-0.5.5.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-oBclZlXzwKdDCTHjDASjkQ==","length":596892,"stub":true},"jade-0.5.4.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-VenCFnh+2b4dXru5d7wAbg==","length":257353,"stub":true},"jade-0.5.3.tgz":{"content_type":"application/octet-stream","revpos":31,"digest":"md5-3h2eEwfm9PeZPhgliY/LSA==","length":256495,"stub":true},"jade-0.5.2.tgz":{"content_type":"application/octet-stream","revpos":29,"digest":"md5-5E2NEPSZpKSELB579iJJXA==","length":255965,"stub":true},"jade-0.5.1.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-Ga0gAEvWlFCpUAPiQTgHRA==","length":255666,"stub":true},"jade-0.5.0.tgz":{"content_type":"application/octet-stream","revpos":25,"digest":"md5-qER/rtM4M/yB+rrSjLH78Q==","length":257995,"stub":true},"jade-0.4.1.tgz":{"content_type":"application/octet-stream","revpos":23,"digest":"md5-T0LjvMuy6PpvsKxn9EDZzg==","length":246717,"stub":true},"jade-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":21,"digest":"md5-iQxDIC87+3tpSUsyemuHxg==","length":246067,"stub":true},"jade-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-T1faNp3losf5bKxH5X/CHw==","length":184985,"stub":true},"jade-0.2.4.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-oGSi3S7PyY/iBkvQoonKrA==","length":171310,"stub":true},"jade-0.2.3.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-Puuv6zq6tnjAI6Vw3xqLiA==","length":135921,"stub":true},"jade-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-1RgM+f6/9RdOjkmH1ahDMg==","length":144169,"stub":true},"jade-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-oCSBcWobrbsXRizQE3YExw==","length":276768,"stub":true},"jade-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-JHi2Vs3pXxWFsGKxi9NO0Q==","length":169857,"stub":true},"jade-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-hHjG78cgegr9y6Ttlzc2mw==","length":26498,"stub":true},"jade-0.0.2.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-ODk5NNODZOUNihRAJY1Cyg==","length":25920,"stub":true},"jade-0.0.1.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-7zSmmxqRSdIBNsMvP+7r+Q==","length":53600,"stub":true}},"_etag":"\"MM1W8X1RTIAB7R2KA8XP9UPW\""}