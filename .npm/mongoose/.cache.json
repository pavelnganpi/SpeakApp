{"_id":"mongoose","_rev":"554-8cbd0ed683ff1501f383eae67e48fd7c","name":"mongoose","dist-tags":{"3.0":"3.5.7","2.x":"2.9.10","latest":"3.8.1","3.5.x":"3.5.16","unstable":"3.7.4"},"versions":{"0.0.1":{"name":"mongoose","version":"0.0.1","author":{"name":"LearnBoost"},"email":"dev@learnboost.com","licenses":[{"type":"The MIT License","url":"http://www.opensource.org/licenses/mit-license.php"}],"githubName":"mongoose","type":"tar","location":"http://github.com/LearnBoost/mongoose/tarball/master","main":"./mongoose","keywords":["mongoose","mongo","mongodb","orm","node"],"engines":["node"],"directories":{"lib":"./lib"},"_id":"mongoose@0.0.1","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/mongoose/-/mongoose-0.0.1.tgz","shasum":"8462f227f9e5121671a1ea156eeb254e1b846a41"}},"0.0.2":{"name":"mongoose","version":"0.0.2","author":{"name":"LearnBoost"},"email":"dev@learnboost.com","licenses":[{"type":"The MIT License","url":"http://www.opensource.org/licenses/mit-license.php"}],"githubName":"mongoose","type":"tar","location":"http://github.com/LearnBoost/mongoose/tarball/master","main":"./mongoose","keywords":["mongoose","mongo","mongodb","orm","node"],"engines":["node"],"directories":{"lib":"./lib"},"_id":"mongoose@0.0.2","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/mongoose/-/mongoose-0.0.2.tgz","shasum":"1b2cf66cff90ade9967a81b3a91e57939c587556"}},"0.0.3":{"name":"mongoose","description":"ORM for MongoDB","version":"0.0.3","author":{"name":"LearnBoost","email":"dev@learnboost.com"},"dependencies":{"mongodb":"0.7.9"},"keywords":["mongoose","mongo","mongodb","orm","nosql"],"directories":{"lib":"./lib"},"scripts":{"test":"make test"},"engines":{"node":">= 0.1.101"},"main":"./mongoose","licenses":[{"type":"The MIT License","url":"http://www.opensource.org/licenses/mit-license.php"}],"_id":"mongoose@0.0.3","_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/mongoose/-/mongoose-0.0.3.tgz","shasum":"b019fa2dbc77d91876739c331823cc9b8c777d8f"}},"0.0.4":{"name":"mongoose","description":"ORM for MongoDB","version":"0.0.4","author":{"name":"LearnBoost","email":"dev@learnboost.com"},"dependencies":{"mongodb":"0.7.9"},"keywords":["mongoose","mongo","mongodb","orm","nosql"],"directories":{"lib":"./lib"},"scripts":{"test":"make test"},"engines":{"node":">= 0.1.101"},"main":"./mongoose","licenses":[{"type":"The MIT License","url":"http://www.opensource.org/licenses/mit-license.php"}],"_id":"mongoose@0.0.4","_nodeSupported":true,"_npmVersion":"0.2.12-1","_nodeVersion":"v0.2.5","dist":{"shasum":"028ca31c0f293c3440565e79b1f92fd23ac54b28","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-0.0.4.tgz"}},"0.0.5":{"name":"mongoose","description":"ORM for MongoDB","version":"0.0.5","author":{"name":"LearnBoost","email":"dev@learnboost.com"},"dependencies":{"mongodb":"0.7.9"},"keywords":["mongoose","mongo","mongodb","orm","nosql"],"directories":{"lib":"./lib"},"scripts":{"test":"make test"},"engines":{"node":">= 0.1.101"},"main":"./mongoose","licenses":[{"type":"The MIT License","url":"http://www.opensource.org/licenses/mit-license.php"}],"_id":"mongoose@0.0.5","_engineSupported":true,"_npmVersion":"0.2.13-3","_nodeVersion":"v0.2.5","dist":{"shasum":"f3133bb6670c65767443d14e9a4e851b8132795c","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-0.0.5.tgz"}},"1.0.0":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.0","_engineSupported":true,"_npmVersion":"0.2.14-6","_nodeVersion":"v0.2.6","modules":{"collection.js":"lib/mongoose/collection.js","compat.js":"lib/mongoose/compat.js","connection.js":"lib/mongoose/connection.js","document.js":"lib/mongoose/document.js","error.js":"lib/mongoose/error.js","index.js":"lib/mongoose/index.js","model.js":"lib/mongoose/model.js","promise.js":"lib/mongoose/promise.js","query.js":"lib/mongoose/query.js","schema.js":"lib/mongoose/schema.js","schematype.js":"lib/mongoose/schematype.js","utils.js":"lib/mongoose/utils.js","virtualtype.js":"lib/mongoose/virtualtype.js","schema/array.js":"lib/mongoose/schema/array.js","schema/boolean.js":"lib/mongoose/schema/boolean.js","schema/date.js":"lib/mongoose/schema/date.js","schema/documentarray.js":"lib/mongoose/schema/documentarray.js","schema/index.js":"lib/mongoose/schema/index.js","schema/mixed.js":"lib/mongoose/schema/mixed.js","schema/number.js":"lib/mongoose/schema/number.js","schema/objectid.js":"lib/mongoose/schema/objectid.js","schema/string.js":"lib/mongoose/schema/string.js","types/array.js":"lib/mongoose/types/array.js","types/document.js":"lib/mongoose/types/document.js","types/documentarray.js":"lib/mongoose/types/documentarray.js","types/index.js":"lib/mongoose/types/index.js","types/number.js":"lib/mongoose/types/number.js","types/objectid.js":"lib/mongoose/types/objectid.js","drivers/node-mongodb-native/collection.js":"lib/mongoose/drivers/node-mongodb-native/collection.js","drivers/node-mongodb-native/connection.js":"lib/mongoose/drivers/node-mongodb-native/connection.js","drivers/node-mongodb-native/objectid.js":"lib/mongoose/drivers/node-mongodb-native/objectid.js"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"db880410fb75f98e2069e8d8ed3591f729fe26c6","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.0.tgz"}},"1.0.1":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.1","_engineSupported":true,"_npmVersion":"0.2.14-6","_nodeVersion":"v0.2.6","modules":{"compat.js":"lib/mongoose/compat.js","collection.js":"lib/mongoose/collection.js","connection.js":"lib/mongoose/connection.js","document.js":"lib/mongoose/document.js","error.js":"lib/mongoose/error.js","index.js":"lib/mongoose/index.js","model.js":"lib/mongoose/model.js","promise.js":"lib/mongoose/promise.js","query.js":"lib/mongoose/query.js","schema.js":"lib/mongoose/schema.js","schematype.js":"lib/mongoose/schematype.js","utils.js":"lib/mongoose/utils.js","virtualtype.js":"lib/mongoose/virtualtype.js","schema/array.js":"lib/mongoose/schema/array.js","schema/boolean.js":"lib/mongoose/schema/boolean.js","schema/date.js":"lib/mongoose/schema/date.js","schema/documentarray.js":"lib/mongoose/schema/documentarray.js","schema/index.js":"lib/mongoose/schema/index.js","schema/mixed.js":"lib/mongoose/schema/mixed.js","schema/number.js":"lib/mongoose/schema/number.js","schema/objectid.js":"lib/mongoose/schema/objectid.js","schema/string.js":"lib/mongoose/schema/string.js","types/array.js":"lib/mongoose/types/array.js","types/document.js":"lib/mongoose/types/document.js","types/documentarray.js":"lib/mongoose/types/documentarray.js","types/index.js":"lib/mongoose/types/index.js","types/number.js":"lib/mongoose/types/number.js","types/objectid.js":"lib/mongoose/types/objectid.js","drivers/node-mongodb-native/collection.js":"lib/mongoose/drivers/node-mongodb-native/collection.js","drivers/node-mongodb-native/connection.js":"lib/mongoose/drivers/node-mongodb-native/connection.js","drivers/node-mongodb-native/objectid.js":"lib/mongoose/drivers/node-mongodb-native/objectid.js"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"abd2a96a24fca89340a2129939a7b22c55564de1","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.1.tgz"}},"1.0.2":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.2","_engineSupported":true,"_npmVersion":"0.2.17","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"2e9c66cd88d75956f6ec984989425654160db7e3","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.2.tgz"}},"0.0.6":{"name":"mongoose","description":"ORM for MongoDB","version":"0.0.6","author":{"name":"LearnBoost","email":"dev@learnboost.com"},"dependencies":{"mongodb":"0.7.9"},"keywords":["mongoose","mongo","mongodb","orm","nosql"],"directories":{"lib":"./lib"},"scripts":{"test":"make test"},"engines":{"node":">= 0.1.101"},"main":"./mongoose","licenses":[{"type":"The MIT License","url":"http://www.opensource.org/licenses/mit-license.php"}],"_id":"mongoose@0.0.6","_engineSupported":true,"_npmVersion":"0.2.17","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"6cb67d8ca268120204b9e6d5182f152f4d5662de","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-0.0.6.tgz"}},"1.0.3":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.3","_engineSupported":true,"_npmVersion":"0.2.17","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"b0fe1f451d89964e69ce09f859541a7c1c8e99e2","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.3.tgz"}},"1.0.4":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.4","_engineSupported":true,"_npmVersion":"0.2.17","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"79cf6ad22f4c17574190ad2a4dcf4ebac9f8f86d","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.4.tgz"}},"1.0.5":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.5","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.5","_engineSupported":true,"_npmVersion":"0.2.17","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"661696541b97bc714d2d99dc8fd3239d83c84b30","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.5.tgz"}},"1.0.6":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.6","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.6","_engineSupported":true,"_npmVersion":"0.2.17","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"3ccf7097e101c49cf494694e4e9639b1d16b9cde","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.6.tgz"}},"1.0.7":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.7","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.7","_engineSupported":true,"_npmVersion":"0.2.17","_nodeVersion":"v0.3.8","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"b3573930a22066fbf3ab745a79329d5eae75b8ae","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.7.tgz"}},"1.0.8":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.8","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.8","_engineSupported":true,"_npmVersion":"0.2.17","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"9556abebbd57d9f01d0750fd0e8978a0a1ee9577","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.8.tgz"}},"1.0.10":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.10","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.10","_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"6a563623e6c5f3ed969964f1695d189e16b49497","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.10.tgz"}},"1.0.11":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.11","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.11","_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"33fa85eadf18d85bb08a02f15a3ac05a45a45aae","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.11.tgz"}},"1.0.12":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.12","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.12","_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"40c98744cb779d1c9da806a1714c1871d8bd0695","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.12.tgz"}},"1.0.13":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.13","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.13","_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"25a37b15ad5b2f21ae0e95ae1ee623e14e985eb8","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.13.tgz"}},"1.0.14":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.14","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.14","_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"ee4b707c4a3d073d00974a5a71fafc170bbb52b5","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.14.tgz"}},"1.0.15":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.15","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.15","_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.4.0","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"1afd9fdd818e760827d1f3357dcb2c875ad4b7aa","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.15.tgz"}},"1.0.16":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.0.16","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.0.16","_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.4.0","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"6ecacaf117d826ee091f187193a21c530bbcef9b","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.0.16.tgz"}},"1.1.0":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.0","_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"b107e76f818d33be18670a83a0b70a90080624eb","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.0.tgz"}},"1.1.1":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.1","_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.4.1","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"6c6e2a6f54da7403d7b5dfac7c0d4bf0d1a6a7e9","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.1.tgz"}},"1.1.2":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.2","_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.2.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"e257c009ee8d23cbbed2f16f6e4d4de6b73aaf4a","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.2.tgz"}},"1.1.3":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.3","_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.4.2","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"eacdfe89bde4408edeeb134c75d7dfc24d0841d2","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.3.tgz"}},"1.1.4":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.4","_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.4.2","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"cc7a24114f1d481a91b0fd7061fe6e257a972324","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.4.tgz"}},"1.1.5":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.5","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.5","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.2","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"e8537afbc910d3d99a651ad286734a4af4c9241f","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.5.tgz"}},"1.1.6":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.6","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.6","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"1dfd166e097ec48aea136bebdb2c01aa4745d8f0","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.6.tgz"}},"1.1.7":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.7","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.7","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"c91c9222b1f29573a868cb393d28d90ff7a58520","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.7.tgz"}},"1.1.8":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.8","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.8","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"05a73f125299fa06b28d46f20039f0b33d83148c","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.8.tgz"}},"1.1.9":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.9","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.9","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"83ce05a43c040e1fad87b21a70954f2139d22546","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.9.tgz"}},"1.1.10":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.10","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.10","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"56cdfe612783d06b9c1e572aba6dc268e8efe362","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.10.tgz"}},"1.1.11":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.11","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.11","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"4ec361814189ae16d07a31cf3c1b52c7e841cd3f","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.11.tgz"}},"1.1.12":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.12","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.12","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"b4162426fcf73dfb367ad1fa467f28d58cacbce0","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.12.tgz"}},"1.1.13":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.13","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.13","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"abed73067a58a4d52bc3210a9fd50c3490d04a8b","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.13.tgz"}},"1.1.14":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.14","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.14","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"b23ea5654609dbb86d9daf6b88b2ebb7c0896345","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.14.tgz"}},"1.1.15":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.15","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.15","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.3","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"0c8b5f993f22b0fb9b7104118f33271f6b5a89bb","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.15.tgz"}},"1.1.16":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.16","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.16","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.4","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"ca6bc79bc1a2b4ec8503a1e0d0d752f84411f8bb","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.16.tgz"}},"1.1.17":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.17","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.17","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.4","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"3e4350579b0bb7cb0fa4291e7d1bbd4cb3ec5747","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.17.tgz"}},"1.1.18":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.18","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.18","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.4","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"98390f899dae523c51cf33d75f96f0adeb9f743a","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.18.tgz"}},"1.1.19":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.19","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.19","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.4","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"dcf2a88e30b063ec72bc1785c271920762d75730","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.19.tgz"}},"1.1.20":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.20","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.20","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.4","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"a9fbbfc3ed8d82ba57a16d4f00cbb86b34cbfc33","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.20.tgz"}},"1.1.21":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.21","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.21","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.4","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"4a8a585c92c7d7b3e858aeedc7195a752c8c1eb7","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.21.tgz"}},"1.1.22":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.22","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.22","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.4","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"8434dfd92a7df5f65b476daa482bdc3f186e71eb","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.22.tgz"}},"1.1.23":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.23","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.23","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.3","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"6ea7f1fa0eefc1b15c64d1dd1fec7b557ae3d83f","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.23.tgz"}},"1.1.24":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.24","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.24","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.4","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"44f790b709c29768575d677c7c68fcd849328c64","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.24.tgz"}},"1.1.25":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.1.25","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.1.25","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.5","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"842bccf3232757a991f07b4c7ce6a4e67c7fea96","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.1.25.tgz"}},"1.2.0":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.2.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"_id":"mongoose@1.2.0","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.5","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"88e45e4b17d77bee210282b9d483421a3cf5a3dc","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.2.0.tgz"}},"1.3.0":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.3.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_id":"mongoose@1.3.0","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"437a6ace6414bd99feaad2d6212a393fd55bc9d1","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.3.0.tgz"}},"1.3.1":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.3.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_id":"mongoose@1.3.1","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"51361fa029e46b6175702d1d36e60f6cbbde5b66","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.3.1.tgz"}},"1.3.2":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.3.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_id":"mongoose@1.3.2","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"4e45c48f2be9a7043217e4c9bf46a6bb08463981","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.3.2.tgz"}},"1.3.3":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.3.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_id":"mongoose@1.3.3","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.6","files":[""],"_defaultsLoaded":true,"dist":{"shasum":"041ddd7c518b72d68820f597bed45413c3924caa","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.3.3.tgz"}},"1.3.4":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.3.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"devDependencies":{},"_id":"mongoose@1.3.4","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"e8bf561e68ba869e2036d5afd9e84c328345e849","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.3.4.tgz"}},"1.3.5":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.3.5","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"devDependencies":{},"_id":"mongoose@1.3.5","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"4db719e4da1330de9fd10f080b63ce6ec023feec","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.3.5.tgz"}},"1.3.6":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.3.6","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"devDependencies":{},"_id":"mongoose@1.3.6","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"702985e6b63fd714a34d1e3419f291c0e1f0094e","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.3.6.tgz"}},"1.3.7":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.3.7","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":">=0.1.5"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"devDependencies":{},"_id":"mongoose@1.3.7","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"4bb6a2f28a469e3c9ce2558ab1abfe5c5e8b574c","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.3.7.tgz"}},"1.4.0":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.4.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.7"},"devDependencies":{"should":">=0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_id":"mongoose@1.4.0","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"7ec1edd94215533ba23bd5821bfc937f35f61d47","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.4.0.tgz"}},"1.5.0":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.5.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_id":"mongoose@1.5.0","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"5f04c36f33e4f40c936a63cab29a709de0b0a7dc","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.5.0.tgz"}},"1.6.0":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.6.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_id":"mongoose@1.6.0","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"7fcdfda16b987e9b178a1039339c989bda633fd6","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.6.0.tgz"}},"1.7.2":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.7.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_id":"mongoose@1.7.2","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"5a75990fdececca2f4860e328ef7b1dd948c8086","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.7.2.tgz"}},"1.7.3":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.7.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_id":"mongoose@1.7.3","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"06363603800f47accd2afa8b671bc0d53f2b7396","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.7.3.tgz"}},"1.7.4":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.7.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_id":"mongoose@1.7.4","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"dist":{"shasum":"d74e0fdf5c71cde2918eabce446fe380b11c0188","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.7.4.tgz"}},"1.8.0":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.8.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_id":"mongoose@1.8.0","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"dist":{"shasum":"35f0cb7db450a615ad6925e7701c32e71393b6a0","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.8.0.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"1.8.1":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.8.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_id":"mongoose@1.8.1","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"dist":{"shasum":"2baac22187cd4a538b98d65a3da97ecc16d5fc8a","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.8.1.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"1.8.2":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.8.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/1.8.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@1.8.2","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"dist":{"shasum":"a2a4df31f0b4c36f5ab349770e3881494437d93c","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.8.2.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"1.8.3":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.8.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/1.8.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@1.8.3","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"3fd35018ae3f5e3d7afbd3e628b112adaa079928","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.8.3.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"1.8.4":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"1.8.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/1.8.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@1.8.4","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"fa7e08e7a3955fa67c4aa98b33cc0f94d1fefd6a","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-1.8.4.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.0.0":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.0.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.0.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.0.0","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"8d43b114ab561a5839ca4b2303a1545c8f57d85b","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.0.0.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.0.1":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.0.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.0.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.0.1","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"b9ef96057f8b210eced0f622d616f3c764592f5f","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.0.1.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.0.2":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.0.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.0.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.0.2","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"a7456ec8833dff09fc5efcad935157e041401970","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.0.2.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.0.3":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.0.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.0.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.0.3","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"c752376d468532532d7474f8684d500fb34a4fcb","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.0.3.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.0.4":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.0.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.0.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.0.4","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"99c13a8c67cefed85adc053b631349ccada93839","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.0.4.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.1.0":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.1.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.2.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.1.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.1.0","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"76e4ab11ad0c2f7094ab752351971977bad1afa1","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.1.0.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.1.1":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.1.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.1.0"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.1.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.1.1","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"c88ac0f6e53f30d59edd366db94b25ef36508c0e","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.1.1.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.1.2":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.1.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-7","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.1.0"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.1.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.1.2","_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"a68f00bcf92e112a78524a277ddd18aaad0e6457","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.1.2.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.1.3":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.1.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-15","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.1.0"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.1.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.1.3","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"b4247d73b11e4de7159f467f880ddbf89d82d30c","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.1.3.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.1.4":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.1.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-15","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.1.0"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.1.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.1.4","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"8e819da2e076b05ecf3bf1dfe3ee263011192805","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.1.4.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.2.0":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.2.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-15","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.1.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.2.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.2.0","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"8c20e1b233e1eb7e9683947306872ea4343f6255","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.2.0.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.2.1":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.2.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-18","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.1.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.2.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.2.1","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"2316dec7ce0c2edc723acdedc977b7366835e61e","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.2.1.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.2.2":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.2.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-18","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.1.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.2.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.2.2","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"fe30efaa31dd0485767a5f2b59609c7c6134602e","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.2.2.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.2.3":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.2.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-19","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.1.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.2.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.2.3","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"9a8073d2035f100a6483efec8c2004a3615158e1","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.2.3.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.2.4":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.2.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-19","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.1.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.2.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.2.4","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"5805920453b81ddbe11451d179cbe47371c37e4c","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.2.4.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.0":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.3.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-20","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.1.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.3.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.3.0","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"4ca0ceb3a49db9f0c8f32d9a9b84519bb3bbbd67","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.0.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.1":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.3.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-21","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.1.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.3.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.3.1","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"18e83b7ba154408abe10118cc33016e0a830d6d8","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.1.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.2":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.3.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-21","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.1.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.3.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.3.2","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"1d0c8ab236bad3db07c752b74a7ea64e7afef62f","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.2.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.3":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.3.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-21","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.2.0"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.3.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.3.3","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"d0618bcea5974871ac107bd46b241d08cfed8cc1","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.3.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.4":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.3.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-22","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.3.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.3.4","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"d00c8c2dd836c7e482bddba6126fb6ba18d71aec","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.4.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.5":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.3.5","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-22","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.3.5/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.3.5","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"7bc9828c1a47d637aed0450bb094f9241aa74b1e","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.5.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.6":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.3.6","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-22","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.3.6/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.3.6","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"a120f9deaf77c4e63613feed85971519b3564c7e","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.6.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.7":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.3.7","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-22","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmJsonOpts":{"file":"/home/aaron/.npm/mongoose/2.3.7/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"mongoose@2.3.7","_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"c39065d9ba558f5b70d2620f3b3eb1f27099d301","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.7.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.8":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.3.8","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-22","colors":"0.5.0"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.3.8","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"eadcdb3f81f344c27cba4aa64a68e3b8ddc5b8e0","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.8.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.9":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.3.9","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-23","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.3.9","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"93d1113381025780c2d057462bc20301c2b7c31f","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.9.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.10":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.3.10","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-23","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.3.10","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"c2b5c6478af0886b9d3058c11a25fb726b2e5f42","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.10.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.11":{"name":"mongoose","description":"Mongoose MongoDB ORM","version":"2.3.11","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-23","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.3.11","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"c623173461cac442ce4d36542211286e58bb83b1","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.11.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.12":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.3.12","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-23","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.3.12","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"96d2d5c17cde782092d9ec24ed34bdba69d9de5a","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.12.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.3.13":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.3.13","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.6-23","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.3.13","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"0fa979c393d46c7f3a99a7f51986d64bc785bfd7","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.3.13.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.4.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.4.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-1.3","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.4.0","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"b8dcc98f2c42f95831b1775f7546a81880fb81ab","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.4.0.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.4.1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.4.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-1.4","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.4.1","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"1b897837a0b0cb054ee4d9833b83bc2a60458bbb","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.4.1.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.4.2":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.4.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-1.4","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.4.2","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"2fba8dd1d063a6999edb05419d449cb2501f2cd5","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.4.2.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.4.3":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.4.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-1.4","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.4.3","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"8e973bba03ac2944731381a06d6cbf560b493410","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.4.3.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.4.4":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.4.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-1.4","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.4.4","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"7f595ecf0cf0119da3c8708760ab267fd9892efe","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.4.4.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.4.5":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.4.5","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-1.4","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.4.5","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"84898c85efb534a898dbf6050b72e7be26fd7350","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.4.5.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.4.6":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.4.6","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-1.4","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.4.6","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"d9fae51f76de5194265384edc9e88123d9ef1891","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.4.6.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.4.7":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.4.7","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-2-1","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.4.7","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"978a2028b60ccd2f24747bf8417146491ad3ae00","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.4.7.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.4.8":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.4.8","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-2-5","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.4.8","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"bcf677afe4118889b1937a2af21b5fd91162c90a","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.4.8.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.4.9":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.4.9","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-3-5","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.4.9","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"88e591ddcf738b3a177a05f1dcfa8216f6160c07","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.4.9.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.4.10":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.4.10","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-3-5","colors":"0.5.1"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.4.10","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"60fb108776ff260a60708c85f808fef26b825b27","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.4.10.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.8-3"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.0","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"dbf7ddf3fe2db8f1db19448409b552a3469c29ac","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.0.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.8-3"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.1","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"bcc182f664f0d7b78c5a5a14f716ac5dc267a122","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.1.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.2":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-3-5"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.2","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"58e3005ea762b9b92e933fe427eb2600fbdd4dca","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.2.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.3":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-3-5"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.3","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"3e9151f2b700f1f0404e23d45d357d47eb99358d","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.3.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.4":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-3-5"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.4","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"a86160980bccfbc47372a119088fc7b95ac78097","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.4.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.5":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.5","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-3-5"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.5","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"21f2142166110442c494943c87e80f6d6e54d42d","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.5.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.6":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.6","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-3-5"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.6","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"eb7976e89cbfff5993f9b17adeb05f3647fd832f","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.6.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.7":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.7","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-3-5"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.7","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"6efb38f1158c6152ea934418ced519bf3d511b32","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.7.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.8":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.8","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-3-5"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.8","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"2c94e7f8a7aab59e683f26dcb7bf0c193aec6b84","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.8.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.9":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.9","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql"],"dependencies":{"hooks":"0.1.9","mongodb":"0.9.7-3-5"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.9","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"cb475442ef49a37d8158eccd1821158d7bfb010d","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.9.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.10":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.10","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.0","mongodb":"0.9.9-4"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.10","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"58efa4f1ace0afa72b5b06a4fe9b309165615cde","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.10.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.11":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.11","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.0","mongodb":"0.9.9-5"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.11","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"edac44551fad7314162f930517b7df30861db9ae","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.11.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.12":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.12","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.0","mongodb":"0.9.9-7"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.12","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.9","_nodeVersion":"v0.6.13","_defaultsLoaded":true,"dist":{"shasum":"4128d852ac87300372144bfbbc11982c4ee36748","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.12.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.13":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.13","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.0","mongodb":"0.9.9-7"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.13","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.9","_nodeVersion":"v0.6.13","_defaultsLoaded":true,"dist":{"shasum":"357d5169cc93dc236edaf95619fe7fd6bc5eb373","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.13.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.5.14":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.5.14","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.0","mongodb":"0.9.9-7"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.5.14","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"f976f2e4a3733c36c625f1bc4ce5eee230a9a559","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.5.14.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.6.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.6.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"0.9.9-7"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.6.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"9f48623515baf1868e710feb313199928c8f9875","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.6.0.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.6.1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.6.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"0.9.9-7"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.6.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"7d50ccea0898622c090e69d00d1ea55b0c5ce699","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.6.1.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.6.2":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.6.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"0.9.9-7"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.6.2","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"76feea3f7174c5b609fb0a5cb9bfbe993b49c05c","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.6.2.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.6.3":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.6.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.0.0"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.6.3","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"47d53c3322ef94932ef223001aedbd59af59b599","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.6.3.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.6.4":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.6.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.0.2"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.6.4","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"e8ff8cb5fcb60c453874fbf08d0e344585626c7c","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.6.4.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.6.5":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.6.5","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.0.2"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.6.5","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"982fe3c89fc0a056512222ffa6f373b8b03608ee","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.6.5.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.6.6":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.6.6","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.0.2"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.6.6","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"958332c045ed0b1ab72d00ec7597521d5fb901ec","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.6.6.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.6.7":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.6.7","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.0.2"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.6.7","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"404bdaef9472f5c965e46ea3bee5596236297ffc","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.6.7.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.6.8":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.6.8","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.0.2"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.6.8","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"3670dd8bacc90bdac7bce7d4ef48e12333c6c828","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.6.8.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.7.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.7.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.0.2"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@2.7.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"d3cc3a6852b176eb1746946788411dd5447cbbf3","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.7.0.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.7.1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.7.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.0.2"},"devDependencies":{"mocha":"*"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.7.1","dist":{"shasum":"ecdb505f98623cf835dea3cbaca48b6f337a4bba","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.7.1.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.7.2":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.7.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.0.2"},"devDependencies":{"mocha":"*"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.7.2","dist":{"shasum":"8dd89ea42918d629cedf885d3802a5186f0182ce","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.7.2.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.7.4":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.7.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.0.2"},"devDependencies":{"mocha":"*"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.7.4","dist":{"shasum":"d2d96f6473a4964afb398f56b6587ef841fee6b3","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.7.4.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.7.3":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.7.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.2"},"devDependencies":{"mocha":"*"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.7.3","dist":{"shasum":"f230f0e5dfe70a184b0ee5cda34d611ba5cdc660","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.7.3.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.0.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.0.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.2","ms":"0.1.0"},"devDependencies":{"mocha":"*","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v3.x` branch is for v3 development, the `v2.x` branch is for v2 development, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Before starting to write code, look for existing [tickets](https://github.com/learnboost/mongoose/issues) or [create one](https://github.com/learnboost/mongoose/issues/new) for your specific issue. That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n- Write inline documentation for new methods or class members.\n- Write tests and make sure they pass.\n- Follow the general coding style of the rest of the project (comma first, etc).\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.0.0","dist":{"shasum":"b2a7d9e7430c0b9d5db5d3de195fe81bba33cf9e","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.0.0.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.0.1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.0.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.4","ms":"0.1.0"},"devDependencies":{"mocha":"*","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v3.x` branch is for v3 development, the `v2.x` branch is for v2 development, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Before starting to write code, look for existing [tickets](https://github.com/learnboost/mongoose/issues) or [create one](https://github.com/learnboost/mongoose/issues/new) for your specific issue. That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n- Write inline documentation for new methods or class members.\n- Write tests and make sure they pass.\n- Follow the general coding style of the rest of the project (comma first, etc).\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.0.1","dist":{"shasum":"54aa01d343f66c9329a83651b4c5cb8ec9436fdb","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.0.1.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.0.2":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.0.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.4","ms":"0.1.0"},"devDependencies":{"mocha":"*","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v3.x` branch is for v3 development, the `v2.x` branch is for v2 development, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Before starting to write code, look for existing [tickets](https://github.com/learnboost/mongoose/issues) or [create one](https://github.com/learnboost/mongoose/issues/new) for your specific issue. That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n- Write inline documentation for new methods or class members.\n- Write tests and make sure they pass.\n- Follow the general coding style of the rest of the project (comma first, etc).\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.0.2","dist":{"shasum":"d04ca82b9d72e016bf0353436de0179a84db0ffb","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.0.2.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.8.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.8.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.4"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.8.0","dist":{"shasum":"9340645f7575725c7ef0c63aa9bc02bfcb25f926","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.8.0.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.0.3":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.0.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.4","ms":"0.1.0"},"devDependencies":{"mocha":"*","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v3.x` branch is for v3 development, the `v2.x` branch is for v2 development, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Before starting to write code, look for existing [tickets](https://github.com/learnboost/mongoose/issues) or [create one](https://github.com/learnboost/mongoose/issues/new) for your specific issue. That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n- Write inline documentation for new methods or class members.\n- Write tests and make sure they pass.\n- Follow the general coding style of the rest of the project (comma first, etc).\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.0.3","dist":{"shasum":"f9ebcc9c90d6c204c58684149ba8626dcb0221dd","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.0.3.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.1.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.1.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.5","ms":"0.1.0"},"devDependencies":{"mocha":"*","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.1.0","dist":{"shasum":"ed18d52ba711efe588c07fb44dbd7e61dbff44b2","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.1.0.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.8.1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.8.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.5"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.8.1","dist":{"shasum":"96d13b61f736903fa29cfef4a5e127cf2ff1b7a0","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.8.1.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.1.2-pre":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.1.2-pre","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.6","ms":"0.1.0"},"devDependencies":{"mocha":"*","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0","registry":"https://registry.npmjs.org/","_token":{"AuthSession":"YWFyb246NTA0MTNGMEY6hrrffP6GhoosBh6BnE6g4KpNA7E","version":"1","expires":"1346489263187","path":"/","httponly":true}},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.1.2-pre","dist":{"shasum":"43f25955ea03471d5f29c89321a35a87598d5865","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.1.2-pre.tgz","noattachment":true},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.1.1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.1.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.6","ms":"0.1.0"},"devDependencies":{"mocha":"*","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0","registry":"https://registry.npmjs.org/","_token":{"AuthSession":"YWFyb246NTA0MTNGMEY6hrrffP6GhoosBh6BnE6g4KpNA7E","version":"1","expires":"1346489263187","path":"/","httponly":true}},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.1.1","dist":{"shasum":"6477d0a87d05d685bc6fe6e0ea0bd7e3b6ec5e18","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.1.1.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.8.2":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.8.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.6"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.8.2","dist":{"shasum":"eda2369ac67e9698bb4dcc81eb2b845571d1ddba","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.8.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.8.3":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.8.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.7"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.8.3","dist":{"shasum":"a31aa6c8d08195638a7cb438ce0e49871ce7cc4c","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.8.3.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.1.2":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.1.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.7","ms":"0.1.0"},"devDependencies":{"mocha":"*","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0","registry":"https://registry.npmjs.org/","_token":{"AuthSession":"YWFyb246NTA0RTc5NTQ6IcpjSHsJFml4eXI5_xINnHKhmD4","version":"1","expires":"1347356148674","path":"/","httponly":true}},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.1.2","dist":{"shasum":"5b645e5cae019982874d9804e581bc6eafc78dbd","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.1.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.9.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.9.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.7"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.9.0","dist":{"shasum":"9fe5d3a4896b05dbef215f99d84dd47746c9e76c","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.9.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.2.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.2.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.7","ms":"0.1.0"},"devDependencies":{"mocha":"1.4.2","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0","registry":"https://registry.npmjs.org/","_token":{"AuthSession":"YWFyb246NTA2NDg3MzY6ZtObYZ1OlyJNWWHGlkzXjbgwseo","version":"1","expires":"1348801495795","path":"/","httponly":true}},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.2.0","dist":{"shasum":"2f4ae624d1fe5716d801d13d9dc65d380e8158e4","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.2.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.9.1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.9.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.7"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.9.1","dist":{"shasum":"1a2c70484327c0b3cc3c9a3c17c60ca0a0b8c557","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.9.1.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.2.1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.2.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.7","ms":"0.1.0"},"devDependencies":{"mocha":"1.4.2","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0","registry":"https://registry.npmjs.org/","_token":{"AuthSession":"YWFyb246NTA2NjhCRjA6WbKluCSw1_3Ef0lmWsv8NbvYFE4","version":"1","expires":"1348933775544","path":"/","httponly":true}},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.2.1","dist":{"shasum":"64b0c978cb287f6ef1cd23194ab59775ff492c7c","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.2.1.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.9.2":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.9.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.10"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.9.2","dist":{"shasum":"5a0ce3b523edfda15a6bd6f51ce77bf7cd5817bf","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.9.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.2.2":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.2.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.10","ms":"0.1.0","sliced":"0.0.3"},"devDependencies":{"mocha":"1.4.2","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0","registry":"https://registry.npmjs.org/","_token":{"AuthSession":"YWFyb246NTA3MzFBMUE6ikYteeKU9oSTLVNwP-2BtbaCsx8","version":"1","expires":"1349756602116","path":"/","httponly":true}},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.2.2","dist":{"shasum":"74bbbf06e585ebbc49cd4cd76d5bf6e826d55c44","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.2.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.3.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.3.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.11","ms":"0.1.0","sliced":"0.0.3"},"devDependencies":{"mocha":"1.4.2","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.3.0","dist":{"shasum":"ca94eb492fd155028ecac174a145f6258f3cc1c9","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.3.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.3.1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.3.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.11","ms":"0.1.0","sliced":"0.0.3"},"devDependencies":{"mocha":"1.4.2","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.3.1","dist":{"shasum":"fa326134ed2f4190d31447fdeebe034c16f58236","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.3.1.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.9.3":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.9.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.11"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"2.x","registry":"https://registry.npmjs.org/"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.9.3","dist":{"shasum":"c3ed4c4f6aaa9e1a57427a24ea271ba7b1546f9d","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.9.3.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.4.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.4.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.11","ms":"0.1.0","sliced":"0.0.3"},"devDependencies":{"mocha":"1.4.2","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.4.0","dist":{"shasum":"242e76b105cf9b3a0ba72dbce85fadeac4c377c8","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.4.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.9.4":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.9.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.2"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"2.x","registry":"https://registry.npmjs.org/"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.9.4","dist":{"shasum":"c28db80a890eb20e5863ce2fc9484878beca069f","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.9.4.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.9.5":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.9.5","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.3"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"2.x","registry":"https://registry.npmjs.org/"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.9.5","dist":{"shasum":"bbc384578d1f44434526ae74df5e7712668e7f96","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.9.5.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.3","ms":"0.1.0","sliced":"0.0.3","muri":"0.0.4"},"devDependencies":{"mocha":"1.4.2","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.5.0","dist":{"shasum":"86258495947bed9594fcad207a2cb4c9c5a37113","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.5","ms":"0.1.0","sliced":"0.0.3","muri":"0.0.4"},"devDependencies":{"mocha":"1.4.2","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.5.1","dist":{"shasum":"2485fee4252a28b64f60f2e7c2f17a32e2c59e7b","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.1.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.2":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.5","ms":"0.1.0","sliced":"0.0.3","muri":"0.0.4"},"devDependencies":{"mocha":"1.4.2","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.5.2","dist":{"shasum":"adbfd6ccc435c973b41d965496a5668cea1d4199","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.3":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.7","ms":"0.1.0","sliced":"0.0.3","muri":"0.1.0"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.5.3","dist":{"shasum":"7d73b376e3b30aaabe935a2142904cbb67556104","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.3.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.9.6":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.9.6","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.7"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"2.x","registry":"https://registry.npmjs.org/"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.9.6","dist":{"shasum":"062bd0405a2d92b61d1ba51d29613f91c590568f","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.9.6.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.9.7":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.9.7","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.8"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"2.x","registry":"https://registry.npmjs.org/"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.9.7","dist":{"shasum":"b5b5140a008ab5e61367c4ec3782cc1a8b045402","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.9.7.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.4":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.8","ms":"0.1.0","sliced":"0.0.3","muri":"0.1.0"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [psuedo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.5.4","dist":{"shasum":"1336b5459713230ab936d2fd195b37fc1bcfc176","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.4.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.5":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.5","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.11","ms":"0.1.0","sliced":"0.0.3","muri":"0.1.0"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\n- Google Groups [mailing list](http://groups.google.com/group/mongoose-orm)\n- (irc) #mongoosejs on freenode\n- reporting [issues](https://github.com/learnboost/mongoose/issues/)\n- [10gen](http://www.mongodb.org/display/DOCS/Technical+Support)\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://plugins.mongoosejs.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\n    git clone git://github.com/LearnBoost/mongoose.git\n\n### Guidelines\n\nSee [contributing](http://mongoosejs.com/docs/contributing.html).\n\n## Credits\n\n[contributors](https://github.com/learnboost/mongoose/graphs/contributors)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.5.5","dist":{"shasum":"f223ec6d9f6ea4dc33da6ef4ab5708d87a2957cf","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.5.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.9.8":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.9.8","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.11"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"2.x","registry":"https://registry.npmjs.org/"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.9.8","dist":{"shasum":"953545400777e94035f74c4cfe251a404b0c538f","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.9.8.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.9.9":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.9.9","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.12"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"2.x","registry":"https://registry.npmjs.org/"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@2.9.9","dist":{"shasum":"7cb3dbb5210207df4c5ace84b37693785d153588","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.9.9.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.6":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.6","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.12","ms":"0.1.0","sliced":"0.0.3","muri":"0.1.0"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.5.6","dist":{"shasum":"96aa66988426ab318b292328cd6ae20c4ebed4ad","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.6.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.7":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.7","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.13","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.5.7","dist":{"shasum":"0ad9377631e1f5187d79a146ac1441f8baa8ce3e","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.7.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.8":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.8","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.13","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.5.8","dist":{"shasum":"03d354788d9fa7630e149d19ac4a29515d5ae00f","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.8.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"2.9.10":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"2.9.10","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","mongo","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.14"},"devDependencies":{"mocha":"1.3.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"2.x"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nThe following plugins are currently available for use with mongoose:\n\n- [mongoose-types](https://github.com/bnoguchi/mongoose-types) - Adds\n  several additional types (e.g., Email) that you can use in your\n  Schema declarations\n- [mongoose-auth](https://github.com/bnoguchi/mongoose-auth) - A drop in \n  solution for your auth needs. Currently supports Password, Facebook,\n  Twitter, Github, and more.\n- [mongoose-joins](https://github.com/goulash1971/mongoose-joins) - Adds simple join support\n- [mongoose-dbref](https://github.com/goulash1971/mongoose-dbref) - An alternative DBRef option\n- [mongoose-flatmatcher](https://github.com/marksweiss/mongoose-flatmatcher) - A query pre-processor that maps flat name/value pairs to schemas \n- [mongoose-ttl](https://github.com/aheckmann/mongoose-ttl) - TTL support\n- [mongoose-keywordize](https://github.com/aheckmann/mongoose-keywordize) - auto keywords generation\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@2.9.10","dist":{"shasum":"bcb3a5057162b1e2957f481446d609c0209a98cb","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-2.9.10.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.9":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.9","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.14","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.5.9","dist":{"shasum":"a535c9541127fa4ef9638ee97c937ea17c5031c2","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.9.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.2":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.6.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.14","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.2","dist":{"shasum":"4e47c566986be7c79b510efae91eb45bb9f908f6","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.2.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.10":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.10","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.14","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.5.10","dist":{"shasum":"3155ee422efb1d0cb2da48f6ebf636bfbe388bf9","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.10.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.3":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.6.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.14","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.3","dist":{"shasum":"2a5afc65019cb96dd4bb566cb5a47f069b9cc887","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.3.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.11":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.11","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.14","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.5.11","dist":{"shasum":"9fdc005e395a219748f565cd6e73194aa70aab44","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.11.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.4":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.6.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.14","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.4","dist":{"shasum":"73b3d3d8e2d81413ed335b23e9d36b1942f4c638","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.4.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.5":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.6.5","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.14","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.5","dist":{"shasum":"098ccf385f881e2f7f4c7a097f88f481fb6ebee0","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.5.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.6":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.6.6","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.14","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.6","dist":{"shasum":"f46459d19aff3793684c599ebb81e13fe2a1f344","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.6.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.7":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.6.7","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.14","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.6.7","dist":{"shasum":"aa6c9f4dfb740c7721dbe734fbb97714e5ab0ebc","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.7.tgz"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.12":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.12","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.0","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"publishConfig":{"tag":"3.5.x"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.5.12","dist":{"shasum":"b380604373770c011172774af509f95e8051d45b","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.12.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.8":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.6.8","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.0","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.8","dist":{"shasum":"381fc138353de0cc89f19a0dd0eb8eddf7777435","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.8.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.9":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.6.9","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.0","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.9","dist":{"shasum":"ad82d2c30f478a6f5ee9a02a84e70c8b2938e57d","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.9.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.10":{"name":"mongoose","description":"Elegant MongoDB object modeling for Node.js","version":"3.6.10","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.3","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.10","dist":{"shasum":"b75169427fc146bdf4bfb11e81063957e0c4a412","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.10.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.13":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.13","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.3","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"publishConfig":{"tag":"3.5.x"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.5.13","dist":{"shasum":"c6ced2e1edf102481aa8063ea67a2006c61db086","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.13.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.14":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.14","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.5","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"publishConfig":{"tag":"3.5.x"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.5.14","dist":{"shasum":"2a736d94d5e9cf2243e41960b3dc10240bf171e3","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.14.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.11":{"name":"mongoose","description":"Elegant MongoDB object modeling for Node.js","version":"3.6.11","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.5","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1","regexp-clone":"0.0.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.11","dist":{"shasum":"b94cac6701f82a5a81b587853ba0fccbc25df0cb","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.11.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.12":{"name":"mongoose","description":"Elegant MongoDB object modeling for Node.js","version":"3.6.12","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.10","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1","regexp-clone":"0.0.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.12","dist":{"shasum":"8f2b2089b8d9e42a3bc3bb7491839bd316da834e","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.12.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.13":{"name":"mongoose","description":"Elegant MongoDB object modeling for Node.js","version":"3.6.13","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.10","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1","regexp-clone":"0.0.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.13","dist":{"shasum":"70f4da4f93cbbf7242929ab4232c049c435df0b7","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.13.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.14":{"name":"mongoose","description":"Elegant MongoDB object modeling for Node.js","version":"3.6.14","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.11","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1","regexp-clone":"0.0.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.14","dist":{"shasum":"acf28354ba4f792ded931ccd0dfe038a65757832","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.14.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.15":{"name":"mongoose","description":"Elegant MongoDB object modeling for Node.js","version":"3.6.15","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.11","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1","regexp-clone":"0.0.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.15","dist":{"shasum":"272f1575da3b48ec31467abdf15baa61854ba5f1","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.15.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.15":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.15","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.12","ms":"0.1.0","sliced":"0.0.5","muri":"0.3.1"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"publishConfig":{"tag":"3.5.x"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.5.15","dist":{"shasum":"c37d8d80d134f1bae1ff92ef19ff652bfd0706b7","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.15.tgz"},"_from":".","_npmVersion":"1.2.23","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.7.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.7.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.15","ms":"0.1.0","sliced":"0.0.5","muri":"0.3.1","mpromise":"0.3.0","mpath":"0.1.1","regexp-clone":"0.0.1","mquery":"0.2.4"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4","benchmark":"1.0.0","open":"0.0.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"publishConfig":{"tag":"unstable"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"# Mongoose\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n[![Build Status](https://travis-ci.org/LearnBoost/mongoose.png?branch=3.6.x)](https://travis-ci.org/LearnBoost/mongoose)\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors). Stand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Live Examples\n<a href=\"https://runnable.com/mongoose\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads). Then:\n\n    $ npm install mongoose\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongoose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated using [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.7.0","dist":{"shasum":"ffad3ac81293bffe5b02f886592685675c7a0d99","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.7.0.tgz"},"_from":".","_npmVersion":"1.2.23","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.16":{"name":"mongoose","description":"Elegant MongoDB object modeling for Node.js","version":"3.6.16","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.17","ms":"0.1.0","sliced":"0.0.5","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1","regexp-clone":"0.0.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4","benchmark":"1.0.0","open":"0.0.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.16","dist":{"shasum":"2acd9c1427a1230eb391dcdea4a9a747628038d6","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.16.tgz"},"_from":".","_npmVersion":"1.2.23","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.5.16":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.5.16","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.18","ms":"0.1.0","sliced":"0.0.5","muri":"0.3.1"},"devDependencies":{"mocha":"1.7.4","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"publishConfig":{"tag":"3.5.x"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.5.16","dist":{"shasum":"0079c3335cbab3cc53aead71fde5388fec2b2a92","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.5.16.tgz"},"_from":".","_npmVersion":"1.2.23","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.17":{"name":"mongoose","description":"Elegant MongoDB object modeling for Node.js","version":"3.6.17","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.18","ms":"0.1.0","sliced":"0.0.5","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1","regexp-clone":"0.0.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4","benchmark":"1.0.0","open":"0.0.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.17","dist":{"shasum":"2f53a041fe28974f3e536aabd81dd4bb31e2abd0","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.17.tgz"},"_from":".","_npmVersion":"1.2.23","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.7.2":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.7.2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.18","ms":"0.1.0","sliced":"0.0.5","muri":"0.3.1","mpromise":"0.3.0","mpath":"0.1.1","regexp-clone":"0.0.1","mquery":"0.2.4"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4","benchmark":"1.0.0","open":"0.0.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"publishConfig":{"tag":"unstable"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"# Mongoose\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n[![Build Status](https://travis-ci.org/LearnBoost/mongoose.png?branch=3.6.x)](https://travis-ci.org/LearnBoost/mongoose)\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors). Stand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Live Examples\n<a href=\"https://runnable.com/mongoose\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads). Then:\n\n    $ npm install mongoose\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongoose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated using [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.7.2","dist":{"shasum":"e7550bb44ce1eaa9fc78223360d43b2722caa258","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.7.2.tgz"},"_from":".","_npmVersion":"1.2.23","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.0.0-alpha1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.0.0-alpha1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.0.2"},"devDependencies":{"should":"0.2.1","gleak":"0.2.1","cli-table":"0.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"_id":"mongoose@3.0.0-alpha1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"48574013aae19f9d057a98dca388fd74d32c7d21","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.0.0alpha1.tgz"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins page](https://github.com/LearnBoost/mongoose/wiki/Plugins) to see contributions from the community. Add your own!\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.0.0-alpha2":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.0.0-alpha2","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.0.2"},"devDependencies":{"mocha":"*"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins page](https://github.com/LearnBoost/mongoose/wiki/Plugins) to see contributions from the community. Add your own!\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.0.0-alpha2","dist":{"shasum":"6a1d8aadf1b19f47982d77bebc996bca7d0f5bae","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.0.0alpha2.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.0.0-rc0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.0.0-rc0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql"],"dependencies":{"hooks":"0.2.1","mongodb":"1.1.2","ms":"0.1.0"},"devDependencies":{"mocha":"*","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"publishConfig":{"tag":"3.0"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\nDefining a model is as easy as:\n\n    var Comment = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , buf       : Buffer\n      , date      : Date\n      , comments  : [Comment]\n      , meta      : {\n          votes : Number\n        , favs  : Number\n      }\n    });\n\n    var Post = mongoose.model('BlogPost', BlogPost);\n\n## Installation\n\nThe recommended way is through the excellent [NPM](http://www.npmjs.org/):\n\n    $ npm install mongoose\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/LearnBoost/mongoose.git node_modules/mongoose/\n\nAnd install dependency modules written on `package.json`.\n\nThen you can `require` it:\n\n    require('mongoose')\n\n## Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n## Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/schematypes.html)\n* [Getters](http://mongoosejs.com/docs/getters-setters.html)\n* [Setters](http://mongoosejs.com/docs/getters-setters.html)\n* [Indexes](http://mongoosejs.com/docs/indexes.html)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Statics](http://mongoosejs.com/docs/methods-statics.html) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [DBRefs](http://mongoosejs.com/docs/dbrefs.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n## Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [this link](http://mongoosejs.com/docs/finding-documents.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n## Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n## Middleware\n\nMiddleware is one of the most exciting features about Mongoose. Middleware takes away all the pain of nested callbacks.\n\nMiddleware are defined at the Schema level and are applied for the methods `init` (when a document is initialized with data from MongoDB), `save` (when a document or embedded document is saved).\n\nThere's two types of middleware:\n\n- Serial\n  Serial middleware are defined like:\n\n        .pre(method, function (next, methodArg1, methodArg2, ...) {\n          // ...\n        })\n\n  They're executed one after the other, when each middleware calls `next`.\n\n  You can also intercept the `method`'s incoming arguments via your middleware -- notice `methodArg1`, `methodArg2`, etc in the `pre` definition above. See section \"Intercepting and mutating method arguments\" below.\n\n\n- Parallel\n  Parallel middleware offer more fine-grained flow control, and are defined like:\n\n        .pre(method, true, function (next, done, methodArg1, methodArg2) {\n          // ...\n        })\n\n  Parallel middleware can `next()` immediately, but the final argument will be called when all the parallel middleware have called `done()`.\n\n### Error handling\n\nIf any middleware calls `next` or `done` with an `Error` instance, the flow is interrupted, and the error is passed to the function passed as an argument.\n\nFor example:\n\n    schema.pre('save', function (next) {\n      // something goes wrong\n      next(new Error('something went wrong'));\n    });\n\n    // later...\n\n    myModel.save(function (err) {\n      // err can come from a middleware\n    });\n\n### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n## API docs\n\nYou can find the [Dox](http://github.com/visionmedia/dox) generated API docs [here](http://mongoosejs.com/docs/api.html).\n\n## Getting support\n\nPlease subscribe to the Google Groups [mailing list](http://groups.google.com/group/mongoose-orm).\n\nJoin #mongoosejs on freenode.\n\n## Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/christkv/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## Mongoose Plugins\n\nTake a peek at the [plugins search site](http://mongooseplugins.herokuapp.com/) to see related modules from the community.\n\n## Contributing to Mongoose\n\n### Cloning the repository\n\nMake a fork of `mongoose`, then clone it in your computer. The `v2.x` branch contains the current stable release, and the `master` branch the next upcoming major release.\n\n### Guidelines\n\n- Please write inline documentation for new methods or class members.\n- Please write tests and make sure your tests pass.\n- Before starting to write code, look for existing tickets or create one for your specific issue (unless you're addressing something that's clearly broken). That way you avoid working on something that might not be of interest or that has been addressed already in a different branch.\n\n## Credits\n\n- Guillermo Rauch - guillermo@learnboost.com - [Guille](http://github.com/guille)\n- Nathan White - [nw](http://github.com/nw/)\n- Brian Noguchi - [bnoguchi](https://github.com/bnoguchi)\n- Aaron Heckmann - [aheckmann](https://github.com/aheckmann)\n\n## License\n\nCopyright (c) 2010-2012 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.0.0-rc0","dist":{"shasum":"a0e6b59067ce8d69bfaddd5c7f18af02cbf4a1a1","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.0.0rc0.tgz"},"maintainers":[{"name":"tmpvar","email":"tmpvar@gmail.com"},{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.0-rc0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.6.0-rc0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.11","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.0","mpromise":"0.2.0","mpath":"0.1.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">= 0.4.0"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"mongoose@3.6.0-rc0","dist":{"shasum":"f3425d1107bce0f221eb56b9f2a0d71f4cd49591","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.0rc0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.0-rc1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.6.0-rc1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","mongoose","orm","data","datastore","nosql","odm","sql","db","database"],"dependencies":{"hooks":"0.2.1","mongodb":"1.2.13","ms":"0.1.0","sliced":"0.0.3","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1"},"devDependencies":{"mocha":"1.8.1","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"https://groups.google.com/group/mongoose-orm"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 80+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) to mongoose too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.0-rc1","dist":{"shasum":"724ca22ea4f49f026fb63625522654748b44eabd","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.0rc1.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.18":{"name":"mongoose","description":"Elegant MongoDB object modeling for Node.js","version":"3.6.18","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.19","ms":"0.1.0","sliced":"0.0.5","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1","regexp-clone":"0.0.1"},"devDependencies":{"mocha":"1.12.0","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4","benchmark":"1.0.0","open":"0.0.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.18","dist":{"shasum":"cdf41325433ea795a1b3632ef1d7591db487d224","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.18.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.7.3":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.7.3","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.19","ms":"0.1.0","sliced":"0.0.5","muri":"0.3.1","mpromise":"0.3.0","mpath":"0.1.1","regexp-clone":"0.0.1","mquery":"0.3.1"},"devDependencies":{"mocha":"1.12.0","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4","benchmark":"1.0.0","open":"0.0.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"publishConfig":{"tag":"unstable"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"# Mongoose\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n[![Build Status](https://travis-ci.org/LearnBoost/mongoose.png?branch=3.6.x)](https://travis-ci.org/LearnBoost/mongoose)\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [10gen support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors). Stand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Live Examples\n<a href=\"https://runnable.com/mongoose\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads). Then:\n\n    $ npm install mongoose\n    \n## Stablility\n\nThe current stable branch is [3.6.x](https://github.com/LearnBoost/mongoose/tree/3.6.x). New (unstable) development always occurs on the [master](https://github.com/LearnBoost/mongoose/tree/master) branch.\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongoose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated using [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.7.3","dist":{"shasum":"32c707bd919db3ae534326042be0b9ef9ee7ff57","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.7.3.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.19":{"name":"mongoose","description":"Elegant MongoDB object modeling for Node.js","version":"3.6.19","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.19","ms":"0.1.0","sliced":"0.0.5","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1","regexp-clone":"0.0.1"},"devDependencies":{"mocha":"1.12.0","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4","benchmark":"1.0.0","open":"0.0.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [MongoDB support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.19","dist":{"shasum":"87eec5e7dd78ffaf7db6a0b6f2dc4c7b7d76dfa8","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.19.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.6.20":{"name":"mongoose","description":"Elegant MongoDB object modeling for Node.js","version":"3.6.20","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.19","ms":"0.1.0","sliced":"0.0.5","muri":"0.3.1","mpromise":"0.2.1","mpath":"0.1.1","regexp-clone":"0.0.1"},"devDependencies":{"mocha":"1.12.0","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4","benchmark":"1.0.0","open":"0.0.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"## What's Mongoose?\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Try it live\n<a href=\"https://runnable.com/#learnboost/mongoose/code.js/launch\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [MongoDB support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads).\n\n    $ npm install mongoose\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors).\n\n## Get Involved\n\nStand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated by [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.6.20","dist":{"shasum":"47263843e6b812ea207eec104c40a36c8d215f53","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.6.20.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.7.4":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.7.4","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.19","ms":"0.1.0","sliced":"0.0.5","muri":"0.3.1","mpromise":"0.3.0","mpath":"0.1.1","regexp-clone":"0.0.1","mquery":"0.3.2"},"devDependencies":{"mocha":"1.12.0","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4","benchmark":"1.0.0","open":"0.0.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"publishConfig":{"tag":"unstable"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"# Mongoose\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n[![Build Status](https://travis-ci.org/LearnBoost/mongoose.png?branch=3.6.x)](https://travis-ci.org/LearnBoost/mongoose)\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [MongoDB support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors). Stand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Live Examples\n<a href=\"https://runnable.com/mongoose\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads). Then:\n\n    $ npm install mongoose\n    \n## Stablility\n\nThe current stable branch is [3.6.x](https://github.com/LearnBoost/mongoose/tree/3.6.x). New (unstable) development always occurs on the [master](https://github.com/LearnBoost/mongoose/tree/master) branch.\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongoose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated using [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.7.4","dist":{"shasum":"5ed8cdbc91c92b18ab49ac3526c7ac5264c7b292","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.7.4.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.8.0":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.8.0","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.19","ms":"0.1.0","sliced":"0.0.5","muri":"0.3.1","mpromise":"0.3.0","mpath":"0.1.1","regexp-clone":"0.0.1","mquery":"0.3.2"},"devDependencies":{"mocha":"1.12.0","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4","benchmark":"1.0.0","open":"0.0.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"# Mongoose\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n[![Build Status](https://travis-ci.org/LearnBoost/mongoose.png?branch=3.6.x)](https://travis-ci.org/LearnBoost/mongoose)\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [MongoDB support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 90+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors). Stand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Live Examples\n<a href=\"https://runnable.com/mongoose\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads). Then:\n\n    $ npm install mongoose\n    \n## Stablility\n\nThe current stable branch is [3.6.x](https://github.com/LearnBoost/mongoose/tree/3.6.x). New (unstable) development always occurs on the [master](https://github.com/LearnBoost/mongoose/tree/master) branch.\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongoose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated using [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.8.0","dist":{"shasum":"0e7b34fe90ad996c72ce7cfec6822176ea137e48","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.8.0.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]},"3.8.1":{"name":"mongoose","description":"Mongoose MongoDB ODM","version":"3.8.1","author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"keywords":["mongodb","document","model","schema","database","odm","data","datastore","query","nosql","orm","db"],"dependencies":{"hooks":"0.2.1","mongodb":"1.3.19","ms":"0.1.0","sliced":"0.0.5","muri":"0.3.1","mpromise":"0.3.0","mpath":"0.1.1","regexp-clone":"0.0.1","mquery":"0.3.2"},"devDependencies":{"mocha":"1.12.0","node-static":"0.5.9","dox":"0.3.1","jade":"0.26.3","highlight.js":"7.0.1","markdown":"0.3.1","promises-aplus-tests":">= 1.0.2","tbd":"0.6.4","benchmark":"1.0.0","open":"0.0.3"},"directories":{"lib":"./lib/mongoose"},"scripts":{"test":"make test"},"main":"./index.js","engines":{"node":">=0.6.19"},"bugs":{"url":"https://github.com/learnboost/mongoose/issues/new","email":"mongoose-orm@googlegroups.com"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"homepage":"http://mongoosejs.com","readme":"# Mongoose\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n[![Build Status](https://travis-ci.org/LearnBoost/mongoose.png?branch=3.8.x)](https://travis-ci.org/LearnBoost/mongoose)\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [MongoDB support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 100+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors). Stand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Live Examples\n<a href=\"https://runnable.com/mongoose\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads). Then:\n\n    $ npm install mongoose\n    \n## Stablility\n\nThe current stable branch is [3.8.x](https://github.com/LearnBoost/mongoose/tree/3.8.x). New (unstable) development always occurs on the [master](https://github.com/LearnBoost/mongoose/tree/master) branch.\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongoose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n    var mongoose = require('mongoose');\n\n    mongoose.connect('mongodb://localhost/my_database');\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n    var Schema = mongoose.Schema\n      , ObjectId = Schema.ObjectId;\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n    });\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n    var Comment = new Schema({\n        name  :  { type: String, default: 'hahaha' }\n      , age   :  { type: Number, min: 18, index: true }\n      , bio   :  { type: String, match: /[a-z]/ }\n      , date  :  { type: Date, default: Date.now }\n      , buff  :  Buffer\n    });\n\n    // a setter\n    Comment.path('name').set(function (v) {\n      return capitalize(v);\n    });\n\n    // middleware\n    Comment.pre('save', function (next) {\n      notify(this.get('email'));\n      next();\n    });\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n    var myModel = mongoose.model('ModelName');\n\nOr just do it all at once\n\n    var MyModel = mongoose.model('ModelName', mySchema);\n\nWe can then instantiate it, and save it:\n\n    var instance = new MyModel();\n    instance.my.key = 'hello';\n    instance.save(function (err) {\n      //\n    });\n\nOr we can find documents from the same collection\n\n    MyModel.find({}, function (err, docs) {\n      // docs.forEach\n    });\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = conn.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // works\n\n    vs\n\n    var conn = mongoose.createConnection('your connection string');\n    var MyModel = mongoose.model('ModelName', schema);\n    var m = new MyModel;\n    m.save() // does not work b/c the default connection object was never connected\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n    comments: [Comments]\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\nThe same goes for removing them:\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n    schema.pre('set', function (next, path, val, typel) {\n      // `this` is the current Document\n      this.emit('set', path, val);\n\n      // Pass control to the next pre\n      next();\n    });\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n    .pre(method, function firstPre (next, methodArg1, methodArg2) {\n      // Mutate methodArg1\n      next(\"altered-\" + methodArg1.toString(), methodArg2);\n    })\n\n    // pre declaration is chainable\n    .pre(method, function secondPre (next, methodArg1, methodArg2) {\n      console.log(methodArg1);\n      // => 'altered-originalValOfMethodArg1' \n      \n      console.log(methodArg2);\n      // => 'originalValOfMethodArg2' \n      \n      // Passing no arguments to `next` automatically passes along the current argument values\n      // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n      // and also equivalent to, with the example method arg \n      // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n      next();\n    })\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n    new Schema({\n        broken: { type: Boolean }\n      , asset : {\n            name: String\n          , type: String // uh oh, it broke. asset will be interpreted as String\n        }\n    });\n\n    new Schema({\n        works: { type: Boolean }\n      , asset : {\n            name: String\n          , type: { type: String } // works. asset is an object with a type property\n        }\n    });\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated using [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"mongoose@3.8.1","dist":{"shasum":"1efe17d259ae2905330a3b2d91ba4085a090f6b8","tarball":"http://registry.npmjs.org/mongoose/-/mongoose-3.8.1.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"aaron","email":"aaron.heckmann+github@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}]}},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"aaron","email":"aaron.heckmann+github@gmail.com"}],"author":{"name":"Guillermo Rauch","email":"guillermo@learnboost.com"},"description":"Mongoose MongoDB ODM","time":{"0.0.1":"2010-12-20T09:15:41.703Z","0.0.2":"2010-12-20T09:15:41.703Z","0.0.3":"2010-12-20T09:15:41.703Z","0.0.4":"2010-12-20T09:15:41.703Z","0.0.5":"2010-12-30T00:26:44.656Z","1.0.0":"2011-02-01T09:26:36.264Z","1.0.1":"2011-02-02T18:05:48.026Z","1.0.2":"2011-02-02T19:25:16.714Z","0.0.6":"2011-02-02T21:27:25.069Z","1.0.3":"2011-02-03T01:04:54.627Z","1.0.4":"2011-02-03T02:24:37.541Z","1.0.5":"2011-02-03T07:37:33.430Z","1.0.6":"2011-02-03T18:40:56.971Z","1.0.7":"2011-02-06T16:57:17.476Z","1.0.8":"2011-02-09T23:27:09.020Z","1.0.10":"2011-02-12T07:24:10.414Z","1.0.11":"2011-02-14T23:45:45.542Z","1.0.12":"2011-02-15T03:35:40.205Z","1.0.13":"2011-02-17T00:51:55.770Z","1.0.14":"2011-02-18T00:38:47.292Z","1.0.15":"2011-02-19T01:38:18.169Z","1.0.16":"2011-02-19T02:26:57.671Z","1.1.0":"2011-02-26T04:43:56.645Z","1.1.1":"2011-03-02T00:18:56.788Z","1.1.2":"2011-03-03T17:48:53.171Z","1.1.3":"2011-03-05T07:44:06.557Z","1.1.4":"2011-03-10T00:28:53.156Z","1.1.5":"2011-03-15T00:37:40.435Z","1.1.6":"2011-03-22T16:10:55.265Z","1.1.7":"2011-03-23T02:00:52.187Z","1.1.8":"2011-03-23T19:00:40.920Z","1.1.9":"2011-03-23T22:49:15.198Z","1.1.10":"2011-03-24T00:23:42.848Z","1.1.11":"2011-03-25T19:09:30.484Z","1.1.12":"2011-03-26T14:48:41.652Z","1.1.13":"2011-03-26T23:48:14.985Z","1.1.14":"2011-03-28T17:00:52.109Z","1.1.15":"2011-03-28T17:25:58.846Z","1.1.16":"2011-03-28T21:16:14.230Z","1.1.17":"2011-03-30T14:42:39.101Z","1.1.18":"2011-03-30T15:37:46.000Z","1.1.19":"2011-03-31T16:48:49.190Z","1.1.20":"2011-03-31T17:09:45.484Z","1.1.21":"2011-03-31T19:24:24.139Z","1.1.22":"2011-03-31T21:25:52.030Z","1.1.23":"2011-04-01T19:15:11.431Z","1.1.24":"2011-04-03T16:16:02.626Z","1.1.25":"2011-04-08T16:29:05.029Z","1.2.0":"2011-04-11T19:05:02.504Z","1.3.0":"2011-04-19T12:46:54.897Z","1.3.1":"2011-04-27T14:33:22.231Z","1.3.2":"2011-04-27T16:51:14.487Z","1.3.3":"2011-04-27T20:01:05.508Z","1.3.4":"2011-05-17T13:54:47.726Z","1.3.5":"2011-05-19T03:09:27.393Z","1.3.6":"2011-05-19T16:39:23.373Z","1.3.7":"2011-06-03T16:22:32.642Z","1.4.0":"2011-06-10T22:32:47.539Z","1.5.0":"2011-06-28T01:59:32.094Z","1.6.0":"2011-07-07T13:14:29.515Z","1.7.2":"2011-07-13T12:28:53.576Z","1.7.3":"2011-07-16T14:11:03.405Z","1.7.4":"2011-07-25T19:04:28.431Z","1.8.0":"2011-08-04T15:14:16.127Z","1.8.1":"2011-08-10T19:35:15.648Z","1.8.2":"2011-08-17T13:56:41.857Z","1.8.3":"2011-08-19T19:43:38.717Z","1.8.4":"2011-08-22T00:51:07.638Z","2.0.0":"2011-08-25T06:29:35.853Z","2.0.1":"2011-08-25T16:54:37.137Z","2.0.2":"2011-08-26T21:57:24.823Z","2.0.3":"2011-08-28T19:32:25.434Z","2.0.4":"2011-08-29T18:12:49.183Z","2.1.0":"2011-09-02T03:09:30.042Z","2.1.1":"2011-09-07T17:48:19.633Z","2.1.2":"2011-09-07T21:48:18.840Z","2.1.3":"2011-09-16T17:41:03.198Z","2.1.4":"2011-09-20T19:26:50.629Z","2.2.0":"2011-09-23T02:06:03.517Z","2.2.1":"2011-09-27T16:17:48.749Z","2.2.2":"2011-09-28T20:58:39.617Z","2.2.3":"2011-09-29T18:41:30.736Z","2.2.4":"2011-10-03T20:06:29.971Z","2.3.0":"2011-10-04T16:45:20.126Z","2.3.1":"2011-10-10T22:12:42.753Z","2.3.2":"2011-10-11T19:48:29.198Z","2.3.3":"2011-10-12T16:47:53.551Z","2.3.4":"2011-10-18T16:52:57.080Z","2.3.5":"2011-10-19T15:56:21.497Z","2.3.6":"2011-10-21T16:40:25.316Z","2.3.7":"2011-10-24T15:20:34.723Z","2.3.8":"2011-10-26T20:52:43.205Z","2.3.9":"2011-11-04T15:45:00.880Z","2.3.10":"2011-11-05T20:05:16.998Z","2.3.11":"2011-11-08T22:00:27.415Z","2.3.12":"2011-11-09T18:36:38.730Z","2.3.13":"2011-11-15T15:29:00.953Z","2.4.0":"2011-11-30T03:05:21.763Z","2.4.1":"2011-12-02T15:17:29.912Z","2.4.2":"2011-12-12T15:23:54.174Z","2.4.3":"2011-12-14T16:59:25.236Z","2.4.4":"2011-12-14T21:09:43.896Z","2.4.5":"2011-12-14T21:57:09.325Z","2.4.6":"2011-12-16T12:52:55.253Z","2.4.7":"2011-12-16T17:14:12.804Z","2.4.8":"2011-12-22T18:26:11.708Z","2.4.9":"2012-01-04T16:08:38.938Z","2.4.10":"2012-01-10T16:32:00.053Z","2.5.0":"2012-01-26T06:13:39.758Z","2.5.1":"2012-01-27T19:50:56.515Z","2.5.2":"2012-01-30T16:52:01.344Z","2.5.3":"2012-02-02T13:27:37.211Z","2.5.4":"2012-02-03T21:18:12.666Z","2.5.5":"2012-02-03T22:09:37.083Z","2.5.6":"2012-02-09T13:10:03.998Z","2.5.7":"2012-02-09T14:30:05.356Z","2.5.8":"2012-02-21T20:20:46.933Z","2.5.9":"2012-02-22T22:19:07.631Z","2.5.10":"2012-03-06T13:45:42.472Z","2.5.11":"2012-03-15T17:43:41.977Z","2.5.12":"2012-03-21T12:32:57.038Z","2.5.13":"2012-03-22T14:29:32.076Z","2.5.14":"2012-04-13T17:11:11.285Z","2.6.0":"2012-04-19T23:56:25.212Z","2.6.1":"2012-04-30T17:55:19.504Z","2.6.2":"2012-05-01T03:28:25.653Z","2.6.3":"2012-05-03T18:26:58.502Z","2.6.4":"2012-05-15T18:45:04.087Z","2.6.5":"2012-05-24T20:32:10.078Z","2.6.6":"2012-06-06T22:23:14.451Z","2.6.7":"2012-06-08T17:30:06.906Z","2.6.8":"2012-06-15T01:36:11.644Z","2.7.0":"2012-06-15T01:36:44.819Z","2.7.1":"2012-06-28T17:45:10.973Z","2.7.2":"2012-07-18T16:30:31.637Z","2.7.3":"2012-08-02T22:56:25.827Z","2.7.4":"2012-08-02T21:41:39.472Z","3.0.0":"2012-08-07T23:42:16.064Z","3.0.1":"2012-08-13T03:31:25.254Z","3.0.2":"2012-08-17T16:57:55.836Z","2.8.0":"2012-08-23T16:47:28.524Z","3.0.3":"2012-08-23T21:02:22.278Z","3.1.0":"2012-08-29T18:34:57.913Z","2.8.1":"2012-08-29T21:01:57.917Z","3.1.2-pre":"2012-09-01T01:00:59.179Z","3.1.1":"2012-09-01T01:18:56.662Z","2.8.2":"2012-09-01T04:48:45.514Z","2.8.3":"2012-09-10T23:35:51.947Z","3.1.2":"2012-09-10T23:38:04.775Z","2.9.0":"2012-09-27T17:05:00.269Z","3.2.0":"2012-09-27T17:23:42.358Z","2.9.1":"2012-09-29T15:01:25.184Z","3.2.1":"2012-09-29T15:01:40.322Z","2.9.2":"2012-10-08T18:23:31.195Z","3.2.2":"2012-10-08T18:24:16.737Z","3.3.0":"2012-10-10T22:30:53.547Z","3.3.1":"2012-10-11T17:27:52.947Z","2.9.3":"2012-11-10T19:27:00.607Z","3.4.0":"2012-11-11T16:37:47.847Z","2.9.4":"2012-12-05T19:48:29.559Z","2.9.5":"2012-12-10T20:00:15.632Z","3.5.0":"2012-12-11T00:44:29.125Z","3.5.1":"2012-12-13T00:50:15.036Z","3.5.2":"2012-12-17T20:11:31.666Z","3.5.3":"2012-12-26T18:38:01.050Z","2.9.6":"2012-12-26T18:57:03.483Z","2.9.7":"2013-01-07T22:07:19.614Z","3.5.4":"2013-01-07T22:16:21.321Z","3.5.5":"2013-01-29T21:52:40.470Z","2.9.8":"2013-02-07T18:18:38.784Z","2.9.9":"2013-02-13T20:18:44.273Z","3.5.6":"2013-02-15T00:26:19.717Z","3.5.7":"2013-02-22T21:43:53.882Z","3.5.8":"2013-03-12T23:36:18.651Z","2.9.10":"2013-03-14T17:14:02.837Z","3.5.9":"2013-03-15T16:37:14.614Z","3.6.2":"2013-03-30T01:24:47.218Z","3.5.10":"2013-04-02T23:33:28.580Z","3.6.3":"2013-04-02T23:39:03.808Z","3.5.11":"2013-04-03T23:10:47.603Z","3.6.4":"2013-04-03T23:11:20.247Z","3.6.5":"2013-04-15T18:59:36.930Z","3.6.6":"2013-04-18T23:02:30.665Z","3.6.7":"2013-04-19T18:27:59.569Z","3.5.12":"2013-04-25T16:54:32.869Z","3.6.8":"2013-04-25T18:21:11.273Z","3.6.9":"2013-05-02T14:42:25.922Z","3.6.10":"2013-05-09T16:57:58.059Z","3.5.13":"2013-05-09T17:24:09.065Z","3.5.14":"2013-05-15T16:55:40.525Z","3.6.11":"2013-05-15T16:56:36.054Z","3.6.12":"2013-06-26T17:46:44.468Z","3.6.13":"2013-06-27T18:19:36.340Z","3.6.14":"2013-07-05T22:16:43.403Z","3.6.15":"2013-07-16T19:08:39.616Z","3.5.15":"2013-07-26T22:01:47.458Z","3.7.0":"2013-08-05T16:52:53.924Z","3.6.16":"2013-08-08T15:22:33.159Z","3.5.16":"2013-08-13T17:54:52.663Z","3.6.17":"2013-08-13T17:56:16.981Z","3.7.2":"2013-08-15T15:39:08.958Z","3.0.0-alpha1":"2012-06-16T00:07:53.255Z","3.0.0-alpha2":"2012-07-18T20:04:45.957Z","3.0.0-rc0":"2012-08-01T19:09:22.514Z","3.6.0-rc0":"2013-02-03T23:15:08.907Z","3.6.0-rc1":"2013-03-12T21:28:18.352Z","3.6.18":"2013-08-22T23:38:49.286Z","3.7.3":"2013-08-23T16:11:47.869Z","3.6.19":"2013-09-04T22:39:01.234Z","3.6.20":"2013-09-23T16:47:44.421Z","3.7.4":"2013-10-01T13:44:10.935Z","3.8.0":"2013-11-01T04:38:17.891Z","3.8.1":"2013-11-20T05:54:31.273Z"},"repository":{"type":"git","url":"git://github.com/LearnBoost/mongoose.git"},"users":{"vesln":true,"deedubs":true,"wojohowitz":true,"pid":true,"troygoode":true,"vasc":true,"tjholowaychuk":true,"mbrevoort":true,"aaron":true,"kevinohara80":true,"fgribreau":true,"alexandru.topliceanu":true,"vrtak-cz":true,"jswartwood":true,"travishorn":true,"coiscir":true,"m42am":true,"mstaessen":true,"bencevans":true,"chevex":true,"bat":true,"werle":true,"sandeepmistry":true,"fiws":true,"ljharb":true,"nexum":true,"dbrockman":true,"leesei":true,"eknkc":true,"hfcorriez":true,"oroce":true,"jmar777":true,"ebensing":true,"kennethkl":true,"inca":true,"joliva":true,"raitucarp":true,"chrisweb":true,"dknell":true,"pragma-dudes":true,"frankblizzard":true,"kubakubula":true,"pana":true},"_attachments":{"mongoose-3.8.1.tgz":{"content_type":"application/octet-stream","revpos":552,"digest":"md5-pHuXVuE0cRDmBeYBuVr7Jw==","length":137648,"stub":true},"mongoose-3.8.0.tgz":{"content_type":"application/octet-stream","revpos":549,"digest":"md5-mcrmZm0q+K0XOe6bQ0yfLw==","length":137355,"stub":true},"mongoose-3.7.4.tgz":{"content_type":"application/octet-stream","revpos":547,"digest":"md5-/jV8jjTQTLC8FaDUlnQnhA==","length":136982,"stub":true},"mongoose-3.6.20.tgz":{"content_type":"application/octet-stream","revpos":544,"digest":"md5-wzAZPjJkRvNUP0mkUuY0qQ==","length":118140,"stub":true},"mongoose-3.6.19.tgz":{"content_type":"application/octet-stream","revpos":541,"digest":"md5-X+yXeHmUJWxoypnG8n5W6w==","length":118394,"stub":true},"mongoose-3.7.3.tgz":{"content_type":"application/octet-stream","revpos":539,"digest":"md5-FkMBQ6jqzcNcmCuMtWMgRg==","length":133076,"stub":true},"mongoose-3.6.18.tgz":{"content_type":"application/octet-stream","revpos":537,"digest":"md5-uByarSdQNRzhhf8+TscwCQ==","length":117735,"stub":true},"mongoose-3.7.2.tgz":{"content_type":"application/octet-stream","revpos":532,"digest":"md5-5IEhmG/bVBQNjRwdwf+FMg==","length":131349,"stub":true},"mongoose-3.6.17.tgz":{"content_type":"application/octet-stream","revpos":528,"digest":"md5-g3T22ZZZ3lhdCRn1g5EmBQ==","length":117178,"stub":true},"mongoose-3.5.16.tgz":{"content_type":"application/octet-stream","revpos":526,"digest":"md5-EofT1TS4Bi8pGerJQVxorA==","length":99388,"stub":true},"mongoose-3.6.16.tgz":{"content_type":"application/octet-stream","revpos":523,"digest":"md5-Ii3h8PF2RkH2JpY7CuT7dQ==","length":117078,"stub":true},"mongoose-3.7.0.tgz":{"content_type":"application/octet-stream","revpos":521,"digest":"md5-OvH/HZM3KEBW3bBQDprFXw==","length":129639,"stub":true},"mongoose-3.5.15.tgz":{"content_type":"application/octet-stream","revpos":518,"digest":"md5-ODWpwXBDkfbixTFEOOKWlw==","length":99680,"stub":true},"mongoose-3.6.15.tgz":{"content_type":"application/octet-stream","revpos":515,"digest":"md5-n88uQGkafbQLt+vlI1TS0A==","length":116721,"stub":true},"mongoose-3.6.14.tgz":{"content_type":"application/octet-stream","revpos":509,"digest":"md5-QfF/v9MXKswcipeIFFA2rw==","length":116410,"stub":true},"mongoose-3.6.13.tgz":{"content_type":"application/octet-stream","revpos":506,"digest":"md5-gBEacKF70+8PhQv7i/AXYQ==","length":414620,"stub":true},"mongoose-3.6.12.tgz":{"content_type":"application/octet-stream","revpos":504,"digest":"md5-P/PaumkYdj3Cotu0wLpGmg==","length":414543,"stub":true},"mongoose-3.6.11.tgz":{"content_type":"application/octet-stream","revpos":501,"digest":"md5-vnXuQlKcKNkbZawLZDGqRA==","length":413884,"stub":true},"mongoose-3.5.14.tgz":{"content_type":"application/octet-stream","revpos":499,"digest":"md5-h9ZzDODA/RZnQST5Y0oJkw==","length":397255,"stub":true},"mongoose-3.5.13.tgz":{"content_type":"application/octet-stream","revpos":497,"digest":"md5-f1wLKg4r1HqRFRhQDVcwAg==","length":403125,"stub":true},"mongoose-3.6.10.tgz":{"content_type":"application/octet-stream","revpos":495,"digest":"md5-6pulDFopkFlEHCY4mk3Mcg==","length":419198,"stub":true},"mongoose-3.6.9.tgz":{"content_type":"application/octet-stream","revpos":493,"digest":"md5-k3qiYFAVfjBDWeDekXjJlw==","length":419103,"stub":true},"mongoose-3.6.8.tgz":{"content_type":"application/octet-stream","revpos":491,"digest":"md5-G4yc/LA+6s0NgXirBXLujw==","length":413188,"stub":true},"mongoose-3.5.12.tgz":{"content_type":"application/octet-stream","revpos":489,"digest":"md5-yaam/oye9fIcYPb2KlSMYA==","length":396990,"stub":true},"mongoose-3.6.7.tgz":{"content_type":"application/octet-stream","revpos":488,"digest":"md5-HzxkEP1Q0SOHh195C1WGYA==","length":152027,"stub":true},"mongoose-3.6.6.tgz":{"content_type":"application/octet-stream","revpos":485,"digest":"md5-PpdI8Vi1lGpoz5vK4zGoVQ==","length":418693,"stub":true},"mongoose-3.6.5.tgz":{"content_type":"application/octet-stream","revpos":483,"digest":"md5-22XipCj3S+oJAOJtPMERsA==","length":413404,"stub":true},"mongoose-3.6.4.tgz":{"content_type":"application/octet-stream","revpos":479,"digest":"md5-FJbdb6uXd30HSJrrWzWwrw==","length":114020,"stub":true},"mongoose-3.5.11.tgz":{"content_type":"application/octet-stream","revpos":477,"digest":"md5-lhfswr2sHeK3mTsyRuFr5g==","length":99014,"stub":true},"mongoose-3.6.3.tgz":{"content_type":"application/octet-stream","revpos":475,"digest":"md5-VcvbEAH5md6CkKIxOewjrQ==","length":113839,"stub":true},"mongoose-3.5.10.tgz":{"content_type":"application/octet-stream","revpos":473,"digest":"md5-xfJcjoTjJZzyQAQfThfReQ==","length":98860,"stub":true},"mongoose-3.6.2.tgz":{"content_type":"application/octet-stream","revpos":465,"digest":"md5-U2U/MPXMlv8lnXEVgkqRXw==","length":113465,"stub":true},"mongoose-3.5.9.tgz":{"content_type":"application/octet-stream","revpos":453,"digest":"md5-+ftBa6mThylbwMvCLvz/KQ==","length":98744,"stub":true},"mongoose-2.9.10.tgz":{"content_type":"application/octet-stream","revpos":451,"digest":"md5-o1bVrtG3OoMdtm2ZDD9lDg==","length":281046,"stub":true},"mongoose-3.5.8.tgz":{"content_type":"application/octet-stream","revpos":449,"digest":"md5-fQLzTjNGl6vijOA4mvAfaw==","length":98307,"stub":true},"mongoose-3.6.0rc1.tgz":{"content_type":"application/octet-stream","revpos":446,"digest":"md5-xo2fhZNRqzfagIJiMoUFTw==","length":108693,"stub":true},"mongoose-3.5.7.tgz":{"content_type":"application/octet-stream","revpos":443,"digest":"md5-JAesadOj3eUJxcYNGExrqg==","length":98084,"stub":true},"mongoose-3.5.6.tgz":{"content_type":"application/octet-stream","revpos":440,"digest":"md5-yiOe92bnsaw+GsCNShchIw==","length":97776,"stub":true},"mongoose-2.9.9.tgz":{"content_type":"application/octet-stream","revpos":438,"digest":"md5-tzcdm5GZeNpRgVq5a9UAJA==","length":154809,"stub":true},"mongoose-2.9.8.tgz":{"content_type":"application/octet-stream","revpos":434,"digest":"md5-yPCGxvlxvslV86PqqpYskQ==","length":264851,"stub":true},"mongoose-3.6.0rc0.tgz":{"content_type":"application/octet-stream","revpos":431,"digest":"md5-SEfAvlZaKpidBJZ0WKTpHA==","length":101890,"stub":true},"mongoose-3.5.5.tgz":{"content_type":"application/octet-stream","revpos":429,"digest":"md5-AK/HfaaOzQkI2ONaXtGiKw==","length":97685,"stub":true},"mongoose-3.5.4.tgz":{"content_type":"application/octet-stream","revpos":426,"digest":"md5-WrcuErXD+gfma1DyvWS5mQ==","length":96924,"stub":true},"mongoose-2.9.7.tgz":{"content_type":"application/octet-stream","revpos":424,"digest":"md5-JQtEHvtU+2rH/EO9Ypbt1g==","length":264155,"stub":true},"mongoose-2.9.6.tgz":{"content_type":"application/octet-stream","revpos":421,"digest":"md5-kw2K56xp7gcf+BySFapv8w==","length":266815,"stub":true},"mongoose-3.5.3.tgz":{"content_type":"application/octet-stream","revpos":419,"digest":"md5-8SsqsTXZ7pgzJPdSNS4doA==","length":96926,"stub":true},"mongoose-3.5.2.tgz":{"content_type":"application/octet-stream","revpos":417,"digest":"md5-ezZG/gH6vgsdqqx3CM2u/w==","length":96128,"stub":true},"mongoose-3.5.1.tgz":{"content_type":"application/octet-stream","revpos":413,"digest":"md5-xACV3IysUOgDHgJ94DPvjQ==","length":96115,"stub":true},"mongoose-3.5.0.tgz":{"content_type":"application/octet-stream","revpos":411,"digest":"md5-FBHzA5Im/1NhrfnzJWW4GA==","length":95696,"stub":true},"mongoose-2.9.5.tgz":{"content_type":"application/octet-stream","revpos":409,"digest":"md5-yiWW/WLPuyBaeL47JY9p1g==","length":267671,"stub":true},"mongoose-2.9.4.tgz":{"content_type":"application/octet-stream","revpos":407,"digest":"md5-Y6kuBTCXf28SDsq5nyLEEA==","length":260610,"stub":true},"mongoose-3.4.0.tgz":{"content_type":"application/octet-stream","revpos":404,"digest":"md5-300jUoU13LhjqOywrhF5+g==","length":92499,"stub":true},"mongoose-2.9.3.tgz":{"content_type":"application/octet-stream","revpos":395,"digest":"md5-6/Opm8nTMzctx3D02lzThg==","length":265303,"stub":true},"mongoose-3.3.1.tgz":{"content_type":"application/octet-stream","revpos":392,"digest":"md5-0449dmCPMWQBY1SJf0tSPg==","length":1474129,"stub":true},"mongoose-3.3.0.tgz":{"content_type":"application/octet-stream","revpos":390,"digest":"md5-yP6wMuN5IIvq05s4Wn2fDA==","length":1473051,"stub":true},"mongoose-3.2.2.tgz":{"content_type":"application/octet-stream","revpos":387,"digest":"md5-wL4B9LVA/Y2agsJkeEqN9g==","length":1473172,"stub":true},"mongoose-2.9.2.tgz":{"content_type":"application/octet-stream","revpos":385,"digest":"md5-u5AWy+RaBa46yxVn/H4DGw==","length":280706,"stub":true},"mongoose-3.2.1.tgz":{"content_type":"application/octet-stream","revpos":382,"digest":"md5-WLZFba0MPn07xMqJYrW/Pg==","length":1472514,"stub":true},"mongoose-2.9.1.tgz":{"content_type":"application/octet-stream","revpos":380,"digest":"md5-vyTMRicpwJ/smmFMQk2/QQ==","length":280724,"stub":true},"mongoose-3.2.0.tgz":{"content_type":"application/octet-stream","revpos":378,"digest":"md5-T2y/gfZfHHjWHXuFuw+5MA==","length":1469542,"stub":true},"mongoose-2.9.0.tgz":{"content_type":"application/octet-stream","revpos":375,"digest":"md5-fGPiU0DtiAbt1ZFIMzSq0w==","length":280463,"stub":true},"mongoose-3.1.2.tgz":{"content_type":"application/octet-stream","revpos":371,"digest":"md5-CyvQs4q3ZClj5a34HPtwpg==","length":2473434,"stub":true},"mongoose-2.8.3.tgz":{"content_type":"application/octet-stream","revpos":369,"digest":"md5-t3Z6x6UZwu9fyl+GMOD1wA==","length":278636,"stub":true},"mongoose-2.8.2.tgz":{"content_type":"application/octet-stream","revpos":364,"digest":"md5-ift+h3nxRhM//LMXJx4EXg==","length":275263,"stub":true},"mongoose-3.1.1.tgz":{"content_type":"application/octet-stream","revpos":362,"digest":"md5-o+Fb2UF1w9xVVLZr+YRk0w==","length":2564519,"stub":true},"mongoose-2.8.1.tgz":{"content_type":"application/octet-stream","revpos":353,"digest":"md5-gRtHb6wNUnfLDYvDe9/qrg==","length":275198,"stub":true},"mongoose-3.1.0.tgz":{"content_type":"application/octet-stream","revpos":351,"digest":"md5-PRgQQR3HtnR3wOY1DCnkzQ==","length":2564253,"stub":true},"mongoose-3.0.3.tgz":{"content_type":"application/octet-stream","revpos":349,"digest":"md5-6Lb2raDHbiDkI0JtUT+MnA==","length":2456047,"stub":true},"mongoose-2.8.0.tgz":{"content_type":"application/octet-stream","revpos":346,"digest":"md5-Fng/xXeAnv1r6GScyXUlJw==","length":272822,"stub":true},"mongoose-3.0.2.tgz":{"content_type":"application/octet-stream","revpos":343,"digest":"md5-mhKM06hM/Z1u5oWR5FhC4g==","length":2534003,"stub":true},"mongoose-3.0.1.tgz":{"content_type":"application/octet-stream","revpos":340,"digest":"md5-mg8j1gPEU1bpJHsoqVsbfg==","length":2532736,"stub":true},"mongoose-3.0.0.tgz":{"content_type":"application/octet-stream","revpos":333,"digest":"md5-PvEpoYjK2Vw1MQoeBr1RJg==","length":2534873,"stub":true},"mongoose-2.7.3.tgz":{"content_type":"application/octet-stream","revpos":329,"digest":"md5-P2An9PP6Tn2nqTNHB/sCLA==","length":187515,"stub":true},"mongoose-2.7.4.tgz":{"content_type":"application/octet-stream","revpos":325,"digest":"md5-L1msmNH5P4Y8Jv4TG+H3dQ==","length":187535,"stub":true},"mongoose-3.0.0rc0.tgz":{"content_type":"application/octet-stream","revpos":319,"digest":"md5-LWVctJUwqmj+fR8MR/uZSA==","length":2482833,"stub":true},"mongoose-3.0.0alpha2.tgz":{"content_type":"application/octet-stream","revpos":313,"digest":"md5-F2WAk4+KD1PWE6/MANXxIw==","length":204783,"stub":true},"mongoose-2.7.2.tgz":{"content_type":"application/octet-stream","revpos":311,"digest":"md5-jh7UB+fAc8iDEbEkVPPd/A==","length":187060,"stub":true},"mongoose-2.7.1.tgz":{"content_type":"application/octet-stream","revpos":309,"digest":"md5-sNxdRzwWh/U654V3WsdcBA==","length":173770,"stub":true},"mongoose-3.0.0alpha1.tgz":{"content_type":"application/octet-stream","revpos":303,"digest":"md5-gmXkRCYSMKAHUdgFw4gPTg==","length":3120540,"stub":true},"mongoose-2.7.0.tgz":{"content_type":"application/octet-stream","revpos":301,"digest":"md5-OhRXYCACmYvFjO2FDhKQuA==","length":3085928,"stub":true},"mongoose-2.6.8.tgz":{"content_type":"application/octet-stream","revpos":299,"digest":"md5-p2MLVMcrWtGn8DMeyp9C3Q==","length":3084791,"stub":true},"mongoose-2.6.7.tgz":{"content_type":"application/octet-stream","revpos":297,"digest":"md5-aYeGoEcZNLH0oMT/62emBA==","length":169558,"stub":true},"mongoose-2.6.6.tgz":{"content_type":"application/octet-stream","revpos":295,"digest":"md5-VClNWHi4hb5TnhCRfjf2Qg==","length":169385,"stub":true},"mongoose-2.6.5.tgz":{"content_type":"application/octet-stream","revpos":293,"digest":"md5-Xsx3e2TQsrjupVFFfAR1sw==","length":169053,"stub":true},"mongoose-2.6.4.tgz":{"content_type":"application/octet-stream","revpos":291,"digest":"md5-OH0SKwmkDYFPJ+eK1AkGMQ==","length":167818,"stub":true},"mongoose-2.6.3.tgz":{"content_type":"application/octet-stream","revpos":289,"digest":"md5-3wqVLktj/AtV7RJ4sazk0g==","length":168106,"stub":true},"mongoose-2.6.2.tgz":{"content_type":"application/octet-stream","revpos":287,"digest":"md5-0vc0iERb6Jzu57OxUNuifQ==","length":167716,"stub":true},"mongoose-2.6.1.tgz":{"content_type":"application/octet-stream","revpos":285,"digest":"md5-7E2sIEL2O/F30xJVwzGQkw==","length":167669,"stub":true},"mongoose-2.6.0.tgz":{"content_type":"application/octet-stream","revpos":283,"digest":"md5-4KouXBP0COxNKDwe4W4Ocg==","length":168287,"stub":true},"mongoose-2.5.14.tgz":{"content_type":"application/octet-stream","revpos":281,"digest":"md5-dkZRSV/2wi4rsQbB80+wRA==","length":167272,"stub":true},"mongoose-2.5.13.tgz":{"content_type":"application/octet-stream","revpos":278,"digest":"md5-FIDUkWuQUhj23Dm5/4urGA==","length":212871,"stub":true},"mongoose-2.5.12.tgz":{"content_type":"application/octet-stream","revpos":276,"digest":"md5-6hRUV9GoU0m1EzJ2ByumSA==","length":209903,"stub":true},"mongoose-2.5.11.tgz":{"content_type":"application/octet-stream","revpos":274,"digest":"md5-6H051WLEUhdPTFJxsw7ePw==","length":209844,"stub":true},"mongoose-2.5.10.tgz":{"content_type":"application/octet-stream","revpos":272,"digest":"md5-wXpwAHyyPjCg9+CXuZ+4rQ==","length":208610,"stub":true},"mongoose-2.5.9.tgz":{"content_type":"application/octet-stream","revpos":270,"digest":"md5-+XbpH4pdGbkOIwdA5OgSMw==","length":205535,"stub":true},"mongoose-2.5.8.tgz":{"content_type":"application/octet-stream","revpos":267,"digest":"md5-VYSJmTTnEMw3gGAfZl/aPA==","length":205384,"stub":true},"mongoose-2.5.7.tgz":{"content_type":"application/octet-stream","revpos":264,"digest":"md5-QNBWrw8Gh+YWFeMqZjDhgg==","length":203232,"stub":true},"mongoose-2.5.6.tgz":{"content_type":"application/octet-stream","revpos":262,"digest":"md5-fCFGWvxDyhWU/GVgwrs4mg==","length":202391,"stub":true},"mongoose-2.5.5.tgz":{"content_type":"application/octet-stream","revpos":260,"digest":"md5-L4zV7yDE2bf24h1l3aH1pg==","length":202785,"stub":true},"mongoose-2.5.4.tgz":{"content_type":"application/octet-stream","revpos":258,"digest":"md5-R7CmlxYzo41IZbjWPiy/Mg==","length":201415,"stub":true},"mongoose-2.5.3.tgz":{"content_type":"application/octet-stream","revpos":256,"digest":"md5-FL0OUQUHAR1yzPA9bnD3vQ==","length":201167,"stub":true},"mongoose-2.5.2.tgz":{"content_type":"application/octet-stream","revpos":254,"digest":"md5-6nDqrUn8dU1psSDnUpAwZQ==","length":198114,"stub":true},"mongoose-2.5.1.tgz":{"content_type":"application/octet-stream","revpos":252,"digest":"md5-/jgIlmRaM4cPlJw2F6fHZA==","length":197942,"stub":true},"mongoose-2.5.0.tgz":{"content_type":"application/octet-stream","revpos":250,"digest":"md5-Ne6XWRt+vyJSjv0DFJk6wA==","length":199319,"stub":true},"mongoose-2.4.10.tgz":{"content_type":"application/octet-stream","revpos":247,"digest":"md5-y+oNL9wObhE3dSIowMxT0A==","length":182419,"stub":true},"mongoose-2.4.9.tgz":{"content_type":"application/octet-stream","revpos":245,"digest":"md5-60ezXZbuJUis+l6UrT7Ynw==","length":174589,"stub":true},"mongoose-2.4.8.tgz":{"content_type":"application/octet-stream","revpos":243,"digest":"md5-5mccGHs9YnTKci+weKes9w==","length":174489,"stub":true},"mongoose-2.4.7.tgz":{"content_type":"application/octet-stream","revpos":240,"digest":"md5-E3xhMA8jIMuKXokJZ32G2A==","length":173796,"stub":true},"mongoose-2.4.6.tgz":{"content_type":"application/octet-stream","revpos":238,"digest":"md5-nOroakE++t9a71uuqQBOEQ==","length":173135,"stub":true},"mongoose-2.4.5.tgz":{"content_type":"application/octet-stream","revpos":236,"digest":"md5-0gv5Pw5br/LXXSFyAIqy9Q==","length":172625,"stub":true},"mongoose-2.4.4.tgz":{"content_type":"application/octet-stream","revpos":234,"digest":"md5-VIkCdXK5PwquAwkxfmlFIw==","length":172794,"stub":true},"mongoose-2.4.3.tgz":{"content_type":"application/octet-stream","revpos":232,"digest":"md5-taJP5DJ8D4Q0lSG3y2tNAg==","length":172740,"stub":true},"mongoose-2.4.2.tgz":{"content_type":"application/octet-stream","revpos":230,"digest":"md5-LpQhJJF/L8nGvL4YCvOJfA==","length":172292,"stub":true},"mongoose-2.4.1.tgz":{"content_type":"application/octet-stream","revpos":228,"digest":"md5-d2hjLhOyQ7w7oGPkg1zj3A==","length":170628,"stub":true},"mongoose-2.4.0.tgz":{"content_type":"application/octet-stream","revpos":226,"digest":"md5-ajFvEN7a5rr4GrLumY8hdQ==","length":167288,"stub":true},"mongoose-2.3.13.tgz":{"content_type":"application/octet-stream","revpos":221,"digest":"md5-x0YRkrq0WT9Ie7IuSBPX5A==","length":155033,"stub":true},"mongoose-2.3.12.tgz":{"content_type":"application/octet-stream","revpos":216,"digest":"md5-pLc1a4Cp6pGu8haOFgyxaQ==","length":154588,"stub":true},"mongoose-2.3.11.tgz":{"content_type":"application/octet-stream","revpos":214,"digest":"md5-QXphroa8Ajdb8vPGDMm3yw==","length":154258,"stub":true},"mongoose-2.3.10.tgz":{"content_type":"application/octet-stream","revpos":211,"digest":"md5-83SpNSh3hIKJqfHrJabAlg==","length":169131,"stub":true},"mongoose-2.3.9.tgz":{"content_type":"application/octet-stream","revpos":209,"digest":"md5-ymPG8amjaUo9rtAZpqS17Q==","length":152887,"stub":true},"mongoose-2.3.8.tgz":{"content_type":"application/octet-stream","revpos":207,"digest":"md5-FF7tBlNR5IMVGUAb6lIfrg==","length":138045,"stub":true},"mongoose-2.3.7.tgz":{"content_type":"application/octet-stream","revpos":205,"digest":"md5-lY4hqCbx0payxkXbWiY+7A==","length":145503,"stub":true},"mongoose-2.3.6.tgz":{"content_type":"application/octet-stream","revpos":203,"digest":"md5-+cNzzevZ66mmDx1HmrjQWQ==","length":137892,"stub":true},"mongoose-2.3.5.tgz":{"content_type":"application/octet-stream","revpos":201,"digest":"md5-iyaLetcher/xRWiD4Rqgdw==","length":137731,"stub":true},"mongoose-2.3.4.tgz":{"content_type":"application/octet-stream","revpos":199,"digest":"md5-Y5b4a96oV1/kglBAsK9sLw==","length":137112,"stub":true},"mongoose-2.3.3.tgz":{"content_type":"application/octet-stream","revpos":197,"digest":"md5-pTQxyr36MHp7n1jRe/JvnA==","length":134816,"stub":true},"mongoose-2.3.2.tgz":{"content_type":"application/octet-stream","revpos":195,"digest":"md5-KP1czW1Y6T30ut2Ypf3GeA==","length":143129,"stub":true},"mongoose-2.3.1.tgz":{"content_type":"application/octet-stream","revpos":193,"digest":"md5-78dF84KoE3vP3SSvJJJQ1w==","length":133935,"stub":true},"mongoose-2.3.0.tgz":{"content_type":"application/octet-stream","revpos":191,"digest":"md5-rE5NqxgWakLrd8jQ4/6MNQ==","length":132647,"stub":true},"mongoose-2.2.4.tgz":{"content_type":"application/octet-stream","revpos":189,"digest":"md5-uL8dfQ9TXUfyE1CsVa1jLA==","length":141053,"stub":true},"mongoose-2.2.3.tgz":{"content_type":"application/octet-stream","revpos":187,"digest":"md5-VXxuwLMmDbajvxQ2AzLvCg==","length":132223,"stub":true},"mongoose-2.2.2.tgz":{"content_type":"application/octet-stream","revpos":185,"digest":"md5-dmFxnbIVKgELH1bhra1n6A==","length":132203,"stub":true},"mongoose-2.2.1.tgz":{"content_type":"application/octet-stream","revpos":183,"digest":"md5-0r0DLbJJYi/A7xBtL6ANcw==","length":132916,"stub":true},"mongoose-2.2.0.tgz":{"content_type":"application/octet-stream","revpos":181,"digest":"md5-n4lEXX5GCREPQPKV2Won6A==","length":131170,"stub":true},"mongoose-2.1.4.tgz":{"content_type":"application/octet-stream","revpos":179,"digest":"md5-NdTzwDccRU1k3ZZAO9dhGg==","length":130292,"stub":true},"mongoose-2.1.3.tgz":{"content_type":"application/octet-stream","revpos":177,"digest":"md5-xh8ipWBPlsTZNHRQ43xAQw==","length":167327,"stub":true},"mongoose-2.1.2.tgz":{"content_type":"application/octet-stream","revpos":175,"digest":"md5-zv3haduKlNu4cIIjo2AnoA==","length":162604,"stub":true},"mongoose-2.1.1.tgz":{"content_type":"application/octet-stream","revpos":173,"digest":"md5-59Uq1uxvvIbcyLEZ4mdHjA==","length":162558,"stub":true},"mongoose-2.1.0.tgz":{"content_type":"application/octet-stream","revpos":171,"digest":"md5-SV5fCpWjVP+7qisTU8rZKw==","length":161893,"stub":true},"mongoose-2.0.4.tgz":{"content_type":"application/octet-stream","revpos":169,"digest":"md5-nnvYfSpX0UAZcqNbDijSkg==","length":163340,"stub":true},"mongoose-2.0.3.tgz":{"content_type":"application/octet-stream","revpos":167,"digest":"md5-MEe3yZSqRETvOP9hPEnRPQ==","length":129784,"stub":true},"mongoose-2.0.2.tgz":{"content_type":"application/octet-stream","revpos":165,"digest":"md5-4gVCal+aLrvqRCT97F1INA==","length":132551,"stub":true},"mongoose-2.0.1.tgz":{"content_type":"application/octet-stream","revpos":163,"digest":"md5-CE+BT7l+jrDH5Hcz5dUrcg==","length":132472,"stub":true},"mongoose-2.0.0.tgz":{"content_type":"application/octet-stream","revpos":157,"digest":"md5-bnef6nZAFr+GQqwgfzNjYg==","length":134012,"stub":true},"mongoose-1.8.4.tgz":{"content_type":"application/octet-stream","revpos":155,"digest":"md5-CHwOchmxKS4p7F6XG3TwXQ==","length":165587,"stub":true},"mongoose-1.8.3.tgz":{"content_type":"application/octet-stream","revpos":153,"digest":"md5-aYj7rrQgh6R71wjJD2bgDg==","length":133831,"stub":true},"mongoose-1.8.2.tgz":{"content_type":"application/octet-stream","revpos":151,"digest":"md5-09MCDacbRAcnleRDoUILOg==","length":137363,"stub":true},"mongoose-1.8.1.tgz":{"content_type":"application/octet-stream","revpos":149,"digest":"md5-TGr4O5SO4A6sxswt3UkT/w==","length":122930,"stub":true},"mongoose-1.8.0.tgz":{"content_type":"application/octet-stream","revpos":147,"digest":"md5-+MA+9VIoVrSYHAFNH4lvmQ==","length":121471,"stub":true},"mongoose-1.7.4.tgz":{"content_type":"application/octet-stream","revpos":145,"digest":"md5-uNMmcKboKfqVbD4tg+wQuQ==","length":120573,"stub":true},"mongoose-1.7.3.tgz":{"content_type":"application/octet-stream","revpos":143,"digest":"md5-30tekoUqI00TVg47BFxOVQ==","length":119999,"stub":true},"mongoose-1.7.2.tgz":{"content_type":"application/octet-stream","revpos":141,"digest":"md5-lulB/OAJowxloL9GJ40Epw==","length":119609,"stub":true},"mongoose-1.6.0.tgz":{"content_type":"application/octet-stream","revpos":131,"digest":"md5-c2vLUODrze5cWp74zKzRtA==","length":521876,"stub":true},"mongoose-1.5.0.tgz":{"content_type":"application/octet-stream","revpos":129,"digest":"md5-HMPjiIGZHyb4kjQVL+MeGQ==","length":450630,"stub":true},"mongoose-1.4.0.tgz":{"content_type":"application/octet-stream","revpos":127,"digest":"md5-nduB+UCALgr+uivBevspUg==","length":354187,"stub":true},"mongoose-1.3.7.tgz":{"content_type":"application/octet-stream","revpos":125,"digest":"md5-t2tiaWOdby4SkVL7+eG+gg==","length":354516,"stub":true},"mongoose-1.3.6.tgz":{"content_type":"application/octet-stream","revpos":123,"digest":"md5-ICmqQyuS4EOVFj62wz40kA==","length":341826,"stub":true},"mongoose-1.3.5.tgz":{"content_type":"application/octet-stream","revpos":121,"digest":"md5-Y1xkUSPJzsv3YipYBR7XMA==","length":343174,"stub":true},"mongoose-1.3.4.tgz":{"content_type":"application/octet-stream","revpos":119,"digest":"md5-wfBhDETdWswZYFJpYFU9ow==","length":339539,"stub":true},"mongoose-1.3.3.tgz":{"content_type":"application/octet-stream","revpos":117,"digest":"md5-iU81KtGSjyWuMKrZeXzqKw==","length":852662,"stub":true},"mongoose-1.3.2.tgz":{"content_type":"application/octet-stream","revpos":115,"digest":"md5-ukQ+LyvkMqAKPvmZL4l7Ew==","length":846109,"stub":true},"mongoose-1.3.1.tgz":{"content_type":"application/octet-stream","revpos":113,"digest":"md5-knOsOtQUXxaXq4ednFivug==","length":848481,"stub":true},"mongoose-1.3.0.tgz":{"content_type":"application/octet-stream","revpos":111,"digest":"md5-g6gRKkxwZsuqss+oXMOMOg==","length":839236,"stub":true},"mongoose-1.2.0.tgz":{"content_type":"application/octet-stream","revpos":109,"digest":"md5-gCLVSjtTcbCyic+4C7W36A==","length":851537,"stub":true},"mongoose-1.1.25.tgz":{"content_type":"application/octet-stream","revpos":107,"digest":"md5-yx3eSXxSsbkfaeAydBnrzw==","length":870398,"stub":true},"mongoose-1.1.24.tgz":{"content_type":"application/octet-stream","revpos":105,"digest":"md5-8rg/EpzZXcNE+S0LnlH6/g==","length":860104,"stub":true},"mongoose-1.1.23.tgz":{"content_type":"application/octet-stream","revpos":103,"digest":"md5-opzalb7okvSE7MUfPhusfw==","length":330244,"stub":true},"mongoose-1.1.22.tgz":{"content_type":"application/octet-stream","revpos":101,"digest":"md5-UvDrj5Jmgt/QaSTwdC6MhQ==","length":849231,"stub":true},"mongoose-1.1.21.tgz":{"content_type":"application/octet-stream","revpos":99,"digest":"md5-aRmKgjD0tI44Z+Usdchswg==","length":844550,"stub":true},"mongoose-1.1.20.tgz":{"content_type":"application/octet-stream","revpos":97,"digest":"md5-7yBGyjClyeigvGqB0NzPrw==","length":837706,"stub":true},"mongoose-1.1.19.tgz":{"content_type":"application/octet-stream","revpos":95,"digest":"md5-AKckxWpehS6m48uq03FvMA==","length":837632,"stub":true},"mongoose-1.1.18.tgz":{"content_type":"application/octet-stream","revpos":93,"digest":"md5-qITgyDmSzLx6AuB5Q5ORoQ==","length":843508,"stub":true},"mongoose-1.1.17.tgz":{"content_type":"application/octet-stream","revpos":91,"digest":"md5-3UTiWqDh5732T7K0auICOg==","length":904858,"stub":true},"mongoose-1.1.16.tgz":{"content_type":"application/octet-stream","revpos":89,"digest":"md5-bthT0GlLCvaQrs+X9UVPPQ==","length":890675,"stub":true},"mongoose-1.1.15.tgz":{"content_type":"application/octet-stream","revpos":87,"digest":"md5-gu+knuNbgQXJ2RGd/rS3Yg==","length":328810,"stub":true},"mongoose-1.1.14.tgz":{"content_type":"application/octet-stream","revpos":85,"digest":"md5-zLJP4D2Zy8vrR/sEBu+/Lw==","length":328785,"stub":true},"mongoose-1.1.13.tgz":{"content_type":"application/octet-stream","revpos":83,"digest":"md5-2riRd0tQ/wXOazFi/o2mow==","length":328749,"stub":true},"mongoose-1.1.12.tgz":{"content_type":"application/octet-stream","revpos":81,"digest":"md5-UP4XTAHHZvr0yyah0fOTXw==","length":905914,"stub":true},"mongoose-1.1.11.tgz":{"content_type":"application/octet-stream","revpos":79,"digest":"md5-ezza07wZxlRpOC8wgn8cxw==","length":323779,"stub":true},"mongoose-1.1.10.tgz":{"content_type":"application/octet-stream","revpos":77,"digest":"md5-9hHNZ6xxAvOcT63r8Hd83A==","length":323736,"stub":true},"mongoose-1.1.9.tgz":{"content_type":"application/octet-stream","revpos":75,"digest":"md5-y71zzhFNZ8PRwncu0Kxpjw==","length":323695,"stub":true},"mongoose-1.1.8.tgz":{"content_type":"application/octet-stream","revpos":73,"digest":"md5-fRVL5BPVk1MFbX6traGJRw==","length":852741,"stub":true},"mongoose-1.1.7.tgz":{"content_type":"application/octet-stream","revpos":70,"digest":"md5-aqtxoyBW6nGA778BcnAuUA==","length":386896,"stub":true},"mongoose-1.1.6.tgz":{"content_type":"application/octet-stream","revpos":67,"digest":"md5-ZJJNGfYf15jut6i18Sau8A==","length":846975,"stub":true},"mongoose-1.1.5.tgz":{"content_type":"application/octet-stream","revpos":63,"digest":"md5-08ivh5GeS42qemXkGgjN/A==","length":386311,"stub":true},"mongoose-1.1.4.tgz":{"content_type":"application/octet-stream","revpos":61,"digest":"md5-bJY8at0NMjuxQMaikkKL3Q==","length":386495,"stub":true},"mongoose-1.1.3.tgz":{"content_type":"application/octet-stream","revpos":59,"digest":"md5-uCaHair65afsOkHnxMJJ5Q==","length":321805,"stub":true},"mongoose-1.1.2.tgz":{"content_type":"application/octet-stream","revpos":57,"digest":"md5-ug+c3P9lAKmUDEWDzZ26Zw==","length":321420,"stub":true},"mongoose-1.1.1.tgz":{"content_type":"application/octet-stream","revpos":55,"digest":"md5-NEjHyvDrPJjFYjuFS89Ygw==","length":320916,"stub":true},"mongoose-1.1.0.tgz":{"content_type":"application/octet-stream","revpos":53,"digest":"md5-WZsVeBsd2kVvfMplZBZZoQ==","length":320095,"stub":true},"mongoose-1.0.16.tgz":{"content_type":"application/octet-stream","revpos":51,"digest":"md5-iRLiU+LEm9EhgClv9bcjtQ==","length":318927,"stub":true},"mongoose-1.0.15.tgz":{"content_type":"application/octet-stream","revpos":49,"digest":"md5-5ioNdZn/x0frB6xE3Qa/Tg==","length":318664,"stub":true},"mongoose-1.0.14.tgz":{"content_type":"application/octet-stream","revpos":47,"digest":"md5-iYe7oB57kvbV6c5YL29lIg==","length":318559,"stub":true},"mongoose-1.0.13.tgz":{"content_type":"application/octet-stream","revpos":45,"digest":"md5-jO74fXUr8UWLgBGOf071zg==","length":318501,"stub":true},"mongoose-1.0.12.tgz":{"content_type":"application/octet-stream","revpos":43,"digest":"md5-7JcZWTf/vAAv0mt+1SRQWQ==","length":318304,"stub":true},"mongoose-1.0.11.tgz":{"content_type":"application/octet-stream","revpos":41,"digest":"md5-9aEe2vDnRXOYIzQWMLXyqQ==","length":378612,"stub":true},"mongoose-1.0.10.tgz":{"content_type":"application/octet-stream","revpos":39,"digest":"md5-Xxluu4hJN/El9sl1pGsFow==","length":358581,"stub":true},"mongoose-1.0.8.tgz":{"content_type":"application/octet-stream","revpos":37,"digest":"md5-Yne96IBtzK9HoVHcU0fn5Q==","length":358142,"stub":true},"mongoose-1.0.7.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-Y/MzoOMhQ4PVTIajVkad8g==","length":355579,"stub":true},"mongoose-1.0.6.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-Ei2yiWjL/UPv7D5uvCl3uw==","length":354879,"stub":true},"mongoose-1.0.5.tgz":{"content_type":"application/octet-stream","revpos":31,"digest":"md5-rmwCTP0vY5QrBL08XWGYRg==","length":354485,"stub":true},"mongoose-1.0.4.tgz":{"content_type":"application/octet-stream","revpos":29,"digest":"md5-Jz/iMvO9lJ3EqzJhTmz1Ww==","length":353496,"stub":true},"mongoose-1.0.3.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-OAMdQ6QQpAtGBMfUJSlJ4Q==","length":353471,"stub":true},"mongoose-0.0.6.tgz":{"content_type":"application/octet-stream","revpos":24,"digest":"md5-JAsNJmPP39B3x3u40HzJWg==","length":66405,"stub":true},"mongoose-1.0.2.tgz":{"content_type":"application/octet-stream","revpos":22,"digest":"md5-EDkVQVLf0xnGl25UuiS32Q==","length":310457,"stub":true},"mongoose-1.0.1.tgz":{"content_type":"application/octet-stream","revpos":20,"digest":"md5-j7Jxi6r7ccM9pH+oFa7D8Q==","length":309868,"stub":true},"mongoose-1.0.0.tgz":{"content_type":"application/octet-stream","revpos":18,"digest":"md5-/PV0AAk10BMwH66XtPHRkg==","length":304950,"stub":true},"mongoose-0.0.5.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-bJ13vAwuH06hIHv7eif1jw==","length":18451,"stub":true},"mongoose-0.0.4.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-cd/WkAO7nqvihVjhjXB51A==","length":2774701,"stub":true},"mongoose-0.0.3.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-28UMaV8ZNFpKu06vdJAq6A==","length":2775168,"stub":true},"mongoose-0.0.2.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-64pKCvYSMVkZWRnONw9LHQ==","length":17595,"stub":true},"mongoose-0.0.1.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-2BGIBswxdQKq2Gskmtfm2Q==","length":17598,"stub":true}},"_etag":"\"3K618A3RDUGDN62IFU4WZFCJK\""}